<?php

namespace Context\Page\Base;

use Behat\Mink\Element\NodeElement;

/**
 * Page object for datagrid generated by the OroGridBundle
 *
 * @author    Romain Monceau <romain@akeneo.com>
 * @copyright 2013 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Grid extends Index
{
    /**
     * {@inheritdoc}
     */
    public function __construct($session, $pageFactory, $parameters = array())
    {
        parent::__construct($session, $pageFactory, $parameters);

        $this->elements = array_merge(
            $this->elements,
            array(
                'Grid'         => array('css' => 'table.grid'),
                'Grid content' => array('css' => 'table.grid tbody'),
                'Filters'      => array('css' => 'div.filter-box'),
                'Grid toolbar' => array('css' => 'div.grid-toolbar'),
            )
        );
    }

    /**
     * Get a row from the grid containing the value asked
     * @param string $value
     *
     * @throws \InvalidArgumentException
     * @return NodeElement
     */
    public function getRow($value)
    {
        $value = str_replace('"', '', $value);
        $gridRow = $this->getElement('Grid content')->find('css', sprintf('tr:contains("%s")', $value));

        if (!$gridRow) {
            throw new \InvalidArgumentException(
                sprintf('Couldn\'t find a row for value "%s"', $value)
            );
        }

        return $gridRow;
    }

    /**
     * Get row position
     * @param string $value
     *
     * @throws \InvalidArgumentException
     * @return int
     */
    public function getRowPosition($value)
    {
        foreach ($this->getRows() as $key => $row) {
            if ($row->find('css', sprintf('td:contains("%s")', $value))) {
                return $key;
            }
        }

        throw new \InvalidArgumentException(
            sprintf('Couldn\'t find a row for value "%s"', $value)
        );
    }

    /**
     * @param string $element
     * @param string $actionName
     */
    public function clickOnAction($element, $actionName)
    {
        $rowElement = $this->getRow($element);
        $rowElement->find('css', 'a.dropdown-toggle')->click();

        $action = $rowElement->find('css', sprintf('a.action[title="%s"]', $actionName));

        if (!$action) {
            throw new \InvalidArgumentException(
                sprintf('Could not find action "%s".', $actionName)
            );
        }

        $action->click();
    }

    /**
     * Filter the filter name by the value
     *
     * @param string $filterName
     * @param string $value
     */
    public function filterBy($filterName, $value)
    {
        $filter = $this->getFilter($filterName);
        $this->openFilter($filter);

        if ($elt = $filter->find('css', 'select')) {
            $elt->selectOption($value);
        } elseif ($elt = $filter->find('css', 'div.filter-criteria')) {
            $elt->fillField('value', $value);
            $filter->find('css', 'button.filter-update')->click();
        } else {
            throw new \InvalidArgumentException(
                sprintf('Filtering by "%s" is not yet implemented"', $filterName)
            );
        }
    }

    /**
     * Count all rows in the grid
     * @return integer
     */
    public function countRows()
    {
        return count($this->getElement('Grid content')->findAll('css', 'tr'));
    }

    /**
     * Get the text in the specified column of the specified row
     * @param string $column
     * @param string $row
     *
     * @return string
     */
    public function getColumnValue($column, $row)
    {
        return $this->getRowCell($this->getRow($row), $this->getColumnPosition($column))->getText();
    }

    /**
     * @param string $column
     *
     * @return integer
     */
    public function getColumnPosition($column)
    {
        $headers = $this->getColumnHeaders();
        foreach ($headers as $position => $header) {
            if ($column === $header->getText()) {
                return $position;
            }
        }

        throw new \InvalidArgumentException(
            sprintf('Couldn\'t find a column "%s"', $column)
        );
    }

    /**
     * Predicate to know if a column is sorted
     *
     * @param string $column
     *
     * @return boolean
     */
    public function isSortedColumn($column)
    {
        return (bool) $this->getColumn($column)->find('css', 'th.ascending')
            || (bool) $this->getColumn($column)->find('css', 'th.descending');
    }

    /**
     * Predicate to know if a column is sorted and ordered as we want
     *
     * @param string $column
     * @param string $order
     *
     * @return boolean
     */
    public function isSortedAndOrdered($column, $order)
    {
        return (bool) $this->getColumn($column)->find('css', sprintf('th.%s', $order));
    }

    /**
     * Count columns in datagrid
     *
     * @return integer
     */
    public function countColumns()
    {
        return count($this->getColumnHeaders());
    }

    /**
     * Get column
     *
     * @param string $columnName
     *
     * @throws \InvalidArgumentException
     * @return \Behat\Mink\Element\Element
     */
    public function getColumn($columnName)
    {
        $columnHeaders = $this->getColumnHeaders();

        foreach ($columnHeaders as $columnHeader) {
            if ($columnHeader->getText() === $columnName) {
                return $columnHeader;
            }
        }

        throw new \InvalidArgumentException(
            sprintf('Couldn\'t find column "%s"', $columnName)
        );
    }

    /**
     * Get column sorter
     *
     * @param string $columnName
     *
     * @return \Behat\Mink\Element\Element
     */
    public function getColumnSorter($columnName)
    {
        if (!$this->getColumn($columnName)->find('css', 'a')) {
            throw new \InvalidArgumentException(
                sprintf('Column %s is not sortable', $columnName)
            );
        }

        return $this->getColumn($columnName)->find('css', 'a');
    }

    /**
     * Get grid filter from label name
     * @param string $filterName
     *
     * @throws \InvalidArgumentException
     * @return NodeElement
     */
    public function getFilter($filterName)
    {
        if (strtolower($filterName) === 'channel') {
            $filter = $this->getElement('Grid toolbar')->find('css', 'div.filter-item');
        } else {
            $filter = $this->getElement('Filters')->find('css', sprintf('div.filter-item:contains("%s")', $filterName));
        }

        if (!$filter) {
            throw new \InvalidArgumentException(
                sprintf('Couldn\'t find a filter with name "%s"', $filterName)
            );
        }

        return $filter;
    }
    public function selectRow($value)
    {
        $row = $this->getRow($value);
        $checkbox = $row->find('css', 'input[type="checkbox"]');

        if (!$checkbox) {
            throw new \InvalidArgumentException(
                sprintf('Couldn\'t find a checkbox for row "%s"', $value)
            );
        }

        $checkbox->check();

        return $checkbox;
    }
    /**
     * @param string $row
     * @param string $position
     *
     * @return NodeElement
     */
    protected function getRowCell($row, $position)
    {
        $cells = $row->findAll('css', 'td');

        $visibleCells = array();
        foreach ($cells as $cell) {
            $style = $cell->getAttribute('style');
            if (!$style || !preg_match('/display: ?none;/', $style)) {
                $visibleCells[] = $cell;
            }
        }

        $cells = $visibleCells;

        if (!isset($cells[$position])) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Trying to access cell %d of a row which has %d cell(s).',
                    $position,
                    count($cells)
                )
            );
        }

        return $cells[$position];
    }

    /**
     * Open the filter
     * @param NodeElement $filter
     *
     * @throws \InvalidArgumentException
     */
    protected function openFilter(NodeElement $filter)
    {
        if ($element = $filter->find('css', 'button')) {
            $element->click();
        } else {
            throw new \InvalidArgumentException(
                'Impossible to open filter or maybe its type is not yet implemented'
            );
        }
    }

    /**
     * Get column headers
     *
     * @param boolean $withHidden
     *
     * @return \Behat\Mink\Element\Element
     */
    protected function getColumnHeaders($withHidden = false)
    {
        $headers = $this->getElement('Grid')->findAll('css', 'thead th');

        if ($withHidden) {
            return $headers;
        }

        $visibleHeaders = array();
        foreach ($headers as $header) {
            $style = $header->getAttribute('style');
            if (!$style || !preg_match('/display: ?none;/', $style)) {
                $visibleHeaders[] = $header;
            }
        }

        return $visibleHeaders;
    }

    /**
     * Get rows
     *
     * @return \Behat\Mink\Element\Element
     */
    protected function getRows()
    {
        return $this->getElement('Grid content')->findAll('css', 'tr');
    }
}
