envVarsDeployDev: &envVarsDeployDev
envVarsDeployPIMSaaSDev: &envVarsDeployPIMSaaSDev
dockerCloudDeployerUCS: &dockerCloudDeployerUCS
executor-machine: &executor-machine

orbs:
  git-shallow-clone: guitarrapc/git-shallow-clone@2.4.0

jobs:
    checkout:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: ""
        docker:
            -   image: alpine/git
        resource_class: small
        steps:
            -   git-shallow-clone/checkout
            -   run:
                    name: Install cUrl
                    command: apk --no-cache add curl
            -   run:
                    name: Install yq (v3)
                    command: |
                        # Same as alias define in commamd>yml without sudo because of alpine/git docker image
                        wget https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64
                        mv yq_linux_amd64 /usr/local/bin/yq
                        echo "2cc8897984d1ab43b6799aff5eca905d37552fdf  /usr/local/bin/yq" > /tmp/checksum
                        sha1sum -c /tmp/checksum
                        chmod +x /usr/local/bin/yq
            -   run:
                    name: Remove MySQL port translation for EE (see BH-664)
                    command: yq delete --inplace docker-compose.yml services.mysql.ports
            -   run:
                    name: Remove MySQL port translation for GRTH (see BH-664)
                    command: yq delete --inplace grth/docker-compose.yml services.mysql.ports
            -   run:
                    name: Remove MySQL port translation for TRIA
                    command: yq delete --inplace tria/docker-compose.yml services.mysql.ports
            -   when:
                    condition:
                        not:
                            equal: [ master, << pipeline.git.branch >> ]
                    steps:
                        -   run:
                                name: Update composer.json if same branch exists in CE for EE
                                command: |
                                    curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} && \
                                        sed -i "s#akeneo/pim-community-dev\": \"dev-master#akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}#" composer.json || \
                                        echo "No CE branch $CIRCLE_BRANCH found. I don't touch the EE dependencies."
                        -   run:
                                name: Update composer.json if same branch exists in CE for GRTH
                                command: |
                                    curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} && \
                                        sed -i "s#akeneo/pim-community-dev\": \"dev-master#akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}#" grth/composer.json || \
                                        echo "No CE branch $CIRCLE_BRANCH found. I don't touch the Growth Edition file."
                        -   run:
                                name: Update composer.json if same branch exists in CE for TRIA
                                command: |
                                    curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} && \
                                        sed -i "s#akeneo/pim-community-dev\": \"dev-master#akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}#" tria/composer.json || \
                                        echo "No CE branch $CIRCLE_BRANCH found. I don't touch the Tria file."
            -   run:
                    name: Remove useless files
                    command: rm -rf .git/
            -   persist_to_workspace:
                    root: ~/
                    paths:
                        - project
            -   store_artifacts:
                    path: composer.json
                    destination: ee-composer.json
            -   store_artifacts:
                    path: grth/composer.json
                    destination: grth-composer.json
            -   store_artifacts:
                    path: tria/composer.json
                    destination: tria-composer.json
            -   store_artifacts:
                    path: docker-compose.yml
                    destination: ee-docker-compose.yml
            -   store_artifacts:
                    path: grth/docker-compose.yml
                    destination: grth-docker-compose.yml
            -   store_artifacts:
                    path: tria/docker-compose.yml
                    destination: tria-docker-compose.yml

    build_srnt_dev:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - install_yq_v3
            - set_docker_gcp_mirror
            - run:
                  name: Copy docker-compose.override.yml.dist
                  command: cp .circleci/docker-compose.override.yml.dist docker-compose.override.yml
            - run:
                  name: Creating cache key for PHP Docker image
                  command: |
                      find Dockerfile docker/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/php-docker-image.hash
                      date +%F >> ~/php-docker-image.hash
            - restore_cache:
                  name: Restore PHP docker image cache
                  key: php-docker-image-{{ .Environment.CACHE_VERSION }}-{{ checksum "~/php-docker-image.hash" }}
            - run:
                  name: Build the latest Docker images
                  command: |
                      ls php-pim-image.tar && docker load -i php-pim-image.tar
                      ls php-pim-image.tar || make php-image-dev
                      ls php-pim-image.tar || docker save -o php-pim-image.tar akeneo/pim-dev/php:8.1
            - save_cache:
                  name: Save PHP docker image cache
                  key: php-docker-image-{{ .Environment.CACHE_VERSION }}-{{ checksum "~/php-docker-image.hash" }}
                  paths:
                      - php-pim-image.tar
            - run:
                  name: Setup tests results folder and log folder
                  command: mkdir -p var/tests/phpspec var/tests/csfixer var/logs var/tests/screenshots ~/.cache/yarn ~/.cache/Cypress ~/.composer
            - run:
                  name: Creating cache key for JS and PHP dependencies
                  command: |
                      cat yarn.lock > ~/front-dependency.hash && date +%F >> ~/front-dependency.hash
                      cat composer.json > ~/back-dependency.hash && date +%F >> ~/back-dependency.hash
            - restore_cache:
                  name: Restore cache - yarn and Cypress dependency cache
                  keys:
                      - frontend-dependency-cache-{{ checksum "~/front-dependency.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore cache - composer dependency cache
                  keys:
                      - backend-dependency-cache-{{ checksum "~/back-dependency.hash" }}-{{ .Environment.CACHE_VERSION }}
            - change_pim_onboarder_branch_steps
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: |
                      sudo chown -R 1000:1000 ../project
                      sudo chown -R 1000:1000 ~/.composer
                      sudo chown -R 1000:1000 ~/.cache/
            - run:
                  name: Install back and front dependencies
                  command: make dependencies
                  environment:
                      YARN_REGISTRY: "http://registry.yarnpkg.com"
            - run:
                  name: Install assets
                  command: make assets
            - run:
                  name: Build css
                  command: make css
            - run:
                  name: Create hash for front packages
                  command: |
                      find vendor/akeneo/pim-community-dev/front-packages/akeneo-design-system -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/akeneo-design-system.hash
                      find vendor/akeneo/pim-community-dev/front-packages/measurement -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/measurement.hash
                      find vendor/akeneo/pim-community-dev/front-packages/shared -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/shared.hash
                      find components/tailored-export/front/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/tailored-export.hash
                      find components/tailored-import/front/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/tailored-import.hash
                      find components/job-automation/front/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/job-automation.hash
                      find components/performance-analytics/front/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/performance-analytics.hash
                      find vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Job/front/process-tracker -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/process-tracker.hash
                      find vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/CatalogVolumeMonitoringBundle/front -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/catalog-volume-monitoring.hash
                      find vendor/akeneo/pim-community-dev/src/Oro/Bundle/ConfigBundle/front -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/config.hash
                      date +%F | tee -a ~/akeneo-design-system.hash ~/measurement.hash ~/shared.hash ~/tailored-export.hash ~/tailored-import.hash ~/catalog-volume-monitoring.hash ~/process-tracker.hash ~/config.hash
            - run:
                  name: Set front package directories owner to circleci
                  command: sudo chown -R circleci:circleci vendor/akeneo/pim-community-dev/ front-packages/
            - restore_cache:
                  name: Restore front package DSM cache
                  key: front-packages-dsm-{{ checksum "~/akeneo-design-system.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore front package measurement cache
                  key: front-packages-measurement-{{ checksum "~/measurement.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore front package Shared cache
                  key: front-packages-shared-{{ checksum "~/shared.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore component Tailored Export cache
                  key: components-tailored-export-{{ checksum "~/tailored-export.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore component Tailored Import cache
                  key: components-tailored-import-{{ checksum "~/tailored-import.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore component Job Automation cache
                  key: components-job-automation-{{ checksum "~/job-automation.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore front package Performance Analytics cache
                  key: front-performance-analytics-import-{{ checksum "~/performance-analytics.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore micro frontend Process Tracker cache
                  key: micro-frontend-process-tracker-{{ checksum "~/process-tracker.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore micro-frontend Catalog Volume Monitoring cache
                  key: micro-frontend-catalog-volume-monitoring-{{ checksum "~/catalog-volume-monitoring.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore micro-frontend Config cache
                  key: micro-frontend-config-{{ checksum "~/config.hash" }}-{{ .Environment.CACHE_VERSION }}
            - run:
                  name: Set front packages directories owner to docker
                  command: sudo chown -R 1000:1000 vendor/akeneo/pim-community-dev/ front-packages/
            - run:
                  name: Build front-packages
                  command: make front-packages
            - run:
                  name: Build Javascript
                  command: make javascript-dev
            - run:
                  name: Change owner on project dir to have the right to cache the data
                  command: sudo chmod -R 777 ../project ~/.cache ~/.composer vendor/akeneo/pim-community-dev/front-packages/ front-packages/
            - save_cache:
                  name: Save frontend dependency cache
                  paths:
                      - ~/.cache
                  key: frontend-dependency-cache-{{ checksum "~/front-dependency.hash" }}-{{ .Environment.CACHE_VERSION }}
            - save_cache:
                  name: Save backend dependency cache
                  paths:
                      - ~/.composer
                  key: backend-dependency-cache-{{ checksum "~/back-dependency.hash" }}-{{ .Environment.CACHE_VERSION }}
            - save_cache:
                  name: Save front package DSM cache
                  key: front-packages-dsm-{{ checksum "~/akeneo-design-system.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/front-packages/akeneo-design-system/
            - save_cache:
                  name: Save front package Measurement cache
                  key: front-packages-measurement-{{ checksum "~/measurement.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/front-packages/measurement/
            - save_cache:
                  name: Save front package Shared cache
                  key: front-packages-shared-{{ checksum "~/shared.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/front-packages/shared/
            - save_cache:
                  name: Save component Tailored Export cache
                  key: components-tailored-export-{{ checksum "~/tailored-export.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - components/tailored-export/
            - save_cache:
                  name: Save component Tailored Import cache
                  key: components-tailored-import-{{ checksum "~/tailored-import.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - components/tailored-import/
            - save_cache:
                  name: Save component Job Automation cache
                  key: components-job-automation-{{ checksum "~/job-automation.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - components/job-automation/
            - save_cache:
                  name: Save front package Performance Analytics cache
                  key: front-performance-analytics-import-{{ checksum "~/performance-analytics.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - components/performance-analytics/front/
            - save_cache:
                  name: Save micro frontend Process Tracker cache
                  key: micro-frontend-process-tracker-{{ checksum "~/process-tracker.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Job/front/process-tracker/
            - save_cache:
                  name: Save micro-frontend Catalog Volume Monitoring cache
                  key: micro-frontend-catalog-volume-monitoring-{{ checksum "~/catalog-volume-monitoring.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/CatalogVolumeMonitoringBundle/front/
            - save_cache:
                  name: Save micro-frontend Config cache
                  key: micro-frontend-config-{{ checksum "~/config.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/src/Oro/Bundle/ConfigBundle/front/
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project

    build_srnt_prod:
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        working_directory: ~/project
        steps:
            - skip_job:
                  skip: << pipeline.parameters.skip_build >>
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - change_pim_onboarder_branch_steps
            - set_gcloud_config_dev
            - install_yq_v3
            - set_docker_gcp_mirror
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      TYPE_LONG="serenity"
                      IMAGE_TAG=$(echo ${CIRCLE_SHA1} | cut -c -7)-$(echo ${CIRCLE_WORKFLOW_ID} | cut -c -31)
                      IMAGE_TAG_SHORTED=$(echo ${IMAGE_TAG} | cut -c -7)
                      IMAGE_TAG_DATE=$(date +%Y%m%d%H%M%S)
                      RELEASE_NAME="v$(date +%Y%m%d%H%M%S)"
                      PRODUCT_REFERENCE_TYPE="serenity_instance"
                      PRODUCT_REFERENCE_CODE="serenity_${ENV_NAME}"

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export TYPE_LONG=${TYPE_LONG} >> $BASH_ENV
                      echo export IMAGE_TAG=${IMAGE_TAG} >> $BASH_ENV
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> $BASH_ENV
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> $BASH_ENV
                      echo export RELEASE_NAME=${RELEASE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV

                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Serenity release name: ${RELEASE_NAME}"
            - run:
                  name: Build the Serenity Edition prod image
                  command: make -C deployments/ php-image-prod
            - run:
                  name: Push the Serenity Edition prod image on docker registry
                  command: make -C deployments/ push-php-image-prod
            - run:
                  name: Push Terraform modules to GCS
                  command: |
                      BOTO_CONFIG=/dev/null gsutil -m cp -r deployments/ gs://akecld-terraform-modules/serenity-edition-dev/${IMAGE_TAG}/
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export TYPE=${TYPE} > persisted_env_vars
                      echo export TYPE_LONG=${TYPE_LONG} >> persisted_env_vars
                      echo export IMAGE_TAG=${IMAGE_TAG} >> persisted_env_vars
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> persisted_env_vars
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> persisted_env_vars
                      echo export RELEASE_NAME=${RELEASE_NAME} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> persisted_env_vars
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    build_env_vars:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
        environment:
            <<: *envVarsDeployDev
        docker:
            - image: alpine:3
        resource_class: small
        working_directory: ~/project
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Define and persist value for next jobs
                  command: |
                      TYPE=<< parameters.PRODUCT_TYPE >>
                      TYPE_LONG=serenity
                      PRODUCT_REFERENCE_TYPE="${TYPE_LONG}_instance"
                      PRODUCT_REFERENCE_CODE="${TYPE_LONG}_${ENV_NAME}"
                      IMAGE_TAG=${CIRCLE_SHA1}
                      IMAGE_TAG_SHORTED=$(echo ${IMAGE_TAG} | cut -c -7)
                      IMAGE_TAG_DATE=$(date +%Y%m%d%H%M%S)
                      if [[ "${TYPE}" == "grth" ]]; then
                          TYPE_LONG=growth
                          PRODUCT_REFERENCE_TYPE="growth_edition_instance"
                          PRODUCT_REFERENCE_CODE="growth_edition_${ENV_NAME}"
                      fi

                      echo export TYPE=${TYPE} > persisted_env_vars
                      echo export TYPE_LONG=${TYPE_LONG} >> persisted_env_vars
                      echo export IMAGE_TAG=${IMAGE_TAG} >> persisted_env_vars
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> persisted_env_vars
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> persisted_env_vars

                      echo "Type: ${TYPE}"
                      echo "Type long: ${TYPE_LONG}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Product reference type: ${PRODUCT_REFERENCE_TYPE}"
                      echo "Product reference code: ${PRODUCT_REFERENCE_CODE}"
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    build_tria:
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        working_directory: ~/project
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - set_gcloud_config_dev
            - install_yq_v3
            - set_docker_gcp_mirror
            - when:
                  condition:
                      not:
                          equal: [master, << pipeline.git.branch >>]
                  steps:
                      - run:
                            name: Get last good CE build revision on PR
                            command: |
                                if curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH}; then
                                  CE_BRANCH=${CIRCLE_BRANCH}
                                  CE_COMMIT_HASH=HEAD
                                else
                                  CE_BRANCH=master
                                  CE_COMMIT_HASH=HEAD
                                fi

                                echo export CE_BRANCH=${CE_BRANCH} >> $BASH_ENV
                                echo export CE_COMMIT_HASH=${CE_COMMIT_HASH} >> $BASH_ENV
            - when:
                  condition:
                      equal: [master, << pipeline.git.branch >>]
                  steps:
                      - run:
                            name: Get last good CE build revision on master
                            command: |
                                docker run --rm -v ${PWD}/last_good_ce:/app composer composer install
                                CE_BRANCH=master
                                CE_COMMIT_HASH=$(docker run --rm -e CIRCLECI_API_TOKEN -v ${PWD}/last_good_ce:/app composer php get_last_good_ce_revision.php)

                                echo export CE_BRANCH=${CE_BRANCH} >> $BASH_ENV
                                echo export CE_COMMIT_HASH=${CE_COMMIT_HASH} >> $BASH_ENV
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="tria"
                      TYPE_LONG="trial"
                      IMAGE_TAG=trial-$(echo ${CIRCLE_SHA1} | cut -c -7)-$(echo ${CIRCLE_WORKFLOW_ID} | cut -c -25)
                      IMAGE_TAG_SHORTED=$(echo ${CIRCLE_SHA1} | cut -c -7)
                      IMAGE_TAG_DATE=$(date +%Y%m%d%H%M%S)
                      RELEASE_NAME="trial-v$(date +%Y%m%d%H%M%S)"
                      PRODUCT_REFERENCE_TYPE="pim_trial_instance"
                      PRODUCT_REFERENCE_CODE="pim_trial_${ENV_NAME}"

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export TYPE_LONG=${TYPE_LONG} >> $BASH_ENV
                      echo export IMAGE_TAG=${IMAGE_TAG} >> $BASH_ENV
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> $BASH_ENV
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> $BASH_ENV
                      echo export RELEASE_NAME=${RELEASE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV

                      echo "CE Branch used: ${CE_BRANCH}"
                      echo "CE Commit hash used: ${CE_COMMIT_HASH}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Trial Release name: ${RELEASE_NAME}"
            - run:
                  name: Set the right CE branch
                  command: |
                      docker run --rm -v ${PWD}:/app -e CE_COMMIT_HASH=${CE_COMMIT_HASH} -e CE_BRANCH=${CE_BRANCH} -w /srv/pim/${TYPE} composer bash -c 'composer require "akeneo/pim-community-dev:dev-${CE_BRANCH}#${CE_COMMIT_HASH}" --no-update --ignore-platform-reqs'
            - run:
                  name: Prepare chart values
                  command: make -C deployments/ prepare-chart-default-values
            - run:
                  name: Build the Free Trial Edition prod image
                  command: make -C deployments/ php-image-prod
            - run:
                  name: Push the Free Trial Edition prod image on docker registry
                  command: make -C deployments/ push-php-image-prod
            - run:
                  name: Push Terraform modules to GCS
                  command: |
                      BOTO_CONFIG=/dev/null gsutil -m cp -r deployments/ gs://akecld-terraform-modules/trial-edition-dev/${IMAGE_TAG}/
                      BOTO_CONFIG=/dev/null gsutil -m cp -r tria/deployments/terraform/redirection_trial gs://akecld-terraform-modules/trial-edition-dev/${IMAGE_TAG}/deployments/terraform/
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export TYPE=${TYPE} > persisted_env_vars
                      echo export TYPE_LONG=${TYPE_LONG} >> persisted_env_vars
                      echo export IMAGE_TAG=${IMAGE_TAG} >> persisted_env_vars
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> persisted_env_vars
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> persisted_env_vars
                      echo export RELEASE_NAME=${RELEASE_NAME} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> persisted_env_vars
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project

    build_srnt_with_flags:
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        working_directory: ~/project
        steps:
            - skip_job:
                  skip: << pipeline.parameters.skip_build >>
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - change_pim_onboarder_branch_steps
            - set_gcloud_config_dev
            - install_yq_v3
            - set_docker_gcp_mirror
            - run:
                  name: Define value for next steps
                  command: |
                      IMAGE_TAG=${CIRCLE_SHA1}
                      IMAGE_TAG_SHORTED=$(echo ${IMAGE_TAG} | cut -c -7)
                      IMAGE_TAG_DATE=$(date +%Y%m%d%H%M%S)
                      RELEASE_NAME="v$(date +%Y%m%d%H%M%S)"

                      echo export IMAGE_TAG=${IMAGE_TAG} >> $BASH_ENV
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> $BASH_ENV
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> $BASH_ENV
                      echo export RELEASE_NAME=${RELEASE_NAME} >> $BASH_ENV

                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Serenity release name: ${RELEASE_NAME}"
            - run:
                  name: Enable Edition Flag for next deployment
                  command: |
                      echo "Set EditionFlag variable for Makefile and Terraform to deploy all editions type as Serenity Infra"
                      echo "-> export USE_EDITION_FLAG=true"
                      echo export USE_EDITION_FLAG=true >> $BASH_ENV

                      echo "[DEBUG] Check deployments/terraform/pim/values.yaml -> editionFlag.enabled=$(yq r deployments/terraform/pim/values.yaml editionFlag.enabled)"
            - run:
                  name: Build the Serenity Edition prod image
                  command: make -C deployments/ php-image-prod
            - run:
                  name: Push the Serenity Edition prod image on docker registry
                  command: make -C deployments/ push-php-image-prod
            - run:
                  name: Push Terraform modules to GCS
                  command: |
                      BOTO_CONFIG=/dev/null gsutil -m cp -r deployments/ gs://akecld-terraform-modules/serenity-edition-dev/${IMAGE_TAG}/
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export IMAGE_TAG=${IMAGE_TAG} >> persisted_env_vars
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> persisted_env_vars
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> persisted_env_vars
                      echo export RELEASE_NAME=${RELEASE_NAME} >> persisted_env_vars
                      echo export USE_EDITION_FLAG=true >> persisted_env_vars
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    build_ucs:
        environment:
            <<: *envVarsDeployPIMSaaSDev
        machine:
            image: *executor-machine
        resource_class: medium
        working_directory: ~/project
        steps:
            - skip_job:
                  skip: << pipeline.parameters.skip_build >>
            - attach_workspace:
                  at: ~/
            - change_pim_onboarder_branch_steps
            - set_gcloud_config_pim_saas_dev
            - set_common_env_vars
            - install_yq_v3
            - set_docker_gcp_mirror
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      CIRCLE_BRANCH_LOWER=$(echo "${CIRCLE_BRANCH}" | awk '{print tolower($0 )}')
                      PIM_NAMESPACE=$(echo "pim-${CIRCLE_BRANCH_LOWER}" | cut -c -63)
                      HASH_PR_URL=$(echo -n ${CI_PULL_REQUEST} | sha1sum | cut -c -10)
                      IMAGE_TAG=${CIRCLE_SHA1}
                      IMAGE_TAG_SHORTED=$(echo ${IMAGE_TAG} | cut -c -7)
                      RELEASE_NAME="v$(date +%Y%m%d%H%M%S)"
                      IMAGE_TAG_DATE="${RELEASE_NAME:1}"
                      # Use default timmy if timmy step not used
                      SKIP_DEPLOY_TIMMY=true
                      CLOUD_FUNCTION_CREATE_TENANT="${ENV_NAME_SHORTED}-${GOOGLE_REGION_SHORTED}-${CLOUD_FUNCTION_SHORTED}-timmy-create-tenant"
                      CLOUD_FUNCTION_DELETE_TENANT="${ENV_NAME_SHORTED}-${GOOGLE_REGION_SHORTED}-${CLOUD_FUNCTION_SHORTED}-timmy-delete-tenant"

                      echo export TYPE=${TYPE} >> ${BASH_ENV}
                      echo export CIRCLE_BRANCH_LOWER=${CIRCLE_BRANCH_LOWER} >> ${BASH_ENV}
                      echo export PIM_NAMESPACE=${PIM_NAMESPACE} >> ${BASH_ENV}
                      echo export HASH_PR_URL=${HASH_PR_URL} >> ${BASH_ENV}
                      echo export IMAGE_TAG=${IMAGE_TAG} >> ${BASH_ENV}
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> ${BASH_ENV}
                      echo export RELEASE_NAME=${RELEASE_NAME} >> ${BASH_ENV}
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> ${BASH_ENV}
                      echo export SKIP_DEPLOY_TIMMY=${SKIP_DEPLOY_TIMMY} >> ${BASH_ENV}
                      echo export CLOUD_FUNCTION_CREATE_TENANT=${CLOUD_FUNCTION_CREATE_TENANT} >> ${BASH_ENV}
                      echo export CLOUD_FUNCTION_DELETE_TENANT=${CLOUD_FUNCTION_DELETE_TENANT} >> ${BASH_ENV}

                      echo "Type: ${TYPE}"
                      echo "PIM namesapce: ${PIM_NAMESPACE}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Serenity release name: ${RELEASE_NAME}"
            - run:
                  name: Build the Serenity Edition prod image
                  command: make -C deployments-ucs/ pim-image-prod
            - run:
                  name: Push the Serenity Edition prod image on docker registry
                  command: make -C deployments-ucs/ push-pim-image-prod
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export TYPE=${TYPE} > persisted_env_vars
                      echo export CIRCLE_BRANCH_LOWER=${CIRCLE_BRANCH_LOWER} >> persisted_env_vars
                      echo export PIM_NAMESPACE=${PIM_NAMESPACE} >> persisted_env_vars
                      echo export HASH_PR_URL=${HASH_PR_URL} >> persisted_env_vars
                      echo export IMAGE_TAG=${IMAGE_TAG} >> persisted_env_vars
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> persisted_env_vars
                      echo export RELEASE_NAME=${RELEASE_NAME} >> persisted_env_vars
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> persisted_env_vars
                      echo export SKIP_DEPLOY_TIMMY=${SKIP_DEPLOY_TIMMY} >> persisted_env_vars
                      echo export CLOUD_FUNCTION_CREATE_TENANT=${CLOUD_FUNCTION_CREATE_TENANT} >> persisted_env_vars
                      echo export CLOUD_FUNCTION_DELETE_TENANT=${CLOUD_FUNCTION_DELETE_TENANT} >> persisted_env_vars
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    build_ucs_env_vars:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
        environment:
            <<: *envVarsDeployPIMSaaSDev
        machine:
            image: *executor-machine
        resource_class: medium
        working_directory: ~/project
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_pim_saas_dev
            - set_common_env_vars
            - install_yq_v3
            - set_docker_gcp_mirror
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      CIRCLE_BRANCH_LOWER=$(echo "${CIRCLE_BRANCH}" | awk '{print tolower($0 )}')
                      PIM_NAMESPACE=$(echo "pim-${CIRCLE_BRANCH_LOWER}" | cut -c -63)
                      HASH_PR_URL=$(echo -n ${CI_PULL_REQUEST} | sha1sum | cut -c -10)
                      IMAGE_TAG=$(gcloud container images list-tags ${GOOGLE_CLUSTER_REGION}-docker.pkg.dev/${GOOGLE_PROJECT_ID_SHARED}/prod/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      IMAGE_TAG_SHORTED=$(echo ${CIRCLE_SHA1} | cut -c -7)
                      RELEASE_NAME=${IMAGE_TAG}
                      IMAGE_TAG_DATE="${RELEASE_NAME:1}"
                      # Use default timmy if timmy step not used
                      SKIP_DEPLOY_TIMMY=true
                      CLOUD_FUNCTION_CREATE_TENANT="${ENV_NAME_SHORTED}-${GOOGLE_REGION_SHORTED}-${CLOUD_FUNCTION_SHORTED}-timmy-create-tenant"
                      CLOUD_FUNCTION_DELETE_TENANT="${ENV_NAME_SHORTED}-${GOOGLE_REGION_SHORTED}-${CLOUD_FUNCTION_SHORTED}-timmy-delete-tenant"

                      echo export TYPE=${TYPE} >> ${BASH_ENV}
                      echo export CIRCLE_BRANCH_LOWER=${CIRCLE_BRANCH_LOWER} >> ${BASH_ENV}
                      echo export PIM_NAMESPACE=${PIM_NAMESPACE} >> ${BASH_ENV}
                      echo export HASH_PR_URL=${HASH_PR_URL} >> ${BASH_ENV}
                      echo export IMAGE_TAG=${IMAGE_TAG} >> ${BASH_ENV}
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> ${BASH_ENV}
                      echo export RELEASE_NAME=${RELEASE_NAME} >> ${BASH_ENV}
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> ${BASH_ENV}
                      echo export SKIP_DEPLOY_TIMMY=${SKIP_DEPLOY_TIMMY} >> ${BASH_ENV}
                      echo export CLOUD_FUNCTION_CREATE_TENANT=${CLOUD_FUNCTION_CREATE_TENANT} >> ${BASH_ENV}
                      echo export CLOUD_FUNCTION_DELETE_TENANT=${CLOUD_FUNCTION_DELETE_TENANT} >> ${BASH_ENV}

                      echo "Type: ${TYPE}"
                      echo "PIM namesapce: ${PIM_NAMESPACE}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Serenity release name: ${RELEASE_NAME}"
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export TYPE=${TYPE} > persisted_env_vars
                      echo export CIRCLE_BRANCH_LOWER=${CIRCLE_BRANCH_LOWER} >> persisted_env_vars
                      echo export PIM_NAMESPACE=${PIM_NAMESPACE} >> persisted_env_vars
                      echo export HASH_PR_URL=${HASH_PR_URL} >> persisted_env_vars
                      echo export IMAGE_TAG=${IMAGE_TAG} >> persisted_env_vars
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> persisted_env_vars
                      echo export RELEASE_NAME=${RELEASE_NAME} >> persisted_env_vars
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> persisted_env_vars
                      echo export SKIP_DEPLOY_TIMMY=${SKIP_DEPLOY_TIMMY} >> persisted_env_vars
                      echo export CLOUD_FUNCTION_CREATE_TENANT=${CLOUD_FUNCTION_CREATE_TENANT} >> persisted_env_vars
                      echo export CLOUD_FUNCTION_DELETE_TENANT=${CLOUD_FUNCTION_DELETE_TENANT} >> persisted_env_vars
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    build_ucs_infra:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
        environment:
            <<: *envVarsDeployPIMSaaSDev
        machine:
            image: *executor-machine
        resource_class: medium
        working_directory: ~/project
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_pim_saas_dev
            - add_ssh_keys:
                fingerprints:
                  - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - install_yq_v3
            - run:
                  name: Define value for next steps
                  command: |
                      RELEASE_NAME=$(gcloud container images list-tags ${GOOGLE_CLUSTER_REGION}-docker.pkg.dev/${GOOGLE_PROJECT_ID_SHARED}/prod/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      echo export RELEASE_NAME=${RELEASE_NAME} >> ${BASH_ENV}

                      echo "Release name: ${RELEASE_NAME}"
            - run:
                name: Create the infra branch deployement
                command: |
                  ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                  export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                  git config --global user.email "pim_ci@akeneo.com"
                  git config --global user.name "pim_ci_deployment"

                  cd /tmp
                  git clone -b ${CIRCLE_BRANCH} --depth 1 git@github.com:akeneo/pim-enterprise-dev.git
                  git clone -b ${CIRCLE_BRANCH} git@github.com:akeneo/pim-saas-k8s-artifacts.git && cd pim-saas-k8s-artifacts || { git clone git@github.com:akeneo/pim-saas-k8s-artifacts.git && cd pim-saas-k8s-artifacts && git checkout -b ${CIRCLE_BRANCH}; }

                  # argocd
                  rm -rf /tmp/pim-saas-k8s-artifacts/argocd
                  cp -r /tmp/pim-enterprise-dev/deployments-ucs/argocd /tmp/pim-saas-k8s-artifacts/argocd

                  # argocd-apps
                  rm -rf /tmp/pim-saas-k8s-artifacts/argocd-apps
                  yq w -i /tmp/pim-enterprise-dev/deployments-ucs/argocd-apps/values.yaml 'applications.*.source.targetRevision' "${CIRCLE_BRANCH}"
                  cp -r /tmp/pim-enterprise-dev/deployments-ucs/argocd-apps /tmp/pim-saas-k8s-artifacts/argocd-apps

                  # infra
                  rm -rf /tmp/pim-saas-k8s-artifacts/infra
                  mkdir -p /tmp/pim-saas-k8s-artifacts/infra
                  cp -r /tmp/pim-enterprise-dev/deployments-ucs/infra/k8s /tmp/pim-saas-k8s-artifacts/infra/k8s

                  # k8s
                  rm -rf /tmp/pim-saas-k8s-artifacts/k8s

                  # pim-saas-services
                  rm -rf /tmp/pim-saas-k8s-artifacts/pim-saas-service
                  bash /tmp/pim-enterprise-dev/deployments-ucs/bin/deploy_artifacts_akecld-prd-pim-saas-dev-europe-west1.sh
                  bash /tmp/pim-enterprise-dev/deployments-ucs/bin/deploy_artifacts_akecld-prd-pim-saas-dev-europe-west3.sh

                  bash /tmp/pim-enterprise-dev/deployments-ucs/bin/deploy_artifacts_akecld-prd-pim-saas-sandbox-europe-west1.sh

                  bash /tmp/pim-enterprise-dev/deployments-ucs/bin/deploy_artifacts_demo-euw3-gke-pim-saas-demo-1.sh
                  bash /tmp/pim-enterprise-dev/deployments-ucs/bin/deploy_artifacts_demo-usc1-gke-pim-saas-demo-1.sh
                  bash /tmp/pim-enterprise-dev/deployments-ucs/bin/deploy_artifacts_demo-ause1-gke-pim-saas-demo-1.sh

                  cp -r /tmp/pim-enterprise-dev/deployments-ucs/pim-saas-service /tmp/pim-saas-k8s-artifacts/pim-saas-service

                  # tenant
                  rm -rf /tmp/pim-saas-k8s-artifacts/tenant
                  cp -r /tmp/pim-enterprise-dev/deployments-ucs/tenant /tmp/pim-saas-k8s-artifacts/tenant

                  # timmy
                  rm -rf /tmp/pim-saas-k8s-artifacts/timmy
                  cp -r /tmp/pim-enterprise-dev/deployments-ucs/timmy /tmp/pim-saas-k8s-artifacts/timmy

                  git add -A
                  # git diff for commit only when changes are present
                  if ! git diff-index --quiet HEAD; then
                    git commit -m "Update with release ${RELEASE_NAME}"
                    # Should the master branch be protected?
                    git push --set-upstream origin ${CIRCLE_BRANCH}
                  fi
