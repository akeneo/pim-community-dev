#!groovy
@Library("k8s-utils@2.x")

String[] legacyFeatures = ["tests/legacy/features", "src/Akeneo/Pim/Automation/FranklinInsights/tests/features", "vendor/akeneo/pim-community-dev/tests/legacy/features"]
String ceBranch = "master"
String ceOwner = "akeneo"
String launchUnitTests = "yes"
String launchAcceptanceTests = "yes"
String launchIntegrationTests = "yes"
String launchPhpUnitEndToEndTests = "yes"
String launchEndToEndTests = "yes"
String verboseOutputs = "yes"
String slackChannel = ""
String tag = "eu.gcr.io/akeneo-ci/pim-enterprise-dev:${env.BRANCH_NAME}"
String composerCommand = "update"

stage("Build") {
    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                string(defaultValue: 'master', description: 'Community Edition branch used for the build', name: 'ce_branch'),
                string(defaultValue: 'akeneo', description: 'Owner of the repository on GitHub', name: 'ce_owner'),
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run acceptance tests', name: 'launchAcceptanceTests'),
                choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run end to end tests in PhpUnit', name: 'launchPhpUnitEndToEndTests'),
                choice(choices: 'yes\nno', description: 'Run end to end tests (whole Legacy Behat suite)', name: 'launchEndToEndTests'),
                string(defaultValue: 'tests/legacy/features,src/Akeneo/Pim/Automation/FranklinInsights/tests/features,vendor/akeneo/pim-community-dev/tests/legacy/features', description: 'Legacy end to end scenarios to run', name: 'legacyFeatures'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: '', description: 'Channel or user to notify (example : "#channel,@user")', name: 'slackChannel'),
            ])

            if (ceBranch == userInput['ce_branch']) {
                composerCommand = "install"
            }

            ceBranch = userInput['ce_branch']
            ceOwner = userInput['ce_owner']
            legacyFeatures = userInput['legacyFeatures'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            launchAcceptanceTests = userInput['launchAcceptanceTests']
            launchIntegrationTests = userInput['launchIntegrationTests']
            launchPhpUnitEndToEndTests = userInput['launchPhpUnitEndToEndTests']
            launchEndToEndTests = userInput['launchEndToEndTests']
            verboseOutputs = userInput['verboseOutputs']
            slackChannel = userInput['slackChannel']

        }
    }
    milestone 2

    pod {
        if (launchUnitTests.equals("yes") || launchIntegrationTests.equals("yes") || launchAcceptanceTests.equals("yes") || launchPhpUnitEndToEndTests.equals("yes") || launchEndToEndTests.equals("yes")) {
            container('docker') {
                checkout scm
                sh "cp .ci/Dockerfile Dockerfile"
                sh "gcloud builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag},_COMPOSER_COMMAND=${composerCommand},_CE_BRANCH=${ceBranch},_CE_OWNER=${ceOwner} ."
            }
        }
    }
}

stage("Test") {
    try {
        parallel(
            // UNIT TESTS & MISC
            "back-php-coupling-detector": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && make coupling"
            )},
            "back-phpspec": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && su -s /bin/sh www-data -c './vendor/bin/phpspec run --no-interaction --format=junit' > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "back-code-style": {
                testif(
                    condition: launchUnitTests.equals("yes"),
                    container: tag,
                    script: "cd /var/www/pim && vendor/bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > %workspace%/php_cs_fixer_output.xml",
                    junit: "php_cs_fixer_output.xml"
                )
                testif(
                    condition: launchUnitTests.equals("yes"),
                    container: tag,
                    script: "cd /var/www/pim && vendor/bin/php-cs-fixer fix --diff --dry-run --config=src/Akeneo/Pim/Automation/FranklinInsights/tests/back/.php_cs.php --format=junit > %workspace%/php_cs_fixer_franklin_insights_output.xml",
                    junit: "php_cs_fixer_franklin_insights_output.xml"
                )
            },
            "back-check-pullup": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/akeneo/pim-community-dev/bin/check-pullup"
            )},
            "front-code-style": {
                testif(
                    condition: launchUnitTests.equals("yes"),
                    container: tag,
                    script: "cd /var/www/pim && yarn run lint"
                )
                testif(
                    condition: launchUnitTests.equals("yes"),
                    container: tag,
                    script: "cd /var/www/pim && yarn run tslint -c src/Akeneo/Pim/Automation/FranklinInsights/tests/front/tslint.json src/Akeneo/Pim/Automation/FranklinInsights/**/*.ts"
                )
            },
            "front-unit": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run unit"
            )},

            // ACCEPTANCE TESTS
            "front-acceptance": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run webpack-test && MAX_RANDOM_LATENCY_MS=100 yarn run acceptance ./vendor/akeneo/pim-community-dev/tests/features ./tests/features"
            )},
            "back-acceptance": {testif(
                condition: launchAcceptanceTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/behat --strict -p acceptance -vv"
            )},

            // INTEGRATION TESTS
            "front-integration": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run webpack-test && yarn run integration"
            )},
            "back-legacy-integration-phpunit": {queue(
                condition: launchIntegrationTests.equals("yes"),
                container: tag,
                containers: pimContainers(image: tag, selenium: false),
                verbose: (verboseOutputs == "yes"),
                fetcher: {
                    return pimPhpunitFetcher(
                        paths:[
                            "/var/www/pim/src",
                            "/var/www/pim/vendor/akeneo/pim-community-dev/src",
                            "/var/www/pim/vendor/akeneo/pim-community-dev/tests"
                        ]
                    )
                },
                parallelism: 50
            )},

            // END TO END TESTS
            "end-to-end-phpunit": {queue(
                condition: launchPhpUnitEndToEndTests.equals("yes"),
                container: tag,
                containers: pimContainers(image: tag, selenium: false),
                verbose: (verboseOutputs == "yes"),
                fetcher: {
                    return pimPhpunitEndToEndFetcher(
                        paths:[
                            "/var/www/pim/tests"
                        ]
                    )
                }
            )},
            "legacy-end-to-end-behat": {queue(
                condition: launchEndToEndTests.equals("yes"),
                container: tag,
                containers: pimContainers(image: tag),
                verbose: (verboseOutputs == "yes"),
                fetcher: {return pimBehatFetcher(hasToInstall: true, profiles: ["legacy"], features: legacyFeatures)}
            )}
        )
    } finally {
        notifySlack(slackChannel)
    }
}
