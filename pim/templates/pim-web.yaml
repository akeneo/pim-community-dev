apiVersion: apps/v1
kind: Deployment
metadata:
  name: pim-web
  labels:
    app: {{ template "pim.fullName" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: {{ template "pim.fullName" . }}
    {{ include "pim.extraLabels" . | indent 4 }}
    role: pim-web
spec:
  replicas: {{ .Values.pim.replicas }}
  minReadySeconds: 30
  selector:
    matchLabels:
      component: {{ template "pim.fullName" . }}
      role: pim-web
  strategy:
    type: {{ .Values.pim.updateStrategy.type }}
  template:
    metadata:
      labels:
        component: {{ template "pim.fullName" . }}
        role: pim-web
        nfs-recovery: "true"
        {{ include "pim.extraLabels" . | indent 8 }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: "{{ template "pim.fullName" . }}"
                  release: "{{ .Release.Name }}"
                  role: pim-web
      initContainers:
        - name: init-fpm
          image:  "{{ .Values.image.pim.repository }}:{{ required "Value .image.pim.tag is required!" .Values.image.pim.tag }}"
          imagePullPolicy: {{ .Values.image.pim.pullPolicy | quote }}
          command: ['sh', '-c', 'export HOME=/var/www/ && su -m -l www-data -s /bin/bash -c "php bin/console pim:installer:dump-require-paths && yarn run webpack" && cp -p -r -f /var/www/html/web/* /var/www/html/web/.htaccess /web-src/. ']
          volumeMounts:
            - name: web-src
              mountPath: web-src
            {{- if .Values.onboarder.enabled }}
            # we need the key
            - name: google-cloud-onboarder-key
              mountPath: /var/secrets/google/key.json
              subPath: key.json
              readOnly: true
            {{- end }}
          envFrom: [ configMapRef: { name: {{ template "pim.fullName" . }}-env } ]
          env:
            - { name: MAILER_USER, valueFrom: { secretKeyRef: { name: pim-secrets, key: mailerLogin } } }
            - { name: MAILER_PASSWORD, valueFrom: { secretKeyRef: { name: pim-secrets, key: mailerPassword } } }
            - { name: PIM_DATABASE_PASSWORD, valueFrom: { secretKeyRef: { name: pim-secrets, key: mysqlPimUserPassword } } }
            - { name: GOOGLE_NAMESPACE, valueFrom: { fieldRef: { fieldPath: metadata.namespace } } }
            - { name: GOOGLE_POD_NAME, valueFrom: { fieldRef: { fieldPath: metadata.name } } }
      containers:
        - name: fpm
          image: "{{ .Values.image.pim.repository }}:{{ .Values.image.pim.tag }}"
          imagePullPolicy: {{ .Values.image.pim.pullPolicy | quote }}
          resources:
{{ toYaml .Values.pim.resources | indent 12 }}
          ports:
            - name: fpm
              containerPort: 9000
          volumeMounts:
            - name: web-src
              mountPath: /var/www/html/web
            - name: fpm-data
              mountPath: /data
              readOnly: false
            {{- if .Values.onboarder.enabled }}
            - name: google-cloud-onboarder-key
              mountPath: /var/secrets/google/key.json
              subPath: key.json
              readOnly: true
            - name: sso-onboarder-private
              mountPath: /var/secrets/pimmaster/pimmaster.pem
              subPath: pimmaster.pem
              readOnly: true
            - name: sso-onboarder-public
              mountPath: /var/secrets/pimmaster/pimmaster.crt
              subPath: pimmaster.crt
              readOnly: true
            {{- end }}
          envFrom: [ configMapRef: { name: {{ template "pim.fullName" . }}-env } ]
          env:
            - { name: MAILER_USER, valueFrom: { secretKeyRef: { name: pim-secrets, key: mailerLogin } } }
            - { name: MAILER_PASSWORD, valueFrom: { secretKeyRef: { name: pim-secrets, key: mailerPassword } } }
            - { name: PIM_DATABASE_PASSWORD, valueFrom: { secretKeyRef: { name: pim-secrets, key: mysqlPimUserPassword } } }
            - { name: GOOGLE_NAMESPACE, valueFrom: { fieldRef: { fieldPath: metadata.namespace } } }
            - { name: GOOGLE_POD_NAME, valueFrom: { fieldRef: { fieldPath: metadata.name } } }
{{- if .Values.common.phpConfFPM }}
{{ toYaml .Values.common.phpConfFPM  | indent 12 }}
{{- end }}
          readinessProbe:
            tcpSocket:
              port: fpm
            initialDelaySeconds: 5
            periodSeconds: 1
            successThreshold: 3
          readinessProbe:
            exec:
              command:
              - timeout
              - "1"
              - touch
              - /data/readinessProbeNFS
            failureThreshold: 1
            initialDelaySeconds: 1
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            tcpSocket:
              port: fpm
            timeoutSeconds: 1
        - name: httpd
          image: "{{ .Values.image.httpd.repository }}:{{ .Values.image.httpd.tag }}"
          imagePullPolicy: {{ .Values.image.httpd.pullPolicy | quote }}
          ports:
            - containerPort: 80
              name: httpd
          volumeMounts:
            - name: web-src
              mountPath: /var/www/html/web
              readOnly: true
            - mountPath: /usr/local/apache2/conf/
              name: conf-httpd
              readOnly: true
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /user/login
              port: httpd
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 1
            successThreshold: 3
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /user/login
              port: httpd
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      volumes:
        - name: web-src
          emptyDir: {}
        - name: fpm-data
          persistentVolumeClaim:
            claimName: pvc-data-pim-{{required ".Values.global.extraLabels.instanceName is required" .Values.global.extraLabels.instanceName }}
        - name: conf-httpd
          configMap:
            name: pim-config
            items:
              - key: httpd.conf
                path: httpd.conf
              - key: mime.types
                path: mime.types
        {{- if .Values.onboarder.enabled }}
        - name: google-cloud-onboarder-key
          secret:
            secretName: pim-secrets
            items:
            - key: akobOnboarderKey
              path: key.json
        - name: sso-onboarder-private
          secret:
            secretName: pim-secrets
            items:
            - key: akobPimmasterPem
              path: pimmaster.pem
        - name: sso-onboarder-public
          secret:
            secretName: pim-secrets
            items:
            - key: akobPimmasterCrt
              path: pimmaster.crt
        {{- end }}
