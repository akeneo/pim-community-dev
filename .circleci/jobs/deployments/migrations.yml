envVarsDeployDev: &envVarsDeployDev
dockerCloudDeployerNext: &dockerCloudDeployerNext

jobs:
    # Description :
    #    Use disk snapshot for prod customer to clone their instances
    #    Apply doctrine migration on those environment to check compatibility from Flex N-1 to Flex N
    #    The final infra for this environment is neither FLEX, neither SRNT
    test_migrate_flex:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            SOURCE_PFID_SOURCE_PROJECT_ID:
                type: string
                default: ""
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Define value for next steps
                  command: |
                      if [[ "${RELEASE_NAME}" == "" ]]; then
                          RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      else
                          RELEASE_TO_DEPLOY=${IMAGE_TAG}
                      fi
                      SOURCE_PFID_SOURCE_PROJECT_ID=<< parameters.SOURCE_PFID_SOURCE_PROJECT_ID >>
                      SOURCE_PFID="${SOURCE_PFID_SOURCE_PROJECT_ID%%##*}"
                      SOURCE_PROJECT_ID="${SOURCE_PFID_SOURCE_PROJECT_ID##*##}"
                      INSTANCE_NAME_PREFIX=pimci-duplic
                      INSTANCE_NAME=${INSTANCE_NAME_PREFIX}-$(echo "${SOURCE_PFID}" | cut -c1-20)-${CIRCLE_BUILD_NUM}

                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export SOURCE_PFID=${SOURCE_PFID} >> $BASH_ENV
                      echo export SOURCE_PROJECT_ID=${SOURCE_PROJECT_ID} >> $BASH_ENV
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV

                      echo "Source PFID: ${SOURCE_PFID}"
                      echo "Source project ID: ${SOURCE_PROJECT_ID}"
                      echo "Instance name prefix: ${INSTANCE_NAME_PREFIX}"
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Migrate Flex
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      IMAGE_TAG=${RELEASE_TO_DEPLOY} make -C deployments/ migrate_flexibility
                      make -C deployments/ commit-instance
            - run:
                  name: Prepare infrastructure artifacts
                  command: make -C deployments/ prepare-infrastructure-artifacts
                  when: on_fail
            - store_artifacts:
                  path: ~/artifacts/infra
            - run:
                  name: Remove env on kubernetes
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                  when: always

    # Description :
    #    Use disk snapshot for prod customer to clone their instances
    #    Migrate this environment to SRNT
    #    The final infra for this environment is SRNT
    test_migrate_from_flex_customer_db:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            SOURCE_PFID_SOURCE_PROJECT_ID:
                type: string
                default: ""
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Define value for next steps
                  command: |
                      if [[ "${RELEASE_NAME}" == "" ]]; then
                          RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      else
                          RELEASE_TO_DEPLOY=${IMAGE_TAG}
                      fi
                      SOURCE_PFID_SOURCE_PROJECT_ID=<< parameters.SOURCE_PFID_SOURCE_PROJECT_ID >>
                      SOURCE_PFID="${SOURCE_PFID_SOURCE_PROJECT_ID%%##*}"
                      SOURCE_PROJECT_ID="${SOURCE_PFID_SOURCE_PROJECT_ID##*##}"
                      INSTANCE_NAME_PREFIX=pimci-duplic
                      INSTANCE_NAME=${INSTANCE_NAME_PREFIX}-$(echo "${SOURCE_PFID}" | cut -c1-20)-${CIRCLE_BUILD_NUM}

                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export SOURCE_PFID=${SOURCE_PFID} >> $BASH_ENV
                      echo export SOURCE_PROJECT_ID=${SOURCE_PROJECT_ID} >> $BASH_ENV
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV

                      echo "Source PFID: ${SOURCE_PFID}"
                      echo "Source project ID: ${SOURCE_PROJECT_ID}"
                      echo "Instance name prefix: ${INSTANCE_NAME_PREFIX}"
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Migrate Flex to SRNT environment
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      IMAGE_TAG=${RELEASE_TO_DEPLOY} make -C deployments/ migrate_flexibility_to_serenity
                      make -C deployments/ commit-instance
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      PIM_ADMIN_PASSWORD=$(yq r /root/project/deployments/instances/${TYPE}-${INSTANCE_NAME}/values.yaml pim.defaultAdminUser.password)
                      echo export PIM_ADMIN_PASSWORD=${PIM_ADMIN_PASSWORD} >> persisted_env_vars
                      echo export SOURCE_PFID=${SOURCE_PFID} >> persisted_env_vars
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> persisted_env_vars
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> persisted_env_vars
            - run:
                  name: Prepare infrastructure artifacts
                  command: make -C deployments/ prepare-infrastructure-artifacts
                  when: on_fail
            - store_artifacts:
                  path: ~/artifacts/infra
            - run:
                  name: Remove env on kubernetes
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                  when: on_fail
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars
