#!groovy
@Library("k8s-utils@1.4")

String[] editions = ["ce", "ceodm"]
String[] features = ["features"]
String launchUnitTests = "yes"
String launchIntegrationTests = "yes"
String launchBehatTests = "yes"
String verboseOutputs = "yes"
String slackChannel = ""
String tag = "eu.gcr.io/akeneo-ci/pim-community-dev:${env.BRANCH_NAME}"

stage("Build") {
    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run behat tests', name: 'launchBehatTests'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: 'ee,ce,ceodm,eeodm', description: 'PIM edition the behat tests should run on (comma separated values)', name: 'editions'),
                string(defaultValue: 'features,vendor/akeneo/pim-community-dev/features', description: 'Behat scenarios to build', name: 'features'),
            ])

            editions = userInput['editions'].tokenize(',')
            features = userInput['features'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            launchIntegrationTests = userInput['launchIntegrationTests']
            launchBehatTests = userInput['launchBehatTests']
            verboseOutputs = userInput['verboseOutputs']
        }
    }
    milestone 2

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        parallel(
            "pim-ce": {
                if ((editions.contains("ce") && launchBehatTests.equals("yes")) || launchUnitTests.equals("yes") || launchIntegrationTests.equals("yes")) {
                    pod(label: "build", containers: [
                        containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud:latest", ttyEnabled: true, command: 'cat', resourceRequestCpu: '100m', resourceRequestMemory: '200Mi')
                    ]) {container('docker') {
                        checkout scm
                        sh "gcloud container builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag} ."
                    }}
                }
            }/*,
            "pim-ee": {
                if (editions.contains("ee") && launchBehatTests.equals("yes")) {
                    pod(label: "build", containers: [
                        containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud:latest", ttyEnabled: true, command: 'cat', resourceRequestCpu: '100m', resourceRequestMemory: '200Mi')
                    ]) {container('docker') {
                        checkout([$class: 'GitSCM',
                            branches: [[name: '1.7']],
                            userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-enterprise-dev.git']]
                        ])

                        dir('packages/pim-community-dev') {
                            checkout scm
                        }

                        sh "gcloud container builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag}-ee ."
                    }}
                } else {
                    echo "Skipping Enterprise Edition matrix"
                }
            },
            "pim-ce-odm": {
                if (editions.contains("ceodm") && launchBehatTests.equals("yes")) {
                    withBuildNode({
                        checkout scm
                        container("php") {
                            sh "composer update --optimize-autoloader --no-interaction --no-progress --prefer-dist"
                            sh "app/console oro:requirejs:generate-config"
                            sh "app/console assets:install"
                        }
                        container("node") {
                            sh "npm install --color=always"
                        }
                        container("docker") {
                            sh "cp .ci/behat.community.yml behat.yml"

                            sh "mkdir -m 777 -p app/build/logs/behat app/build/logs/consumer "
                            sh "cp app/config/parameters_test.yml.dist app/config/parameters_test.yml"
                            sh "sed -i \"s#database_host: .*#database_host: 127.0.0.1#g\" app/config/parameters_test.yml"
                            sh "sed \"\$a    installer_data: 'PimInstallerBundle:minimal'\n\" app/config/parameters_test.yml"

                            sh "sed -i \"s@// new Doctrine@new Doctrine@g\" app/AppKernel.php"
                            sh "sed -i \"s@# mongodb_database: .*@mongodb_database: akeneo_pim@g\" app/config/pim_parameters.yml"
                            sh "sed -i \"s@# mongodb_server: .*@mongodb_server: 'mongodb://127.0.0.1:27017'@g\" app/config/pim_parameters.yml"
                            sh "printf \"    pim_catalog_product_storage_driver: doctrine/mongodb-odm\n\" >> app/config/parameters_test.yml"

                            sh "gcloud container builds submit --tag eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ceodm ."
                        }
                    })
                } else {
                    echo "Skipping Community Edition ODM matrix"
                }
            },
             "pim-ee-odm": {
                 if (editions.contains("eeodm") && launchBehatTests.equals("yes")) {
                    withBuildNode({
                        checkout([$class: 'GitSCM',
                            branches: [[name: '1.7']],
                            userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-enterprise-dev.git']]
                        ])
                        sh "mkdir -m 777 vendor"
                        container("php") {
                            sh "php -d memory_limit=-1 /usr/local/bin/composer update --optimize-autoloader --no-interaction --no-progress --prefer-dist --ansi"
                            sh "chmod 777 -R vendor/akeneo"
                            dir('vendor/akeneo/pim-community-dev') {
                                deleteDir()
                                checkout scm
                            }
                            sh "app/console oro:requirejs:generate-config"
                            sh "app/console assets:install"
                        }
                        container("node") {
                            sh "npm install --color=always"
                        }
                        container("docker") {
                            sh "cp vendor/akeneo/pim-community-dev/.ci/behat.enterprise.yml behat.yml"

                            sh "mkdir -m 777 -p app/build/logs/behat app/build/logs/consumer "
                            sh "cp app/config/parameters_test.yml.dist app/config/parameters_test.yml"
                            sh "sed -i \"s#database_host: .*#database_host: 127.0.0.1#g\" app/config/parameters_test.yml"
                            sh "sed \"\$a    installer_data: 'PimEnterpriseInstallerBundle:minimal'\n\" app/config/parameters_test.yml"
                            sh "sed -i \"s@// new Doctrine@new Doctrine@g\" app/AppKernel.php"
                            sh "sed -i \"s@# mongodb_database: .*@mongodb_database: akeneo_pim@g\" app/config/pim_parameters.yml"
                            sh "sed -i \"s@# mongodb_server: .*@mongodb_server: 'mongodb://127.0.0.1:27017'@g\" app/config/pim_parameters.yml"
                            sh "printf \"    pim_catalog_product_storage_driver: doctrine/mongodb-odm\n\" >> app/config/parameters_test.yml"

                            // Compatibility layer while the EE is not up to date with the new CI
                            sh "cp vendor/akeneo/pim-community-dev/Dockerfile ."
                            sh "cp -R vendor/akeneo/pim-community-dev/.ci ."

                            sh "gcloud container builds submit --tag eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-eeodm ."
                        }
                    })
                } else {
                    echo "Skipping Enterprise Edition ODM matrix"
                }
             }*/
        )
    }
}

stage("Test") {
    try {
        milestone 3
        parallel(
            "phpunit": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && ./bin/phpunit -c app/phpunit.xml.dist --testsuite PIM_Unit_Test --log-junit %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "phpspec": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && su -s /bin/sh www-data -c './bin/phpspec run --format=junit' > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "php-cs-fixer": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && ./bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )}/*,
            "grunt": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && grunt",
                junit: "junit_output.xml"
            )},
            "phpunit-integration": {
                if (launchIntegrationTests.equals("yes")) {
                    queue({
                        def files = sh (returnStdout: true, script: 'find /home/jenkins/pim/src -name "*Integration.php" -exec sh -c "grep -Ho \'function test\' {} | uniq -c"  \\; | sed "s/:function test//"').tokenize('\n')
                        def messages = new net.sf.json.JSONArray()
                        for (line in files) {
                            def file = line.tokenize(' ')
                            def commands = [
                                [container: "php", script: "./app/console --env=test pim:install --force"],
                                [container: "php", script: "mkdir -p app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads"],
                                [container: "php", script: "chmod 777 /tmp"],
                                [container: "php", script: "mkdir -m 777 -p app/build/logs/behat web/media"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/", name: "junit_output.xml"],
                                    script: "php -d error_reporting='E_ALL' ./bin/phpunit -c app/phpunit.xml.dist " + file[1] + " --log-junit junit_output.xml"
                                ]
                            ]
                            def message = new net.sf.json.JSONObject()
                            message.put("name",file[1])
                            message.put("commands",commands)
                            messages.add(message)
                        }

                        return messages
                    }, 10, "ce", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping integration test"
                }
            }/*,
            "behat-ce": {
                if (launchBehatTests.equals("yes") && editions.contains("ce")) {
                    queue({
                        sh (returnStdout: true, script: "mkdir -m 777 -p /home/jenkins/pim/app/build/logs/behat/");
                        def scenarios = []
                        for (feature in features) {
                            scenarios = (scenarios + sh (returnStdout: true, script: "cd /home/jenkins/pim && if [ -e $feature ]; then php ./bin/behat $feature --list-scenarios; fi").tokenize('\n'))
                        }
                        scenarios = scenarios.unique()
                        def messages = new net.sf.json.JSONArray()

                        for (scenario in scenarios) {
                            def commands = [
                                [container: "php", script: "cp .ci/akeneo-behat.conf /etc/apache2/sites-available/000-default.conf"],
                                [container: "php", script: "rm -rf /tmp/behat/screenshots/*"],
                                [container: "php", script: "sed -i '2 a umask(0000);' bin/behat"],
                                [container: "php", script: "mkdir -p app/cache/tmp/pim-import app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chown -R docker /home/jenkins/pim"],
                                [container: "php", script: "/usr/sbin/apache2ctl graceful"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_US'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_GB'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump fr_FR'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump de_DE'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump es_MX'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat pim:install --force'"],
                                [container: "php", script: "su docker -c 'touch app/logs/behat.log'"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "su docker -c 'php ./bin/behat --strict -vv " + scenario + "'"
                                ]
                            ]
                            def message = new net.sf.json.JSONObject()
                            message.put("name",scenario)
                            message.put("commands",commands)
                            messages.add(message)
                        }

                        return messages
                    }, 100, "ce", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping behat test"
                }
            },
            "behat-ee": {
                if (launchBehatTests.equals("yes") && editions.contains("ee")) {
                    queue({
                        sh (returnStdout: true, script: "mkdir -m 777 -p /home/jenkins/pim/app/build/logs/behat/");
                        def scenarios = []
                        for (feature in features) {
                            scenarios = (scenarios + sh (returnStdout: true, script: "cd /home/jenkins/pim && if [ -e $feature ]; then php ./bin/behat $feature --list-scenarios; fi").tokenize('\n'))
                        }
                        scenarios = scenarios.unique()
                        def messages = new net.sf.json.JSONArray()

                        for (scenario in scenarios) {
                            def commands = [
                                [container: "php", script: "cp .ci/akeneo-behat.conf /etc/apache2/sites-available/000-default.conf"],
                                [container: "php", script: "rm -rf /tmp/behat/screenshots/*"],
                                [container: "php", script: "sed -i '2 a umask(0000);' bin/behat"],
                                [container: "php", script: "mkdir -p app/cache/tmp/pim-import app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chown -R docker /home/jenkins/pim"],
                                [container: "php", script: "/usr/sbin/apache2ctl graceful"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_US'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_GB'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump fr_FR'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump de_DE'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump es_MX'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat pim:install --force'"],
                                [container: "php", script: "su docker -c 'touch app/logs/behat.log'"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "su docker -c 'php ./bin/behat --strict -vv " + scenario + "'"
                                ]
                            ]
                            def message = new net.sf.json.JSONObject()
                            message.put("name",scenario)
                            message.put("commands",commands)
                            messages.add(message)
                        }

                        return messages
                    }, 150, "ee", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping behat test"
                }
            },
            "behat-ce-odm": {
                if (launchBehatTests.equals("yes") && editions.contains("ceodm")) {
                    queue({
                        sh (returnStdout: true, script: "mkdir -m 777 -p /home/jenkins/pim/app/build/logs/behat/");
                        def scenarios = []
                        for (feature in features) {
                            scenarios = (scenarios + sh (returnStdout: true, script: "cd /home/jenkins/pim && if [ -e $feature ]; then php ./bin/behat $feature --list-scenarios; fi").tokenize('\n'))
                        }
                        scenarios = scenarios.unique()
                        def messages = new net.sf.json.JSONArray()

                        for (scenario in scenarios) {
                            def commands = [
                                [container: "php", script: "cp .ci/akeneo-behat.conf /etc/apache2/sites-available/000-default.conf"],
                                [container: "php", script: "rm -rf /tmp/behat/screenshots/*"],
                                [container: "php", script: "sed -i '2 a umask(0000);' bin/behat"],
                                [container: "php", script: "mkdir -p app/cache/tmp/pim-import app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chown -R docker /home/jenkins/pim"],
                                [container: "php", script: "/usr/sbin/apache2ctl graceful"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_US'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_GB'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump fr_FR'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump de_DE'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump es_MX'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat pim:install --force'"],
                                [container: "php", script: "su docker -c 'touch app/logs/behat.log'"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "su docker -c 'php ./bin/behat --strict -vv " + scenario + "'"
                                ]
                            ]
                            def message = new net.sf.json.JSONObject()
                            message.put("name",scenario)
                            message.put("commands",commands)
                            messages.add(message)
                        }

                        return messages
                    }, 100, "ceodm", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping behat test"
                }
	          },
            "behat-ee-odm": {
                if (launchBehatTests.equals("yes") && editions.contains("eeodm")) {
                    queue({
                        sh (returnStdout: true, script: "mkdir -m 777 -p /home/jenkins/pim/app/build/logs/behat/");
                        def scenarios = []
                        for (feature in features) {
                            scenarios = (scenarios + sh (returnStdout: true, script: "cd /home/jenkins/pim && if [ -e $feature ]; then php ./bin/behat $feature --list-scenarios; fi").tokenize('\n'))
                        }
                        scenarios = scenarios.unique()
                        def messages = new net.sf.json.JSONArray()

                        for (scenario in scenarios) {
                            def commands = [
                                [container: "php", script: "cp .ci/akeneo-behat.conf /etc/apache2/sites-available/000-default.conf"],
                                [container: "php", script: "rm -rf /tmp/behat/screenshots/*"],
                                [container: "php", script: "sed -i '2 a umask(0000);' bin/behat"],
                                [container: "php", script: "mkdir -p app/cache/tmp/pim-import app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chown -R docker /home/jenkins/pim"],
                                [container: "php", script: "/usr/sbin/apache2ctl graceful"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_US'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_GB'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump fr_FR'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump de_DE'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump es_MX'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat pim:install --force'"],
                                [container: "php", script: "su docker -c 'touch app/logs/behat.log'"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "su docker -c 'php ./bin/behat --strict -vv " + scenario + "'"
                                ]
                            ]
                            def message = new net.sf.json.JSONObject()
                            message.put("name",scenario)
                            message.put("commands",commands)
                            messages.add(message)
                        }

                        return messages
                    }, 100, "eeodm", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping behat test"
                }
            }*/
        )
    } finally {
        notifySlack(slackChannel)
    }
}
