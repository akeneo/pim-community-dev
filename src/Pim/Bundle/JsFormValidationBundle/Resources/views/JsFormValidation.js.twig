/**
 * Custom javascript form validation for PIM
 */

require(['jquery', 'oro/translator', 'bootstrap'],
function($, __){
{% block before %}{% endblock %}

var jsfv = new function () {
    function getComputeMessage(key, placeholders, number) {

        var result = __(key, placeholders, number);
        if (undefined == result && number != undefined) {
            // Try to get translated string without a number parameter.
            result = __(key, placeholders);
        }

        return result;
    }

    function isNotDefined(value) {
        return (typeof value === 'undefined' || null === value || '' === value);
    }

    function showErrorsOnGroups() {
        var $groups = $('div.tab-groups ul');
        if (!$groups.length) {
            return;
        }

        var $error = $('<i class="validation-tooltip" data-placement="right" data-toggle="tooltip" data-original-title="{{ 'There are errors in this tab!'|trans }}"></i>');

        $groups.find('a').each(
            function() {
                var target = $(this).attr('href');
                if (!target || target == '#' || target == 'javascript:void(0);') {
                    return;
                }

                if ($(target).find('.validation-tooltip').length) {
                    if (!$(this).find('.validation-tooltip').length) {
                        $(this).append($error.tooltip());
                    }
                } else {
                    $(this).find('.validation-tooltip').remove();
                }
            }
        )
    }

    function highlightTabsWithErrors() {
        var $tabs = $('#form-navbar ul.nav');
        if (!$tabs.length) {
            return;
        }

        $tabs.find('a').each(
            function() {
                var target = $(this).attr('href');
                if (!target || target == '#' || target == 'javascript:void(0);') {
                    return;
                }

                if ($(target).find('.validation-tooltip').length) {
                    $(this).addClass('error');
                } else {
                    $(this).removeClass('error');
                }
            }
        )
    }

    function showFirstTabWithErrors() {
        $errors = $('.validation-tooltip');
        if (!$errors.length || $errors.filter(':visible').length) {
            return;
        }

        $error = $errors.first();
        $('a[href="#'+$error.closest('.tab-pane').attr('id')+'"]').click();
    }

{% block getFieldValue %}
    function getFieldValue(field) {
        if (!field || !field.nodeName) {
            return undefined;
        }

        var resolveField = function(field) {
            if (-1 != $.inArray(field.nodeName.toLowerCase(), ['input', 'select', 'textarea'])) {
                return $(field);
            }
            var select = $('select', field);
            if (select.length) {
                return select;
            }
            var input = $('input', field);
            if (input.length) {
                if (!input.filter('[type=checkbox]') && !input.filter('[type=radio]')) {
                    return input.first();
                }
                return input;
            }
            var textarea = $('textarea', field);
                if (textarea.length) {
                return textarea.get(0);
            }
            return undefined;
        }

        var $field = resolveField(field);
        var isMultiple = $field.length > 1 || $field.filter('select[multiple=multiple]').length;
        var value = undefined;

        if ($field.filter('input[type="checkbox"]').length) {
            value = $field.filter(':checked').map(function(i, cb) { return $(cb).val(); }).get();
        } else if ($field.filter('input[type="radio"]').length) {
            value = $field.filter(':checked').val();
        } else {
            value = $field.val();
        }

        if (!isMultiple && value instanceof Array) {
            value = value.pop();
        } else if (isMultiple && !value instanceof Array) {
            if (value && value != '') {
                value = [value];
            } else {
                value = [];
            }
        }

        return value;
    }
{% endblock %}

    function checkError(field, checkFunction, parameters, value) {
        field = jsfv.id(field);
        // Remove old errors of the field
        {% block removeErrors %}{% spaceless %}jsfv.removeErrors(field);{% endspaceless %}{% endblock %}
        // Check the value
        errorMessage = checkFunction((value === undefined ? getFieldValue(field) : value), parameters);
        {# Notice! Block getVal was refused since 2.1 version.
           Use twig extention function getJsFormElementValue('field') instead. -#}
        /*// {% block getVal %}{% endblock %} */

        if (errorMessage != true) {
{% block addError %}
            jsfv.addError(field, errorMessage);
            highlightTabsWithErrors();
            showErrorsOnGroups();
{% endblock %}

            return false;
        }
        highlightTabsWithErrors();
        showErrorsOnGroups();

        return true;
    }

{% for librairyCall in librairyCalls %}

{% include librairyCall %}

{% endfor %}

{% for handler in getterHandlers %}

{{ handler|raw }}

{% endfor %}

    return {
        id: function (id) {
            return document.getElementById(id) || document.getElementById(id+'_data');
        },
{% block removeErrors_method %}
        removeErrors: function (field) {
            $(field).removeClass('error').parent().filter('.controls').removeClass('validation-error');
            if ($(field).siblings('.icons-container').length) {
                $(field).siblings('.icons-container').find('.validation-tooltip').remove();
            } else {
                $(field).closest('.controls').find('.icons-container').find('.validation-tooltip').remove();
            }
        },
{% endblock %}
{% block addError_method %}
        addError: function (field, errorMessage) {
            // Add errors block
            var $field = $(field);
            var $iconContainer = $field.siblings('.icons-container').first();
            if (!$iconContainer.length) {
                $iconContainer = $field.closest('.controls').find('.icons-container').first();
            }
            if ($iconContainer.find('.validation-tooltip').length === 0)  {
                $('<i class="validation-tooltip" data-placement="right" data-toggle="tooltip"></i>').appendTo($iconContainer);
            }
            $iconContainer.find('.validation-tooltip').attr('data-original-title', errorMessage).tooltip();
            $field.addClass('error').closest('.controls').addClass('validation-error');
        },
{% endblock %}
        onEvent: function (field, eventType, handler) {
            if (typeof field === 'string') {
                field = jsfv.id(field);
            }
{% block onEvent %}
            $(field).bind(eventType, handler);
{% endblock %}
        },
        onFirstEvent: function (field, eventType, handler) {
            if (typeof field === 'string') {
                field = jsfv.id(field);
            }
{% block onFirstEvent %}
            $(field).bind(eventType, handler);
{% endblock %}
        },
{% for fieldName, constraints in fieldConstraints %}
        check_{{ fieldName }}: function() {
            var gv;
            result = true;
{% for constraint in constraints %}
            result = result && checkError('{{   fieldName }}', {{ constraint.name }}, {{ constraint.parameters|raw }} );
{% endfor %}
{% set resultvar = 'result' %}
{% block getters_constraints_field %}
{% if gettersConstraints[fieldName] is defined %}
{% for getterHandler, getterConstraints  in gettersConstraints[fieldName] %}
            if ({{ resultvar }}) {
                gv = {{ getterHandler|raw }}();
{% for constraint in getterConstraints %}
                {{ resultvar }} = checkError({% if fieldName == '.' %}form.id{% else %}'{{ fieldName }}'{% endif %}, {{ constraint.name }}, {{ constraint.parameters|raw }}, gv);
{% endfor %}
            }
{% endfor %}
{% endif %}
{% endblock %}
            return result;
        },
{% endfor %}
        onReady: function() {
{% if check_modes.submit %}
            // On submit checks
            var form = jsfv.id('{{ formName }}');

            // Form exists ?
            if (form) {
                // Get the form
                if ( form.nodeName.toLowerCase() != 'form') {
                    form = jsfv.id('{{ formName }}__token').form;
                }

                // Remove HTML5 validation
                $(form).attr('novalidate', 'novalidate');
                highlightTabsWithErrors();
                showErrorsOnGroups();

                jsfv.onFirstEvent(form, 'submit', function(e) {
                    var gv, submitForm = true;
{% for fieldName, constraints in fieldConstraints %}
                    submitForm = jsfv.check_{{ fieldName }}() && submitForm;
{% endfor %}
{% set resultvar = 'submitForm' %}{% set fieldName = '.' %}
{% block getters_constraints_submit %}{{ block('getters_constraints_field') }}{% endblock %}
                    if (!submitForm) {
                        e.stopImmediatePropagation();
                        showFirstTabWithErrors();
                        $(form).trigger('validate');
                    }
                    return submitForm;
                });
            }
{% endif %}

{% if check_modes.blur %}
            // On blur checks
{% for fieldName, constraints in fieldConstraints %}
            jsfv.onEvent('{{ fieldName }}', 'blur', jsfv.check_{{ fieldName }});
{% endfor %}
{% endif %}

{% if check_modes.change %}
            // On change checks
{% for fieldName, constraints in fieldConstraints %}
            jsfv.onEvent('{{ fieldName }}', 'change', jsfv.check_{{ fieldName }});
{% endfor %}
{% endif %}
        }
    };
}

{% block onReady %}
$(jsfv.onReady);
{% endblock %}

{% block after %}{% endblock %}
});
