#!groovy

import org.csanchez.jenkins.plugins.kubernetes.pipeline.PodTemplateAction

String[] features = ["features", "vendor/akeneo/pim-community-dev/features"]
String[] storages = ["orm", "odm"]
String ceBranch = "1.7.x-dev"
String ceOwner = "akeneo"
String launchUnitTests = "yes"
String launchIntegrationTests = "yes"
String launchBehatTests = "yes"
String verboseOutputs = "yes"
String dotsPerLine = "50"

stage("Build") {

    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                string(defaultValue: '1.7.x-dev', description: 'Community Edition branch used for the build', name: 'ce_branch'),
                string(defaultValue: 'akeneo', description: 'Owner of the repository on GitHub', name: 'ce_owner'),
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run behat tests', name: 'launchBehatTests'),
                string(defaultValue: 'odm,orm', description: 'Storage used for the behat tests (comma separated values)', name: 'storages'),
                string(defaultValue: 'features,vendor/akeneo/pim-community-dev/features', description: 'Behat scenarios to build', name: 'features'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: '50', description: 'Number of dots per line', name: 'dotsperline')
            ])

            storages = userInput['storages'].tokenize(',')
            ceBranch = userInput['ce_branch']
            ceOwner = userInput['ce_owner']
            features = userInput['features'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            launchIntegrationTests = userInput['launchIntegrationTests']
            launchBehatTests = userInput['launchBehatTests']
            verboseOutputs = userInput['verboseOutputs']
            dotsPerLine = userInput['dotsperline']
        }
    }
    milestone 2

    parallel(
        "orm": {
            withBuildNode({
                checkout scm
                container("php") {
                    sh "composer config repositories.pim-community-dev vcs \"https://github.com/${ceOwner}/pim-community-dev.git\""
                    sh "composer require --no-update \"akeneo/pim-community-dev\":\"${ceBranch}\""
                    sh "php -d memory_limit=-1 /usr/local/bin/composer update --optimize-autoloader --no-interaction --no-progress --prefer-dist --ansi"
                    sh "app/console oro:requirejs:generate-config"
                    sh "app/console assets:install"
                }
                container("node") {
                    sh "npm install --color=always"
                }
                container("docker") {
                    sh "cp .ci/behat.ci.yml behat.yml"
                    sh "cp .ci/parameters.ci.yml app/config/parameters_test.yml"
                    sh "mkdir -m 777 -p app/build/logs/behat app/build/logs/consumer "

                    sh "docker build -t eu.gcr.io/akeneo-ci/pim-enterprise-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-orm ."
                    sh "gcloud docker -- push eu.gcr.io/akeneo-ci/pim-enterprise-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-orm"
                }
            })
        },
        "odm": {
            if (storages.contains("odm")) {
                withBuildNode({
                    checkout scm
                    container("php") {
                        sh "composer config repositories.pim-community-dev vcs \"https://github.com/${ceOwner}/pim-community-dev.git\""
                        sh "composer require --no-update \"akeneo/pim-community-dev\":\"${ceBranch}\""
                        sh "php -d memory_limit=-1 /usr/local/bin/composer update --optimize-autoloader --no-interaction --no-progress --prefer-dist --ansi"
                        sh "app/console oro:requirejs:generate-config"
                        sh "app/console assets:install"
                    }
                    container("node") {
                        sh "npm install --color=always"
                    }
                    container("docker") {
                        sh "cp .ci/behat.ci.yml behat.yml"
                        sh "cp .ci/parameters.ci.yml app/config/parameters_test.yml"
                        sh "mkdir -m 777 -p app/build/logs/behat app/build/logs/consumer "

                        sh "sed -i \"s@// new Doctrine@new Doctrine@g\" app/AppKernel.php"
                        sh "sed -i \"s@# mongodb_database: .*@mongodb_database: akeneo_pim@g\" app/config/pim_parameters.yml"
                        sh "sed -i \"s@# mongodb_server: .*@mongodb_server: 'mongodb://127.0.0.1:27017'@g\" app/config/pim_parameters.yml"
                        sh "printf \"    pim_catalog_product_storage_driver: doctrine/mongodb-odm\n\" >> app/config/parameters_test.yml"

                        sh "docker build -t eu.gcr.io/akeneo-ci/pim-enterprise-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-odm ."
                        sh "gcloud docker -- push eu.gcr.io/akeneo-ci/pim-enterprise-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-odm"
                    }
                })
            } else {
                echo "Skipping ODM matrix"
            }
         }
    )
}

stage("Test") {
    try {
        parallel(
            "phpspec": {
                if (launchUnitTests.equals("yes")) {
                    withPhp({
                        try {
                            sh "cd /home/jenkins/pim && chown -R docker /home/jenkins/pim && su docker -c './bin/phpspec run --format=junit' > ${env.WORKSPACE}/junit_output.xml"
                        } finally {
                            junit "junit_output.xml"
                        }
                    })
                } else {
                    echo "Skipping unit test phpspec"
                }
            },
            "php-cs-fixer": {
                if (launchUnitTests.equals("yes")) {
                    withPhp({
                        try {    
                            sh "cd /home/jenkins/pim && ./bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > ${env.WORKSPACE}/junit_output.xml"
                        } finally {
                            junit "junit_output.xml"
                        }
                    })
                } else {
                    echo "Skipping unit test php-cs-fixer"
                }
            },
            "grunt": {
                if (launchUnitTests.equals("yes")) {
                    withGrunt({
                        sh "cd /home/jenkins/pim && grunt"
                    })
                } else {
                    echo "Skipping unit test grunt"
                }
            },
            "phpunit-integration": {
                if (launchIntegrationTests.equals("yes")) {
                    queue({
                        def files = sh (returnStdout: true, script: 'find /home/jenkins/pim/src -name "*Integration.php" -exec sh -c "grep -Ho \'function test\' {} | uniq -c"  \\; | sed "s/:function test//"').tokenize('\n')
                        def messages = new net.sf.json.JSONArray()
                        for (file in files) {
                            def commands = [
                                [container: "php", script: "./app/console --env=test pim:install --force"],
                                [container: "php", script: "mkdir -p app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads"],
                                [container: "php", script: "chmod 777 /tmp"],
                                [container: "php", script: "mkdir -m 777 -p app/build/logs/behat web/media"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/", name: "junit_output.xml"],
                                    script: "php -d error_reporting='E_ALL' ./bin/phpunit -c app/phpunit.xml.dist " + file[1] + " --log-junit junit_output.xml"
                                ]
                            ]

                            def message = new net.sf.json.JSONObject()
                            message.put("name", file[1])
                            message.put("commands", commands)
                            messages.add(message)
                        }

                        return messages
                    }, 30, "orm", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping integration test"
                }
            },
            "behat-orm": {
                if (launchBehatTests.equals("yes") && storages.contains("orm")) {
                    queue({
                        def scenarios = []
                        for (feature in features) {
                            scenarios = (scenarios + sh (returnStdout: true, script: "cd /home/jenkins/pim && if [ -e $feature ]; then php ./bin/behat $feature --list-scenarios; fi").tokenize('\n'))
                        }
                        scenarios = scenarios.unique()
                        def messages = new net.sf.json.JSONArray()

                        for (scenario in scenarios) {
                            def commands = [
                                [container: "php", script: "cp .ci/akeneo-behat.conf /etc/apache2/sites-available/000-default.conf"],
                                [container: "php", script: "rm -rf /tmp/behat/screenshots/*"],
                                [container: "php", script: "sed -i '2 a umask(0000);' bin/behat"],
                                [container: "php", script: "mkdir -p app/cache/tmp/pim-import app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chown -R docker /home/jenkins/pim"],
                                [container: "php", script: "/usr/sbin/apache2ctl graceful"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_US'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_GB'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump fr_FR'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump de_DE'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump es_MX'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat pim:install --force'"],
                                [container: "php", script: "su docker -c 'touch app/logs/behat.log'"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "su docker -c 'php ./bin/behat --strict -vv " + scenario + "'"
                                ]
                            ]

                            def message = new net.sf.json.JSONObject()
                            message.put("name", scenario)
                            message.put("commands", commands)
                            messages.add(message)
                        }

                        return messages
                    }, 100, "orm", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping behat test"
                }
            },
            "behat-odm": {
                if (launchBehatTests.equals("yes") && storages.contains("odm")) {
                    queue({
                        def scenarios = []
                        for (feature in features) {
                            scenarios = (scenarios + sh (returnStdout: true, script: "cd /home/jenkins/pim && if [ -e $feature ]; then php ./bin/behat $feature --list-scenarios; fi").tokenize('\n'))
                        }
                        scenarios = scenarios.unique()
                        def messages = new net.sf.json.JSONArray()

                        for (scenario in scenarios) {
                            def commands = [
                                [container: "php", script: "cp .ci/akeneo-behat.conf /etc/apache2/sites-available/000-default.conf"],
                                [container: "php", script: "rm -rf /tmp/behat/screenshots/*"],
                                [container: "php", script: "sed -i '2 a umask(0000);' bin/behat"],
                                [container: "php", script: "mkdir -p app/cache/tmp/pim-import app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chown -R docker /home/jenkins/pim"],
                                [container: "php", script: "/usr/sbin/apache2ctl graceful"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_US'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump en_GB'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump fr_FR'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump de_DE'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat oro:translation:dump es_MX'"],
                                [container: "php", script: "su docker -c 'app/console --env=behat pim:install --force'"],
                                [container: "php", script: "su docker -c 'touch app/logs/behat.log'"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "su docker -c 'php ./bin/behat --strict -vv " + scenario + "'"
                                ]
                            ]

                            def message = new net.sf.json.JSONObject()
                            message.put("name", scenario)
                            message.put("commands", commands)
                            messages.add(message)
                        }

                        return messages
                    }, 100, "odm", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping behat test"
                }
            }
        )
    } finally {
        clearTemplateNames()
        podTemplate(label: "cleanup", containers: [
            containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud", ttyEnabled: true, command: 'cat')
        ]) {
            node("cleanup") {
                container("docker") {
                    sh "gcloud -q container images delete eu.gcr.io/akeneo-ci/pim-enterprise-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-orm"
                    if (storages.contains("eeodm")) {
                        sh "gcloud -q container images delete eu.gcr.io/akeneo-ci/pim-enterprise-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-odm"
                    }
                }
            }
        }
    }
}

def withBuildNode(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()
    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        podTemplate(label: "build-" + uuid, containers: [
            containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud", ttyEnabled: true, command: 'cat', envVars: [envVar(key: "DOCKER_API_VERSION", value: "1.23")], resourceRequestCpu: '100m', resourceRequestMemory: '200Mi'),
            containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "eu.gcr.io/akeneo-ci/httpd-php:5.6", envVars: [envVar(key: "COMPOSER_AUTH", value: "{\"github-oauth\":{\"github.com\": \"$token\"}}")], resourceRequestCpu: '750m', resourceRequestMemory: '2000Mi'),
            containerTemplate(name: "node", ttyEnabled: true, command: 'cat', image: "node:8", resourceRequestCpu: '750m', resourceRequestMemory: '2000Mi')
        ], volumes: [
            hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock")
        ]) {
            node("build-" + uuid) {
                dir('/home/jenkins/pim') {
                    body()
                }
            }
        }
    }
}

def withPhp(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()
    podTemplate(label: "php-" + uuid, containers: [
        containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "akeneo/apache-php:php-5.6", resourceRequestCpu: '500m', resourceRequestMemory: '1000Mi', alwaysPullImage: true, workingDir: '/home/jenkins')
    ], annotations: [
        podAnnotation(key: "pod.beta.kubernetes.io/init-containers", value: "[{\"name\": \"pim\", \"image\": \"eu.gcr.io/akeneo-ci/pim-enterprise-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-orm\", \"command\": [\"sh\", \"-c\", \"cp -Rp /pim /home/jenkins\"], \"volumeMounts\":[{\"name\":\"workspace-volume\",\"mountPath\":\"/home/jenkins\"}]}]")
    ]) {
        node("php-" + uuid) {
            container("php") {
                body()
            }
        }
    }
}

def withGrunt(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()
    podTemplate(label: "grunt-" + uuid, containers: [
        containerTemplate(name: "grunt", ttyEnabled: true, command: 'cat', image: "digitallyseamless/nodejs-bower-grunt", resourceRequestCpu: '750m', resourceRequestMemory: '2048Mi')
    ], annotations: [
        podAnnotation(key: "pod.beta.kubernetes.io/init-containers", value: "[{\"name\": \"pim\", \"image\": \"eu.gcr.io/akeneo-ci/pim-enterprise-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-orm\", \"command\": [\"sh\", \"-c\", \"cp -Rp /pim /home/jenkins\"], \"volumeMounts\":[{\"name\":\"workspace-volume\",\"mountPath\":\"/home/jenkins\"}]}]")
    ]) {
        node("grunt-" + uuid) {
            container("grunt") {
                body()
            }
        }
    }
}

def queue(body, scale, storage, verboseOutputs, dotsPerLine) {
    clearTemplateNames()
    def verbosity = (verboseOutputs == "yes") ? "-v" : ""
    def linesize = (dotsPerLine.isNumber())? dotsPerLine :"50"
    def uuid = UUID.randomUUID().toString()
    podTemplate(label: "pubsub-" + uuid, containers: [
        containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "akeneo/apache-php:php-5.6", resourceRequestCpu: '100m', alwaysPullImage: true, resourceRequestMemory: '200Mi'),
        containerTemplate(name: "gcloud", ttyEnabled: true, command: 'cat', image: "eu.gcr.io/akeneo-ci/gcloud:1.0.19", resourceRequestCpu: '100m', resourceRequestMemory: '200Mi', envVars: [envVar(key: "PUBSUB_PROJECT_ID", value: "akeneo-ci")])
    ], annotations: [
        podAnnotation(key: "pod.beta.kubernetes.io/init-containers", value: "[{\"name\": \"pim\", \"imagePullPolicy\": \"Always\", \"image\": \"eu.gcr.io/akeneo-ci/pim-enterprise-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-${storage}\", \"command\": [\"sh\", \"-c\", \"cp -Rp /pim /home/jenkins\"], \"volumeMounts\":[{\"name\":\"workspace-volume\",\"mountPath\":\"/home/jenkins\"}]}]")
    ], volumes: [
        hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock"),
        hostPathVolume(hostPath: "/usr/bin/docker", mountPath: "/usr/bin/docker")
    ]) {
        node("pubsub-" + uuid) {
            def messages = []

            container("php") {
                messages = body()
            }

            container("gcloud") {
                sh "gcloud.phar pubsub:topic:create ${NODE_NAME}"
                sh "gcloud.phar pubsub:topic:create ${NODE_NAME}-results"
                sh "gcloud.phar pubsub:subscription:create ${NODE_NAME} ${NODE_NAME}-subscription"
                sh "gcloud.phar pubsub:subscription:create ${NODE_NAME}-results ${NODE_NAME}-results-subscription"

                def size = messages.size()

                writeJSON file: 'output.json', json: messages
                sh "gcloud.phar pubsub:message:publish ${NODE_NAME} output.json"

                sh "sed -i 's#JOB_SCALE#${scale}#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#JOB_NAME#${NODE_NAME}#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#JOB_COMPLETIONS#${size}#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#SUBSCRIPTION_NAME#${NODE_NAME}-subscription#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#RESULT_TOPIC#${NODE_NAME}-results#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#PIM_IMAGE#eu.gcr.io/akeneo-ci/pim-enterprise-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-${storage}#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"

                try {
                    sh "kubectl apply -f /home/jenkins/pim/.ci/k8s/"
                    sh "gcloud.phar ${verbosity} job:wait --dotsperline ${linesize} ${NODE_NAME}-results-subscription ${size} ${env.WORKSPACE} --ansi"
                } finally {
                    sh "kubectl delete job ${NODE_NAME} --namespace=jenkins-prod"
                    sh "gcloud.phar pubsub:topic:delete ${NODE_NAME}"
                    sh "gcloud.phar pubsub:topic:delete ${NODE_NAME}-results"
                    sh "gcloud.phar pubsub:subscription:delete ${NODE_NAME}-subscription"
                    sh "gcloud.phar pubsub:subscription:delete ${NODE_NAME}-results-subscription"
                    sh "find junit/ -name \"*.xml\" | xargs sed -i \"s/ name=\\\"/ name=\\\"[${storage}] /\""

                    junit allowEmptyResults: true, testResults: 'junit/**/*.xml'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'artifacts/**/*.png'
                }
            }
        }
    }
}

@NonCPS
def clearTemplateNames() {
    // see https://issues.jenkins-ci.org/browse/JENKINS-42184
    def action = currentBuild.rawBuild.getAction(PodTemplateAction.class);
    if(action) { action.names.clear() }
}
