envVarsDeployDev: &envVarsDeployDev
dockerJenkinsCloudDeployer: &dockerJenkinsCloudDeployer

jobs:

    jenkins_ge2ee_migration:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "grth"
            CLUSTER_NEXT:
                type: boolean
                default: false
            INSTANCE_NAME:
                type: string
                default: ""
            SOURCE_PFID:
                type: string
                default: ""
            INSTANCE:
                type: string
                default: ""
            GE2EE_SCRIPT_RELEASE:
                type: string
                default: ""
        environment:
            <<: *envVarsDeployDev
        <<: *dockerJenkinsCloudDeployer
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys
            - when:
                condition:
                    equal: [ true, << parameters.CLUSTER_NEXT >> ]
                steps:
                    - modify_cluster
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Define values for migration
                  command: |
                        #Constant
                        OPERATIONS_TOOLS_DIR="/tmp/operation-tools"
                        OPERATIONS_TOOLS_BRANCH=master

                        # Manage Inputs from different workflow
                        # INSTANCE
                        if [[ "<<parameters.INSTANCE>>" == "" ]]
                            then
                                SOURCE_PFID=${TYPE}-${INSTANCE_NAME}
                                echo "INFO: SOURCE_PFID retrieved from previous job"
                            else
                                SOURCE_PFID=<<parameters.INSTANCE>>
                                echo "INFO: SOURCE_PFID retrieved from CircleCI parameter"
                        fi
                        # GE2EE_SCRIPT_RELEASE
                        if [[ "<<parameters.GE2EE_SCRIPT_RELEASE>>" == "" ]]; then
                            GE2EE_SCRIPT_RELEASE=$CIRCLE_SHA1
                            echo "INFO: Use GE2EE_SCRIPT_RELEASE from previous job"
                        else
                            GE2EE_SCRIPT_RELEASE=<<parameters.GE2EE_SCRIPT_RELEASE>>
                            echo "INFO: GE2EE_SCRIPT_RELEASE retrieved from CircleCI parameter"
                        fi

                        TYPE=<<parameters.PRODUCT_TYPE>>

                        echo export SOURCE_PFID=${SOURCE_PFID} >> $BASH_ENV
                        echo export TYPE=${TYPE} >> $BASH_ENV
                        echo export OPERATIONS_TOOLS_DIR=${OPERATIONS_TOOLS_DIR} >> $BASH_ENV
                        echo export OPERATIONS_TOOLS_BRANCH=${OPERATIONS_TOOLS_BRANCH} >> $BASH_ENV
                        echo export GE2EE_SCRIPT_RELEASE=${GE2EE_SCRIPT_RELEASE} >> $BASH_ENV

                        echo ' --- Display values for Jenkins ---'
                        echo "SOURCE_PFID=${SOURCE_PFID}"
                        echo "TYPE=${TYPE}"
                        echo "OPERATIONS_TOOLS_DIR=${OPERATIONS_TOOLS_DIR}"
                        echo "OPERATIONS_TOOLS_BRANCH=${OPERATIONS_TOOLS_BRANCH}"
                        echo "GE2EE_SCRIPT_RELEASE=${GE2EE_SCRIPT_RELEASE}"
            - run:
                  name: Prepare the environment
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - show_datadog_logs_links:
                pfid: ${TYPE}-${INSTANCE_NAME}
            - run:
                  name: Jenkins GE2EE Migration
                  command: |

                      git clone --depth 1 git@operation-tools:akeneo/operation-tools.git ${OPERATIONS_TOOLS_DIR}
                      cd ${OPERATIONS_TOOLS_DIR} && git checkout ${OPERATIONS_TOOLS_BRANCH}
                      cp ${OPERATIONS_TOOLS_DIR}/jenkins.yaml /usr/share/jenkins/ref/casc/jenkins.yaml
                      mkdir -p /workspace && cp ${HOME}/gcloud-service-key.json /workspace/pim_ci.json
                      JENKINS_LIBS_SSH_PRIVATE_FILE_PATH=~/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 \
                      PERRYBOT_SSH_PRIVATE_FILE_PATH=~/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 \
                      DEVTEST=true \
                      HELM_DEBUG=true \
                      DEVTEST_INSTANCE=${SOURCE_PFID} \
                      JENKINSFILE_PATH=${OPERATIONS_TOOLS_DIR}/ge2srnt-migration.Jenkinsfile \
                      /app/bin/jenkinsfile-runner-launcher -ns -u \
                      -a "batchMode=false" \
                      -a "skipShutdown=false" \
                      -a "autoApply=true" \
                      -a "release=${GE2EE_SCRIPT_RELEASE}" \
                      -a "productTypePrefixFilter=${TYPE}" \
                      -a "googleProjectIdFilter=akecld-saas-dev" \
                      -a "googleCloudZoneFilter=*" \
                      -a "forceUpdate=true"
            - get_datadog_migration_logs:
                pfid: ${TYPE}-${INSTANCE_NAME}
            - store_artifacts:
                path: /tmp/migration-logs.json
                destination: migration-logs.json
            - run:
                  name: Display Deployment Errors
                  command: cat deployment.log
                  when: on_fail
            - run:
                  name: Check if upgrader failed
                  command: kubectl logs -l "job-name=pim-upgrader" --namespace=${TYPE}-${INSTANCE_NAME}
                  when: on_fail
            - run:
                  name: Prepare infrastructure artifacts
                  command: make -C deployments/ prepare-infrastructure-artifacts
                  when: on_fail
            - store_artifacts:
                  path: ~/artifacts/infra
            - store_artifacts:
                  path: deployment.log
                  destination: test_upgrade_from_last_release_deployment.log
