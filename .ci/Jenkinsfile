#!groovy

import org.csanchez.jenkins.plugins.kubernetes.pipeline.PodTemplateAction

String[] editions = ["ce"]
String[] features = ["features"]
String launchUnitTests = "yes"
String launchIntegrationTests = "yes"
String launchBehatTests = "yes"
String verboseOutputs = "yes"
String dotsPerLine = "50"

stage("Build") {
    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run behat tests', name: 'launchBehatTests'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: '50', description: 'Number of dots per line', name: 'dotsperline'),
                string(defaultValue: 'ee,ce', description: 'PIM edition the behat tests should run on (comma separated values)', name: 'editions'),
                string(defaultValue: 'features,vendor/akeneo/pim-community-dev/features', description: 'Behat scenarios to build', name: 'features'),
            ])

            editions = userInput['editions'].tokenize(',')
            features = userInput['features'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            launchIntegrationTests = userInput['launchIntegrationTests']
            launchBehatTests = userInput['launchBehatTests']
            verboseOutputs = userInput['verboseOutputs']
            dotsPerLine = userInput['dotsperline']
        }
    }
    milestone 2

    parallel(
        "pim-ce": {withBuildNode({
            container("php") {
                sh "chmod 777 -R /home/jenkins/"
                checkout scm
                sh "composer update --ansi --optimize-autoloader --no-interaction --no-progress --prefer-dist --ignore-platform-reqs --no-suggest"
                sh "bin/console --ansi assets:install"
                sh "bin/console --ansi pim:installer:dump-require-paths"
            }
            container("node") {
                sh "yarn install --no-progress"
                sh "yarn run webpack"
            }
            container("docker") {
                sh "cp .ci/behat.community.yml behat.yml"
                for (feature in features) {
                    sh "sed -i \"/paths/a\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ -\\ ${feature}\" behat.yml"
                }

                sh "cp app/config/parameters_test.yml.dist app/config/parameters_test.yml"
                sh "sed -i \"s#database_host: .*#database_host: 127.0.0.1#g\" app/config/parameters_test.yml"
                sh "sed -i \"s#index_hosts: .*#index_hosts: 'elastic:changeme@127.0.0.1:9200'#g\" app/config/parameters_test.yml"
                sh "sed \"\$a    installer_data: 'PimInstallerBundle:minimal'\n\" app/config/parameters_test.yml"
                sh "sed -i \"s#SNAPSHOT_NAME#pim-community-dev-${env.CHANGE_ID}-${env.BUILD_NUMBER}-ce#g\" .ci/k8s/volume-snapshot.yaml"
                sh "kubectl apply -f .ci/k8s/volume-snapshot.yaml"
            }
        }, "pim-community-dev-${env.CHANGE_ID}-${env.BUILD_NUMBER}-ce")},
        "pim-ee": {
            if (editions.contains("ee")) {
                withBuildNode({
                    container("php") {
                        sh "chmod 777 -R /home/jenkins/"
                        checkout([$class: 'GitSCM',
                            branches: [[name: 'master']],
                            userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-enterprise-dev.git']]
                        ])
                        // Required to avoid permission error when "composer update"
                        sh "mkdir -m 777 vendor"
    
                        sh "composer require --dev --no-update phpspec/phpspec:~3.4.2"
                        sh "composer require --dev --no-update phpunit/phpunit:~5.7.22"
                        sh "composer require --dev --no-update sebastian/exporter:~2.0.0"
                        sh "composer require --dev --no-update liuggio/fastest:~1.4.4"
                        sh "composer update --ansi --optimize-autoloader --no-interaction --no-progress --prefer-dist --no-scripts --ignore-platform-reqs --no-suggest"

                        // Required to avoid permission error when "deleteDir()"
                        sh "chmod 777 -R vendor/akeneo"

                        dir('vendor/akeneo/pim-community-dev') {
                            deleteDir()
                            checkout scm
                        }

                        sh "php -d memory_limit=-1 /usr/bin/composer --ansi -n run-script post-update-cmd"
                        sh "bin/console --ansi assets:install"
                        sh "bin/console --ansi pim:installer:dump-require-paths"
                    }
                    container("node") {
                        sh "yarn install --no-progress"
                        sh "yarn run webpack"
                    }
                    container("docker") {
                        sh "cp vendor/akeneo/pim-community-dev/.ci/behat.enterprise.yml behat.yml"
                        sh "cp app/config/parameters_test.yml.dist app/config/parameters_test.yml"
                        sh "sed -i \"s#database_host: .*#database_host: 127.0.0.1#g\" app/config/parameters_test.yml"
                        sh "sed -i \"s#index_hosts: .*#index_hosts: 'elastic:changeme@127.0.0.1:9200'#g\" app/config/parameters_test.yml"
                        sh "sed \"\$a    installer_data: 'PimEnterpriseInstallerBundle:minimal'\n\" app/config/parameters_test.yml"

                        // Compatibility layer while the EE is not up to date with the new CI
                        sh "cp vendor/akeneo/pim-community-dev/Dockerfile ."
                        sh "cp -R vendor/akeneo/pim-community-dev/.ci ."
                        for (feature in features) {
                            sh "sed -i \"/paths/a\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ -\\ ${feature}\" behat.yml"
                        }
                        sh "sed -i \"s#SNAPSHOT_NAME#pim-community-dev-${env.CHANGE_ID}-${env.BUILD_NUMBER}-ee#g\" .ci/k8s/volume-snapshot.yaml"
                        sh "kubectl apply -f .ci/k8s/volume-snapshot.yaml"
                    }
                }, "pim-community-dev-${env.CHANGE_ID}-${env.BUILD_NUMBER}-ee")
            } else {
                echo "Skipping Enterprise Edition matrix"
            }
        }
    )
}

stage("Test") {
    try {
        parallel(
            "phpunit": {
                if (launchUnitTests.equals("yes")) {
                    withPhp({
                        try {
                            sh "vendor/bin/phpunit -c app/phpunit.xml.dist --testsuite PIM_Unit_Test --log-junit ${env.WORKSPACE}/junit_output.xml"
                        } finally {
                            junit "junit_output.xml"
                        }
                    })
                } else {
                    echo "Skipping unit test phpunit"
                }
            },
            "phpspec": {
                if (launchUnitTests.equals("yes")) {
                    withPhp({
                        sh "chown -R phpuser /home/jenkins/pim"
                        try {
                            sh "su phpuser -c './vendor/bin/phpspec run --format=junit' > ${env.WORKSPACE}/junit_output.xml"
                        } finally {
                            junit "junit_output.xml"
                        }
                    })
                } else {
                    echo "Skipping unit test phpspec"
                }
            },
            "php-cs-fixer": {
                if (launchUnitTests.equals("yes")) {
                    withPhp({
                        try {
                            sh "vendor/bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > ${env.WORKSPACE}/junit_output.xml"
                        } finally {
                            junit "junit_output.xml"
                        }
                    })
                } else {
                    echo "Skipping unit test php-cs-fixer"
                }
            },
            "grunt": {
                if (launchUnitTests.equals("yes")) {
                    withNode({
                        sh "yarn run lint"
                    })
                } else {
                    echo "Skipping unit test grunt"
                }
            },
            "php-coupling-detector": {
                if (launchUnitTests.equals("yes")) {
                    withPhp({
                        sh "vendor/bin/php-coupling-detector detect --config-file=.php_cd.php src"
                    })
                } else {
                    echo "Skipping unit test php-coupling-detector"
                }
            },
            "phpunit-integration-ce": {
                if (launchIntegrationTests.equals("yes") && editions.contains("ce")) {
                    queue({
                        def files = sh (returnStdout: true, script: 'find /home/jenkins/src /home/jenkins/tests -name "*Integration.php" -exec sh -c "grep -Ho \'function test\' {} | uniq -c"  \\; | sed "s/:function test//"').tokenize('\n')
                        def messages = new net.sf.json.JSONArray()

                        for (line in files) {
                            def file = line.tokenize(' ')
                            def commands = [
                                [container: "php", script: "bin/console --env=test pim:install --force"],
                                [container: "php", script: "chmod 777 -R var/cache var/logs app/archive /tmp/pim app/file_storage app/uploads"],
                                [container: "php", script: "chmod 777 /tmp"],
                                [container: "php", script: "mkdir -m 777 -p app/build/logs/behat web/media"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/", name: "junit_output.xml"],
                                    script: "php -d error_reporting='E_ALL' vendor/bin/phpunit -c app/phpunit.xml.dist " + file[1] + " --log-junit junit_output.xml"
                                ]
                            ]
                            def message = new net.sf.json.JSONObject()
                            message.put("name",file[1])
                            message.put("commands",commands)
                            messages.add(message)
                        }

                        return messages
                    }, 30, "ce", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping integration test"
                }
            },
            "behat-ce": {
                if (launchBehatTests.equals("yes") && editions.contains("ce")) {
                    queue({
                        def scenarios = sh (returnStdout: true, script: "cd /home/jenkins/pim && php vendor/bin/behat --list-scenarios").tokenize('\n')
                        def messages = new net.sf.json.JSONArray()

                        for (scenario in scenarios) {
                            def commands = [
                                [container: "php", script: "bin/console --env=behat --quiet pim:install --force"],
                                [container: "php", script: "touch var/logs/behat.log"],
                                [container: "php", script: "chmod 777 -R var/cache var/logs app/archive /tmp/pim app/file_storage app/uploads"],
                                [container: "php", script: "mkdir -m 777 -p app/build/logs/behat web/media"],
                                [container: "php", script: "sed -i '2 a umask(0000);' vendor/behat/behat/bin/behat"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "php vendor/bin/behat --strict -vv " + scenario
                                ]
                            ]
                            def message = new net.sf.json.JSONObject()
                            message.put("name",scenario)
                            message.put("commands",commands)
                            messages.add(message)
                        }

                        return messages
                    }, 100, "ce", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping behat test"
                }
            },
            "phpunit-integration-ee": {
                if (launchIntegrationTests.equals("yes") && editions.contains("ee")) {
                    queue({
                        def files = sh (returnStdout: true, script: 'find /home/jenkins/src /home/jenkins/tests -name "*Integration.php" -exec sh -c "grep -Ho \'function test\' {} | uniq -c"  \\; | sed "s/:function test//"').tokenize('\n')
                        def messages = new net.sf.json.JSONArray()

                        for (line in files) {
                            def file = line.tokenize(' ')
                            def commands = [
                                [container: "php", script: "bin/console --env=test pim:install --force"],
                                [container: "php", script: "chmod 777 -R var/cache var/logs app/archive /tmp/pim app/file_storage app/uploads"],
                                [container: "php", script: "mkdir -m 777 -p app/build/logs/behat web/media"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/", name: "junit_output.xml"],
                                    script: "php -d error_reporting='E_ALL' vendor/bin/phpunit -c app/phpunit.xml.dist --exclude-group ce" + file[1] + " --log-junit junit_output.xml"
                                ]
                            ]
                            def message = new net.sf.json.JSONObject()
                            message.put("name",file[1])
                            message.put("commands",commands)
                            messages.add(message)
                        }

                        return messages
                    }, 10, "ee", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping integration test"
                }
            },
            "behat-ee": {
                if (launchBehatTests.equals("yes") && editions.contains("ee")) {
                    queue({
                        def scenarios = sh (returnStdout: true, script: "cd /home/jenkins/pim && php vendor/bin/behat --list-scenarios").tokenize('\n')
                        def messages = new net.sf.json.JSONArray()
                        for (scenario in scenarios) {
                            def commands = [
                                [container: "php", script: "bin/console --env=behat --quiet pim:install --force"],
                                [container: "php", script: "touch var/logs/behat.log"],
                                [container: "php", script: "chmod 777 -R var/cache var/logs app/archive /tmp/pim app/file_storage app/uploads"],
                                [container: "php", script: "mkdir -m 777 -p app/build/logs/behat web/media"],
                                [container: "php", script: "sed -i '2 a umask(0000);' vendor/behat/behat/bin/behat"],
                                [container: "php", script: "ln -s ../bin/console app/console"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "php vendor/bin/behat --strict -vv " + scenario
                                ]
                            ]
                            def message = new net.sf.json.JSONObject()
                            message.put("name",scenario)
                            message.put("commands",commands)
                            messages.add(message)
                        }

                        return messages
                    }, 150, "ee", verboseOutputs, dotsPerLine)
                } else {
                    echo "Skipping behat test"
                }
            }
        )
    } finally {
        clearTemplateNames()
        podTemplate(label: "cleanup", containers: [
            containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud", ttyEnabled: true, command: 'cat')
        ]) {
            node("cleanup") {
                container("docker") {
                    sh "kubectl delete pvc pim-community-dev-${env.CHANGE_ID}-${env.BUILD_NUMBER}-ce || true"
                    sh "kubectl delete pvc pim-community-dev-${env.CHANGE_ID}-${env.BUILD_NUMBER}-ee || true"
                }
            }
        }
    }
}

def withBuildNode(body, claim) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()

    podTemplate(label: "prebuild-" + uuid, containers: [
        containerTemplate(name: "gcloud", image: "paulwoelfel/docker-gcloud", ttyEnabled: true, command: 'cat', envVars: [envVar(key: "DOCKER_API_VERSION", value: "1.23")], resourceRequestCpu: '100m', resourceRequestMemory: '200Mi')
    ]) {
        node("prebuild-" + uuid) {
            container("gcloud") {
                writeYaml file: 'pvc.yaml', data: [
                    'apiVersion': 'v1',
                    'kind': 'PersistentVolumeClaim',
                    'metadata': ['name': claim],
                    'spec': [
                        'accessModes': ['ReadWriteOnce'],
                        'storageClassName': 'standard',
                        'resources': [
                            'requests': ['storage': '5Gi']
                        ]
                    ]
                ]

                sh "kubectl apply -f pvc.yaml"
            }
        }
    }

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        podTemplate(label: "build-" + uuid, containers: [
            containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud", ttyEnabled: true, command: 'cat', envVars: [envVar(key: "DOCKER_API_VERSION", value: "1.23")], resourceRequestCpu: '100m', resourceRequestMemory: '200Mi'),
            containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "eu.gcr.io/akeneo-ci/php:7.1-fpm", envVars: [envVar(key: "COMPOSER_AUTH", value: "{\"github-oauth\":{\"github.com\": \"$token\"}}")], resourceRequestCpu: '750m', resourceRequestMemory: '2000Mi'),
            containerTemplate(name: "node", ttyEnabled: true, command: 'cat', image: "node:8", resourceRequestCpu: '750m', resourceRequestMemory: '2000Mi')
        ], volumes: [
            persistentVolumeClaim(mountPath: '/home/jenkins/pim', claimName: claim)
        ]) {
            node("build-" + uuid) {
                dir('/home/jenkins/pim') {
                    body()
                }
            }
        }
    }
}

def withPhp(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()
    podTemplate(label: "php-" + uuid, containers: [
        containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "eu.gcr.io/akeneo-ci/php:7.1-fpm", resourceRequestCpu: '500m', resourceRequestMemory: '1000Mi')
    ], volumes: [
        persistentVolumeClaim(mountPath: '/home/jenkins/pim', claimName: "pim-community-dev-${env.CHANGE_ID}-${env.BUILD_NUMBER}-ce")
    ]) {
        node("php-" + uuid) {
            container("php") {
                dir('/home/jenkins/pim') {
                    body()
                }
            }
        }
    }
}

def withNode(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()
    podTemplate(label: "node-" + uuid, containers: [
        containerTemplate(name: "node", ttyEnabled: true, alwaysPullImage: true, command: 'cat', image: "node:8", resourceRequestCpu: '500m', resourceRequestMemory: '1000Mi')
    ], volumes: [
        persistentVolumeClaim(mountPath: '/home/jenkins', claimName: "pim-community-dev-${env.CHANGE_ID}-${env.BUILD_NUMBER}-ee")
    ]) {
        node("node-" + uuid) {
            container("node") {
                body()
            }
        }
    }
}

def queue(body, scale, edition, verboseOutputs, dotsPerLine) {
    def verbosity = (verboseOutputs == "yes") ? "-v" : ""
    def linesize = (dotsPerLine.isNumber())? dotsPerLine :"50"
    def uuid = UUID.randomUUID().toString()
    clearTemplateNames()
    podTemplate(label: "pubsub-" + uuid, containers: [
        containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "eu.gcr.io/akeneo-ci/php:7.1-fpm", resourceRequestCpu: '100m', resourceRequestMemory: '200Mi'),
        containerTemplate(name: "gcloud", ttyEnabled: true, command: 'cat', image: "eu.gcr.io/akeneo-ci/gcloud:1.0", alwaysPullImage: true, resourceRequestCpu: '100m', resourceRequestMemory: '200Mi', envVars: [envVar(key: "PUBSUB_PROJECT_ID", value: "akeneo-ci")])
    ], volumes: [
        hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock"),
        hostPathVolume(hostPath: "/usr/bin/docker", mountPath: "/usr/bin/docker"),
        persistentVolumeClaim(mountPath: '/home/jenkins', claimName: "pim-community-dev-${env.CHANGE_ID}-${env.BUILD_NUMBER}-${edition}")
    ]) {
        node("pubsub-" + uuid) {
            def messages = []

            container("php") {
                messages = body()
            }

            container("gcloud") {
                sh "gcloud.phar pubsub:topic:create ${NODE_NAME}"
                sh "gcloud.phar pubsub:topic:create ${NODE_NAME}-results"
                sh "gcloud.phar pubsub:subscription:create ${NODE_NAME} ${NODE_NAME}-subscription"
                sh "gcloud.phar pubsub:subscription:create ${NODE_NAME}-results ${NODE_NAME}-results-subscription"

                def size = messages.size()

                writeJSON file: 'output.json', json: messages
                sh "gcloud.phar pubsub:message:publish ${NODE_NAME} output.json"

                sh "sed -i 's#JOB_SCALE#${scale}#g' /home/jenkins/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#JOB_NAME#${NODE_NAME}#g' /home/jenkins/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#JOB_COMPLETIONS#${size}#g' /home/jenkins/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#SUBSCRIPTION_NAME#${NODE_NAME}-subscription#g' /home/jenkins/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#RESULT_TOPIC#${NODE_NAME}-results#g' /home/jenkins/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#PIM_IMAGE#eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-${edition}#g' /home/jenkins/.ci/k8s/pubsub_consumer_job.yaml"

                try {
                    sh "kubectl apply -f /home/jenkins/.ci/k8s/consumer.yaml"
                    sh "gcloud.phar ${verbosity} job:wait --dotsperline ${linesize} ${NODE_NAME}-results-subscription ${size} ${env.WORKSPACE} --ansi"
                } finally {
                    sh "kubectl delete job ${NODE_NAME}"
                    sh "gcloud.phar pubsub:topic:delete ${NODE_NAME}"
                    sh "gcloud.phar pubsub:topic:delete ${NODE_NAME}-results"
                    sh "gcloud.phar pubsub:subscription:delete ${NODE_NAME}-subscription"
                    sh "gcloud.phar pubsub:subscription:delete ${NODE_NAME}-results-subscription"

                    junit allowEmptyResults: true, testResults: 'junit/**/*.xml'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'artifacts/**/*.png'
                }
            }
        }
    }
}

@NonCPS
def clearTemplateNames() {
    // see https://issues.jenkins-ci.org/browse/JENKINS-42184
    currentBuild.rawBuild.getAction( PodTemplateAction.class )?.stack?.clear()
}
