services:
    _defaults:
        public: true

    # Contexts
    Akeneo\Test\Pim\Automation\RuleEngine\Acceptance\Context\DataFixturesContext:
        arguments:
            - '@pim_catalog.repository.product_without_permission'
            - '@pim_catalog.builder.product'
            - '@pim_catalog.updater.product'
            - '@pim_catalog.repository.family'
            - '@pim_catalog.factory.family'
            - '@pim_catalog.repository.attribute'
            - '@test.family.builder'
            - '@test.attribute.builder'
            - '@pim_catalog.repository.attribute_group'
            - '@test.attribute_group.builder'
            - '@test.category.builder'
            - '@pim_catalog.repository.category'
            - '@pim_catalog.repository.attribute_option'
            - '@test.attribute_option.builder'
            - '@akeneo.pim.enrichment.factory.write_value_collection'
            - '@akeneo_referenceentity.infrastructure.persistence.repository.reference_entity'
            - '@akeneo_referenceentity.infrastructure.persistence.repository.record'
            - '@akeneo_referenceentity.infrastructure.persistence.query.find_record_details'
            - '@pim_catalog.repository.group'
            - '@pim_catalog.repository.association_type'
            - '@akeneo_measure.persistence.measurement_family_repository'

    Akeneo\Test\Pim\Automation\RuleEngine\Acceptance\Context\UserContext:
        arguments:
            - '@pim_user.repository.user'
            - '@security.token_storage'

    Akeneo\Test\Pim\Automation\RuleEngine\Acceptance\Context\ImportRuleContext:
        arguments:
            - '@pimee_catalog_rule.processor.denormalization.rule_definition'
            - '@akeneo_rule_engine.repository.rule_definition'
            - '@akeneo_rule_engine.normalizer.rule_definition'

    Akeneo\Test\Pim\Automation\RuleEngine\Acceptance\Context\ExportRuleContext:
        arguments:
            - '@pimee_catalog_rule.processor.denormalization.rule_definition'
            - '@akeneo_rule_engine.repository.rule_definition'
            - '@pimee_catalog_rule.processor.normalization.rule_definition'

    Akeneo\Test\Pim\Automation\RuleEngine\Acceptance\Context\ExecuteRuleContext:
        arguments:
            - '@pim_catalog.repository.product_without_permission'
            - '@pimee_catalog_rule.executor.rules'
            - '@pimee_catalog_rule.processor.denormalization.rule_definition'
            - '@pimee_catalog_rule.applier.product.updater'
            - '@pimee_catalog_rule.applier.product.validator'
            - '@akeneo_rule_engine.repository.rule_definition'
            - '@pimee_catalog_rule.builder.product'

    Akeneo\Test\Pim\Automation\RuleEngine\Acceptance\Context\EventSubscriberContext:
        tags:
            - { name: kernel.event_subscriber }

    akeneo.pim.enrichment.category.get_viewable_category_codes:
        class: Akeneo\Test\Pim\Automation\RuleEngine\Acceptance\InMemory\InMemoryGetCategoryCodes
        arguments:
            - '@pim_catalog.repository.category'

    pim_catalog.query.find_activated_currencies:
        class: Akeneo\Test\Pim\Automation\RuleEngine\Acceptance\InMemory\InMemoryFindActivatedCurrencies
        arguments:
            - '@pim_catalog.repository.channel'

    akeneo.pim.structure.query.get_existing_attribute_option_codes_from_option_codes:
        class: 'AkeneoEnterprise\Test\Acceptance\Rule\RuleDefinition\InMemoryGetExistingAttributeOptionCodes'
        arguments:
            - '@pim_catalog.repository.attribute_option'

    pimee.reference_entity.enrichment.find_all_existent_records_for_record_identifiers:
        class: 'AkeneoEnterprise\Test\Acceptance\Enrichment\InMemory\InMemoryFindAllExistentRecordsForReferenceEntityIdentifiers'
        arguments:
            - '@akeneo_referenceentity.infrastructure.persistence.repository.record'

    # In EE GrantedCategoryFieldSetter is used in place of CategoryFieldSetter.
    # As the entity manager is used in it (need MySQL server), the acceptance tests don't work.
    # We fix that by using CategoryFieldSetter and skip permission checks.
    pim_catalog.updater.category_field_without_permission:
        alias: pim_catalog.updater.setter.category_field

    pimee_catalog.security.updater.setter.granted_category_field:
        alias: pim_catalog.updater.setter.category_field

    pimee_catalog_rule.query.locale_is_active:
        class: Akeneo\Pim\Automation\RuleEngine\tests\back\Acceptance\InMemory\InMemoryLocaleIsActive
        arguments:
            - '@pim_catalog.repository.locale'

    pimee_catalog_rule.query.cache.channel_exists_and_bound_to_context:
        class: Akeneo\Pim\Automation\RuleEngine\tests\back\Acceptance\InMemory\InMemoryChannelExistsAndBoundToLocale
        arguments:
            - '@pim_catalog.repository.channel'
