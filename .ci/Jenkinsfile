#!groovy

import org.csanchez.jenkins.plugins.kubernetes.pipeline.PodTemplateAction

String[] editions = ["ce"]
String[] features = ["features"]
String launchUnitTests = "yes"
String launchIntegrationTests = "yes"
String launchBehatTests = "yes"

stage("Build") {

    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run behat tests', name: 'launchBehatTests'),
                string(defaultValue: 'ee,ce,ceodm,eeodm', description: 'PIM edition the behat tests should run on (comma separated values)', name: 'editions'),
                string(defaultValue: 'features,vendor/akeneo/pim-community-dev/features', description: 'Behat scenarios to build', name: 'features'),
            ])

            editions = userInput['editions'].tokenize(',')
            features = userInput['features'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            launchIntegrationTests = userInput['launchIntegrationTests']
            launchBehatTests = userInput['launchBehatTests']
        }
    }
    milestone 2

    parallel(
        "pim-ce": {
            if (editions.contains("ce")) {
                withBuildNode({
                    checkout scm
                    container("php") {
                        sh "composer require --dev --no-update phpspec/phpspec:~3.4.2"
                        sh "composer require --dev --no-update phpunit/phpunit:~5.7.22"
                        sh "composer require --dev --no-update sebastian/exporter:~2.0.0"
                        sh "composer require --dev --no-update liuggio/fastest:~1.4.4"
                        sh "composer update --optimize-autoloader --no-interaction --no-progress --prefer-dist"
                        sh "app/console oro:requirejs:generate-config"
                        sh "app/console assets:install"
                    }
                    container("node") {
                        sh "npm config set cache /shared/.npm --global"
                        sh "npm install --color=always"
                    }
                    container("docker") {
                        sh "cp behat.ci.yml behat.yml"
                        sh "cat behat.yml"

                        sh "cp app/config/parameters_test.yml.dist app/config/parameters_test.yml"
                        sh "sed -i \"s#database_host: .*#database_host: 127.0.0.1#g\" app/config/parameters_test.yml"
                        sh "sed -i \"s#index_hosts: .*#index_hosts: 'elastic:changeme@127.0.0.1:9200'#g\" app/config/parameters_test.yml"
                        sh "sed \"\$a    installer_data: 'PimInstallerBundle:minimal'\n\" app/config/parameters_test.yml"

                        sh "docker build -t eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ce ."
                        sh "gcloud docker -- push eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ce"
                    }
                })
            } else {
                echo "Skipping Community Edition matrix"
            }
        },
        "pim-ee": {
            if (editions.contains("ee")) {
                withBuildNode({
                    checkout([$class: 'GitSCM',
                      branches: [[name: '1.7']],
                      userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-enterprise-dev.git']]
                    ])
                    // Required to avoid permission error when "composer update"
                    sh "mkdir -m 777 vendor"

                    container("php") {
                        sh "composer require --dev --no-update phpspec/phpspec:~3.4.2"
                        sh "composer require --dev --no-update phpunit/phpunit:~5.7.22"
                        sh "composer require --dev --no-update sebastian/exporter:~2.0.0"
                        sh "composer require --dev --no-update liuggio/fastest:~1.4.4"
                        sh "php -d memory_limit=-1 /usr/local/bin/composer update --optimize-autoloader --no-interaction --no-progress --prefer-dist --ansi"

                        // Required to avoid permission error when "deleteDir()"
                        sh "chmod 777 -R vendor/akeneo"

                        dir('vendor/akeneo/pim-community-dev') {
                            deleteDir()
                            checkout scm
                        }

                        sh "app/console oro:requirejs:generate-config"
                        sh "app/console assets:install"
                    }
                    container("node") {
                        sh "npm config set cache /shared/.npm --global"
                        sh "npm install --color=always"
                    }
                    container("docker") {
                        // Compatibility layer while the EE is not up to date with the new CI
                        sh "cp vendor/akeneo/pim-community-dev/Dockerfile ."
                        sh "cp -R vendor/akeneo/pim-community-dev/.ci ."
                        sh "cp behat.ci.yml behat.yml"
			            sh "sed -i \"/extensions:/a\\ \\ \\ \\ \\ \\ \\ \\ Liuggio\\\\\\\\Fastest\\\\\\\\Behat2\\\\\\\\ListFeaturesExtension\\\\\\\\Extension: ~\" behat.yml"
                        sh "sed -i \"s#http://akeneo#http://127.0.0.1#g\" behat.yml"
                        sh "sed -i \"s#http://selenium#http://127.0.0.1#g\" behat.yml"
                        sh "sed -i \"s#http://selenium#http://127.0.0.1#g\" behat.yml"
                        sh "cat behat.yml"
                        sh "cp app/config/parameters_test.yml.dist app/config/parameters_test.yml"
                        sh "sed -i \"s#database_host: .*#database_host: 127.0.0.1#g\" app/config/parameters_test.yml"
                        sh "sed -i \"s#index_hosts: .*#index_hosts: 'elastic:changeme@127.0.0.1:9200'#g\" app/config/parameters_test.yml"
                        sh "sed \"\$a    installer_data: 'PimEnterpriseInstallerBundle:minimal'\n\" app/config/parameters_test.yml"
                        sh "docker build -t eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ee ."
                        sh "gcloud docker -- push eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ee"
                    }
                })
            } else {
                echo "Skipping Enterprise Edition matrix"
            }
        },


        "pim-ce-odm": {
            if (editions.contains("ceodm")) {
                withBuildNode({
                    checkout scm
                    container("php") {
                        sh "composer require --dev --no-update phpspec/phpspec:~3.4.2"
                        sh "composer require --dev --no-update phpunit/phpunit:~5.7.22"
                        sh "composer require --dev --no-update sebastian/exporter:~2.0.0"
                        sh "composer require --dev --no-update liuggio/fastest:~1.4.4"
                        sh "composer update --optimize-autoloader --no-interaction --no-progress --prefer-dist"
                        sh "app/console oro:requirejs:generate-config"
                        sh "app/console assets:install"
                    }
                    container("node") {
                        sh "npm config set cache /shared/.npm --global"
                        sh "npm install --color=always"
                    }
                    container("docker") {
                        sh "cp app/config/parameters_test.yml.dist app/config/parameters_test.yml"
                        sh "sed -i \"s#database_host: .*#database_host: 127.0.0.1#g\" app/config/parameters_test.yml"
                        sh "sed -i \"s#index_hosts: .*#index_hosts: 'elastic:changeme@127.0.0.1:9200'#g\" app/config/parameters_test.yml"
                        sh "sed \"\$a    installer_data: 'PimInstallerBundle:minimal'\n\" app/config/parameters_test.yml"
                        sh "sed -i \"s@// new Doctrine@new Doctrine@g\" app/AppKernel.php"
                        sh "sed -i \"s@# mongodb_database: .*@mongodb_database: akeneo_pim@g\" app/config/pim_parameters.yml"
                        sh "sed -i \"s@# mongodb_server: .*@mongodb_server: 'mongodb://127.0.0.1:27017'@g\" app/config/pim_parameters.yml"
                        sh "printf \"    pim_catalog_product_storage_driver: doctrine/mongodb-odm\n\" >> app/config/parameters_test.yml"
                        sh "cp behat.ci.yml behat.yml"
                        sh "sed -i \"/extensions:/a\\ \\ \\ \\ \\ \\ \\ \\ Liuggio\\\\\\\\Fastest\\\\\\\\Behat2\\\\\\\\ListFeaturesExtension\\\\\\\\Extension: ~\" behat.yml"
                        sh "sed -i \"s#http://akeneo#http://127.0.0.1#g\" behat.yml"
                        sh "sed -i \"s#http://selenium#http://127.0.0.1#g\" behat.yml"
                        sh "sed -i \"s#http://selenium#http://127.0.0.1#g\" behat.yml"
                        sh "cat behat.yml"
                        
                        sh "docker build -t eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ceodm ."
                        sh "gcloud docker -- push eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ceodm"
                    }
                })
            } else {
                echo "Skipping Community Edition ODM matrix"
            }
        },
         "pim-ee-odm": {
             if (editions.contains("eeodm")) {
                withBuildNode({
                    checkout([$class: 'GitSCM',
                    branches: [[name: '1.7']],
                    userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-enterprise-dev.git']]
                    ])
                    sh "mkdir -m 777 vendor"
                    container("php") {
                        sh "composer require --dev --no-update phpspec/phpspec:~3.4.2"
                        sh "composer require --dev --no-update phpunit/phpunit:~5.7.22"
                        sh "composer require --dev --no-update sebastian/exporter:~2.0.0"
                        sh "composer require --dev --no-update liuggio/fastest:~1.4.4"              
                        sh "php -d memory_limit=-1 /usr/local/bin/composer update --optimize-autoloader --no-interaction --no-progress --prefer-dist --ansi"
                        sh "chmod 777 -R vendor/akeneo"
                        dir('vendor/akeneo/pim-community-dev') {
                            deleteDir()
                            checkout scm
                        }
                        sh "app/console oro:requirejs:generate-config"
                        sh "app/console assets:install"
                    }
                    container("node") {
                        sh "npm config set cache /shared/.npm --global"
                        sh "npm install --color=always"
                    }
                    container("docker") {
                        sh "cp vendor/akeneo/pim-community-dev/Dockerfile ."
                        sh "cp -R vendor/akeneo/pim-community-dev/.ci ."
                        sh "cp behat.ci.yml behat.yml"
                        sh "sed -i \"/extensions:/a\\ \\ \\ \\ \\ \\ \\ \\ Liuggio\\\\\\\\Fastest\\\\\\\\Behat2\\\\\\\\ListFeaturesExtension\\\\\\\\Extension: ~\" behat.yml"
                        sh "sed -i \"s#http://akeneo#http://127.0.0.1#g\" behat.yml"
                        sh "sed -i \"s#http://selenium#http://127.0.0.1#g\" behat.yml"
                        sh "sed -i \"s#http://selenium#http://127.0.0.1#g\" behat.yml"
                        sh "cat behat.yml"

                        sh "cp app/config/parameters_test.yml.dist app/config/parameters_test.yml"
                        sh "sed -i \"s#database_host: .*#database_host: 127.0.0.1#g\" app/config/parameters_test.yml"
                        sh "sed -i \"s#index_hosts: .*#index_hosts: 'elastic:changeme@127.0.0.1:9200'#g\" app/config/parameters_test.yml"
                        sh "sed \"\$a    installer_data: 'PimEnterpriseInstallerBundle:minimal'\n\" app/config/parameters_test.yml"
                        sh "sed -i \"s@// new Doctrine@new Doctrine@g\" app/AppKernel.php"
                        sh "sed -i \"s@# mongodb_database: .*@mongodb_database: akeneo_pim@g\" app/config/pim_parameters.yml"
                        sh "sed -i \"s@# mongodb_server: .*@mongodb_server: 'mongodb://127.0.0.1:27017'@g\" app/config/pim_parameters.yml"
                        sh "printf \"    pim_catalog_product_storage_driver: doctrine/mongodb-odm\n\" >> app/config/parameters_test.yml"
                        sh "docker build -t eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-eeodm ."
                        sh "gcloud docker -- push eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-eeodm"
                    }
                })
            } else {
                echo "Skipping Enterprise Edition ODM matrix"
            }
         }
    )
}

stage("Test") {
    try {
        milestone 3
        parallel(

            "phpunit": {
                if (launchUnitTests.equals("yes")) {
                    withPhp({
                        try {                            
                            sh "cd /home/jenkins/pim && ./bin/phpunit -c app/phpunit.xml.dist --testsuite PIM_Unit_Test --log-junit ${env.WORKSPACE}/junit_output.xml"
                        } finally {
                            junit "junit_output.xml"
                        }
                    })
                } else {
                    echo "Skipping unit test phpunit"
                }
            },

            "phpspec": {
                if (launchUnitTests.equals("yes")) {
                    withPhp({
                        try {
                            sh "cd /home/jenkins/pim && chown -R docker /home/jenkins/pim && su docker -c './bin/phpspec run --format=junit' > ${env.WORKSPACE}/junit_output.xml"
                        } finally {
                            junit "junit_output.xml"
                        }
                    })
                } else {
                    echo "Skipping unit test phpspec"
                }
            },
            "php-cs-fixer": {
                if (launchUnitTests.equals("yes")) {
                    withPhp({
                        try {    
                            sh "cd /home/jenkins/pim && ./bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > ${env.WORKSPACE}/junit_output.xml"
                        } finally {
                            junit "junit_output.xml"
                        }
                    })
                } else {
                    echo "Skipping unit test php-cs-fixer"
                }
            },
            "grunt": {
                    withGrunt({
                        sh "cd /home/jenkins/pim && grunt"
		})
            },
            "phpunit-integration-ce": {
                if (launchIntegrationTests.equals("yes")) {
                    queue({
                        def files = sh (returnStdout: true, script: 'sudo find /home/jenkins/pim/src -name "*Integration.php" -exec sh -c "grep -Ho \'function test\' {} | uniq -c"  \\; | sed "s/:function test//"').tokenize('\n')
                        def messagesICE = new net.sf.json.JSONArray()
                        for (file in files) {
                            messagesICE.add([
                                
                                [container: "php", script: "sudo composer remove --dev --no-update doctrine/mongodb-odm-bundle;"],
                                [container: "php", script: "sudo composer remove --dev --no-update doctrine/mongodb-odm-bundle;"],
                                [container: "php", script: "sudo cp app/config/parameters_test.yml.dist app/config/parameters_test.yml"],
                                [container: "php", script: "sudo  mkdir -p app/cache/tmp app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads"],
                                [container: "php", script: "sudo chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads"],
                                [container: "php", script: "sudo sed -i \"s#database_host: .*#database_host: 127.0.0.1#g\" app/config/parameters_test.yml"],
                                [container: "php", script: "sudo sed -i \"s#index_hosts: .*#index_hosts: 'elastic:changeme@127.0.0.1:9200'#g\" app/config/parameters_test.yml"],
                                [container: "php", script: "sudo  ./app/console --env=test pim:install --force"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/", name: "junit_output.xml"],
                                    script: "sudo php -d error_reporting='E_ALL' ./bin/phpunit -c app/phpunit.xml.dist " + file + " --log-junit junit_output.xml"
                                ]
                            ])
                        }

                        return messagesICE
                    }, 30, "ce")
                } else {
                    echo "Skipping integration test"
                }
            },
            "phpunit-integration-ce-odm": {
                if (launchIntegrationTests.equals("yes")) {
                    queue({
                        def files = sh (returnStdout: true, script: 'sudo find /home/jenkins/pim/src -name "*Integration.php" -exec sh -c "grep -Ho \'function test\' {} | uniq -c"  \\; | sed "s/:function test//"').tokenize('\n')
                        def messagesICE = new net.sf.json.JSONArray()

                        for (file in files) {
                            messagesICE.add([
                                [container: "php", script: "sudo cp app/config/parameters_test.yml.dist app/config/parameters_test.yml"],
                                [container: "php", script: "sudo mkdir -p app/cache/tmp app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads"],
                                [container: "php", script: "sudo chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads"],
                                [container: "php", script: "sudo sed -i \"s#database_host: .*#database_host: 127.0.0.1#g\" app/config/parameters_test.yml"],
                                [container: "php", script: "sudo sed -i \"s#index_hosts: .*#index_hosts: 'elastic:changeme@127.0.0.1:9200'#g\" app/config/parameters_test.yml"],
                                [container: "php", script: "sudo ./app/console --env=test pim:install --force"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/", name: "junit_output.xml"],
                                    script: "sudo php -d error_reporting='E_ALL' ./bin/phpunit -c app/phpunit.xml.dist " + file + " --log-junit junit_output.xml"
                               ]
                            ])
                        }

             return messagesICE
                    }, 30, "ceodm")
                } else {
                    echo "Skipping integration test"
                }
            },
            "behat-ce": {
                if (launchBehatTests.equals("yes")&& editions.contains("ce")) {
                    queue({
                        def scenariosCE = []
                        for (feature in features) {
                            scenariosCE = (scenariosCE + sh (returnStdout: true, script: "cd /home/jenkins/pim && if [ -d $feature ]; then path=\$(dirname $feature) ;php ./bin/behat $feature --list-scenarios | echo \"\$path\$(cat -)\"; fi").tokenize('\n'))
                        }
                        scenariosCE = scenariosCE.unique()   
                        def messagesCE = new net.sf.json.JSONArray()

                        for (scenarioCE in scenariosCE) {
                            messagesCE.add([
                                [container: "php", script: "cp .ci/akeneo-behat.conf /etc/apache2/sites-available/000-default.conf"],
                                [container: "php", script: "rm -rf /tmp/behat/screenshots/*"],
                                [container: "php", script: "sed -i '2 a umask(0000);' bin/behat"],
                                [container: "php", script: "mkdir -p app/cache/tmp app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "mkdir -m 777 -p app/build/logs/behat app/build/logs/consumer "],
                                [container: "php", script: "chown -R docker /home/jenkins/pim"],
                                [container: "php", script: "/usr/sbin/apache2ctl graceful"],
                                [container: "php", script: "su docker -c './app/console -e=behat ca:c'"],
                                [container: "php", script: "su docker -c './app/console --env=behat pim:install --force --clean'"],
                                [container: "php", script: "su docker -c './app/console --env=behat oro:translation:dump en_US'"],
                                [container: "php", script: "su docker -c './app/console --env=behat oro:translation:dump en_GB'"],
                                [container: "php", script: "su docker -c './app/console --env=behat oro:translation:dump fr_FR'"],
                                [container: "php", script: "su docker -c './app/console --env=behat oro:translation:dump de_DE'"],
                                [container: "php", script: "touch app/logs/behat.log"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "su docker -c 'php ./bin/behat --strict -vv " + scenarioCE+"'"
                                ]
                            ])
                        }

                        return messagesCE
                    }, 50, "ce")
                } else {
                    echo "Skipping behat test"
                }
            },
            "behat-ee": {
                if (launchBehatTests.equals("yes") && editions.contains("ee")) {
                    queue({
                        def scenariosEE = []
                        for (feature in features) {
                            scenariosEE = (scenariosEE + sh (returnStdout: true, script: "cd /home/jenkins/pim && if [ -d $feature ]; then path=\$(dirname $feature) ;php ./bin/behat $feature --list-scenarios | echo \"\$path\$(cat -)\"; fi").tokenize('\n'))
                        }
                        scenariosEE = scenariosEE.unique()   
                        def messagesEE = new net.sf.json.JSONArray()

                        for (scenarioEE in scenariosEE) {

                            messagesEE.add([
                                [container: "php", script: "sudo cp .ci/akeneo-behat.conf /etc/apache2/sites-available/000-default.conf"],
                                [container: "php", script: "sudo rm -rf /tmp/behat/screenshots/*"],
                                [container: "php", script: "sudo sed -i '2 a umask(0000);' bin/behat"],
                                [container: "php", script: "mkdir -p app/cache/tmp app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "mkdir -m 777 -p app/build/logs/behat app/build/logs/consumer "],
                                [container: "php", script: "sudo chown -R docker /home/jenkins/pim"],
                                [container: "php", script: "/usr/sbin/apache2ctl graceful"],
                                [container: "php", script: "su docker -c './app/console -e=behat ca:c'"],
                                [container: "php", script: "su docker -c './app/console --env=behat pim:install --force --clean'"],
                                [container: "php", script: "su docker -c './app/console --env=behat oro:translation:dump en_US'"],
                                [container: "php", script: "su docker -c './app/console --env=behat oro:translation:dump en_GB'"],
                                [container: "php", script: "su docker -c './app/console --env=behat oro:translation:dump fr_FR'"],
                                [container: "php", script: "su docker -c './app/console --env=behat oro:translation:dump de_DE'"],
                                [container: "php", script: "touch app/logs/behat.log"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "su docker -c 'php ./bin/behat --strict -vv " + scenarioEE + "'"
                                ]
                            ])
                        }
                        return messagesEE
                    }, 100, "ee")
                } else {
                    echo "Skipping behat test"
                }
            },
            "behat-ce-odm": {
                if (launchBehatTests.equals("yes") && editions.contains("ceodm")) {
                    queue({
                        def scenariosCE = []
                        for (feature in features) {
                            scenariosCE = (scenariosCE + sh (returnStdout: true, script: "cd /home/jenkins/pim && if [ -d $feature ]; then path=\$(dirname $feature) ;php ./bin/behat $feature --list-scenarios | echo \"\$path\$(cat -)\"; fi").tokenize('\n'))
                        }
                        scenariosCE = scenariosCE.unique()            
                        def messagesCE = new net.sf.json.JSONArray()
                        for (scenarioCE in scenariosCE) {

                            messagesCE.add([
                                [container: "php", script: "sudo cp .ci/akeneo-behat.conf /etc/apache2/sites-available/000-default.conf"],
                                [container: "php", script: "sudo rm -rf /tmp/behat/screenshots/*"],
                                [container: "php", script: "sudo sed -i '2 a umask(0000);' bin/behat"],
                                [container: "php", script: "mkdir -p app/cache/tmp app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "mkdir -m 777 -p app/build/logs/behat app/build/logs/consumer "],
                                [container: "php", script: "sudo chown -R docker /home/jenkins/pim"],
                                [container: "php", script: "/usr/sbin/apache2ctl graceful"],
                                [container: "php", script: "./app/console -e=behat ca:c"],
                                [container: "php", script: "./app/console --env=behat pim:install --force --clean "],
                                [container: "php", script: "./app/console --env=behat oro:translation:dump en_US"],
                                [container: "php", script: "./app/console --env=behat oro:translation:dump en_GB"],
                                [container: "php", script: "./app/console --env=behat oro:translation:dump fr_FR"],
                                [container: "php", script: "./app/console --env=behat oro:translation:dump de_DE"],
                                [container: "php", script: "touch app/logs/behat.log"],

                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/app/build/logs/behat/", name: "*.xml"],
                                    artifacts: [in: "/tmp/behat/screenshots", name: "*.png"],
                                    script: "php ./bin/behat --strict -vv " + scenarioCE
                                ]
                            ])
                        }

                        return messagesCE
                    }, 50, "ceodm")
                } else {
                    echo "Skipping behat test"
                }
	    },
            "behat-ee-odm": {
                if (launchBehatTests.equals("yes") && editions.contains("eeodm")) {
                    queue({
                        def scenariosEE = []
                        for (feature in features) {
                            scenariosEE = (scenariosEE + sh (returnStdout: true, script: "cd /home/jenkins/pim && if [ -d $feature ]; then path=\$(dirname $feature) ;php ./bin/behat $feature --list-scenarios | echo \"\$path\$(cat -)\"; fi").tokenize('\n'))
                        }
                        scenariosEE = scenariosEE.unique()   
                        def messagesEE = new net.sf.json.JSONArray()
                        for (scenarioEE in scenariosEE) {
                            messagesEE.add([
                                [container: "php", script: "sudo cp .ci/akeneo-behat.conf /etc/apache2/sites-available/000-default.conf"],
                                [container: "php", script: "sudo rm -rf /tmp/behat/screenshots/*"],
                                [container: "php", script: "sudo sed -i '2 a umask(0000);' bin/behat"],
                                [container: "php", script: "mkdir -p app/cache/tmp app/logs app/archive /tmp/pim/file_storage app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "chmod 777 -R app/cache app/logs app/archive /tmp/pim app/file_storage app/uploads app/build/logs/behat/"],
                                [container: "php", script: "mkdir -m 777 -p app/build/logs/behat app/build/logs/consumer "],
                                [container: "php", script: "sudo chown -R docker /home/jenkins/pim"],
                                [container: "php", script: "/usr/sbin/apache2ctl graceful"],
                                [container: "php", script: "./app/console -e=behat ca:c"],
                                [container: "php", script: "./app/console --env=behat pim:install --force --clean "],
                                [container: "php", script: "./app/console --env=behat oro:translation:dump en_US"],
                                [container: "php", script: "./app/console --env=behat oro:translation:dump en_GB"],
                                [container: "php", script: "./app/console --env=behat oro:translation:dump fr_FR"],
                                [container: "php", script: "./app/console --env=behat oro:translation:dump de_DE"],
                                [container: "php", script: "touch app/logs/behat.log"],
                                [
                                    container: "php",
                                    junit: [in: "/home/jenkins/pim/app/build/logs/behat/", name: "*.xml"],
                                    script: "php ./bin/behat --strict -vv " + scenarioEE
                                ]
                            ])
                        }

                        return messagesEE
                    }, 100, "eeodm")
                } else {
                    echo "Skipping behat test"
                }
            }
        )
    } finally {
        clearTemplateNames()
        podTemplate(label: "cleanup", containers: [
            containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud", ttyEnabled: true, command: 'cat')
        ]) {
            node("cleanup") {
                container("docker") {
                    sh "gcloud -q container images delete eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ce"
                    sh "gcloud -q container images delete eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ee"
                    sh "gcloud -q container images delete eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ceodm"
                    sh "gcloud -q container images delete eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-eeodm"
                }
            }
        }
    }
}

def withBuildNode(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        podTemplate(label: "build-" + uuid, containers: [
            containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud", ttyEnabled: true, command: 'cat', envVars: [envVar(key: "DOCKER_API_VERSION", value: "1.23")], resourceRequestCpu: '100m', resourceRequestMemory: '200Mi'),
            containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "eu.gcr.io/akeneo-ci/httpd-php:5.6", envVars: [envVar(key: "COMPOSER_HOME", value: "/shared/.composer"), envVar(key: "COMPOSER_AUTH", value: "{\"github-oauth\":{\"github.com\": \"$token\"}}")], resourceRequestCpu: '750m', resourceRequestMemory: '2000Mi'),
            containerTemplate(name: "node", ttyEnabled: true, command: 'cat', image: "node:8", resourceRequestCpu: '750m', resourceRequestMemory: '2000Mi')
        ], volumes: [
            nfsVolume(mountPath: '/shared', serverAddress: "${env.NFS_IP}", serverPath: '/exports', readOnly: false),
            hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock")
        ]) {
            node("build-" + uuid) {
                dir('/home/jenkins/pim') {
                    body()
                }
            }
        }
    }
}

def withPhp(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()
    podTemplate(label: "php-" + uuid, containers: [
        containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "akeneo/apache-php:php-5.6", resourceRequestCpu: '500m',
                        resourceRequestMemory: '1000Mi', alwaysPullImage: true, workingDir: '/home/jenkins')
    ], annotations: [
        podAnnotation(key: "pod.beta.kubernetes.io/init-containers", value: "[{\"name\": \"pim\", \"image\": \"eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ce\", \"command\": [\"sh\", \"-c\", \"cp -Rp /pim /home/jenkins\"], \"volumeMounts\":[{\"name\":\"workspace-volume\",\"mountPath\":\"/home/jenkins\"}]}]")
    ]) {
        node("php-" + uuid) {
            container("php") {
                body()
            }
        }
    }
}

def withGrunt(body) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()
    podTemplate(label: "grunt-" + uuid, containers: [
        containerTemplate(name: "grunt", ttyEnabled: true, command: 'cat', image: "digitallyseamless/nodejs-bower-grunt",
                          resourceRequestCpu: '750m', resourceLimitCpu: '750m', resourceRequestMemory: '2048Mi', resourceLimitMemory: '2048Mi')
    ], annotations: [
        podAnnotation(key: "pod.beta.kubernetes.io/init-containers", value: "[{\"name\": \"pim\", \"image\": \"eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-ce\", \"command\": [\"sh\", \"-c\", \"cp -Rp /pim /home/jenkins\"], \"volumeMounts\":[{\"name\":\"workspace-volume\",\"mountPath\":\"/home/jenkins\"}]}]")
    ]) {
        node("grunt-" + uuid) {
            container("grunt") {
                body()
            }
        }
    }
}

def queue(body, scale, edition) {
    clearTemplateNames()
    def uuid = UUID.randomUUID().toString()
    podTemplate(label: "pubsub-" + uuid, containers: [
        containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "akeneo/apache-php:php-5.6", resourceRequestCpu: '100m', alwaysPullImage: true, resourceRequestMemory: '200Mi'),
        containerTemplate(name: "gcloud", ttyEnabled: true, command: 'cat', image: "eu.gcr.io/akeneo-ci/gcloud:1.0.17", resourceRequestCpu: '100m', resourceRequestMemory: '200Mi', envVars: [envVar(key: "PUBSUB_PROJECT_ID", value: "akeneo-ci")])
    ], annotations: [
        podAnnotation(key: "pod.beta.kubernetes.io/init-containers", value: "[{\"name\": \"pim\", \"imagePullPolicy\": \"Always\", \"image\": \"eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-${edition}\", \"command\": [\"sh\", \"-c\", \"cp -Rp /pim /home/jenkins\"], \"volumeMounts\":[{\"name\":\"workspace-volume\",\"mountPath\":\"/home/jenkins\"}]}]")
    ], volumes: [
        hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock"),
        hostPathVolume(hostPath: "/usr/bin/docker", mountPath: "/usr/bin/docker")

    ]) {
        node("pubsub-" + uuid) {
            def messages = []

            container("php") {
                messages = body()
            }

            container("gcloud") {
                sh "gcloud.phar pubsub:topic:create ${NODE_NAME}"
                sh "gcloud.phar pubsub:topic:create ${NODE_NAME}-results"
                sh "gcloud.phar pubsub:subscription:create ${NODE_NAME} ${NODE_NAME}-subscription"
                sh "gcloud.phar pubsub:subscription:create ${NODE_NAME}-results ${NODE_NAME}-results-subscription"

                def size = messages.size()

                writeJSON file: 'output.json', json: messages
                sh "gcloud.phar pubsub:message:publish ${NODE_NAME} output.json"

                sh "sed -i 's#JOB_SCALE#${scale}#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#JOB_NAME#${NODE_NAME}#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#JOB_COMPLETIONS#${size}#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#SUBSCRIPTION_NAME#${NODE_NAME}-subscription#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#RESULT_TOPIC#${NODE_NAME}-results#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                sh "sed -i 's#PIM_IMAGE#eu.gcr.io/akeneo-ci/pim-community-dev:pull-request-${env.CHANGE_ID}-build-${env.BUILD_NUMBER}-${edition}#g' /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"

                try {
                    sh "cat /home/jenkins/pim/.ci/k8s/pubsub_consumer_job.yaml"
                    sh "kubectl apply -f /home/jenkins/pim/.ci/k8s/"
                    sh "gcloud.phar job:wait ${NODE_NAME}-results-subscription ${size} ${env.WORKSPACE} --ansi"
                } finally {
                    sh "kubectl delete job ${NODE_NAME} --namespace=jenkins-prod"
                    sh "gcloud.phar pubsub:topic:delete ${NODE_NAME}"
                    sh "gcloud.phar pubsub:topic:delete ${NODE_NAME}-results"
                    sh "gcloud.phar pubsub:subscription:delete ${NODE_NAME}-subscription"
                    sh "gcloud.phar pubsub:subscription:delete ${NODE_NAME}-results-subscription"

                    junit allowEmptyResults: true, testResults: 'junit/**/*.xml'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'artifacts/**/*.png'
                }
            }
        }
    }
}

@NonCPS
def clearTemplateNames() {
    // see https://issues.jenkins-ci.org/browse/JENKINS-42184
    def action = currentBuild.rawBuild.getAction(PodTemplateAction.class);
    if(action) { action.names.clear() }
}
