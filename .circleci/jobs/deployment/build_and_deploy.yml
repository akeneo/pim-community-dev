version: 2.1

aliases:
    - &envVarsDeployDev
        ENV_NAME: "dev"
        GOOGLE_PROJECT_ID: "akecld-saas-dev"
        GOOGLE_COMPUTE_ZONE: "europe-west3-a"
        CLUSTER_NAME: "europe-west3-a"
        GOOGLE_COMPUTE_ZONE_NEXT: "europe-west3-b"
        CLUSTER_NAME_NEXT: "europe-west3-b"

    - &envVarsDeployPreprod
        ENV_NAME: "preprod"
        GOOGLE_PROJECT_ID: "akecld-saas-preprod"
        GOOGLE_COMPUTE_ZONE: "europe-west3-a"
        CLUSTER_NAME: "europe-west3-a"
        GOOGLE_COMPUTE_ZONE_NEXT: "europe-west3-b"
        CLUSTER_NAME_NEXT: "europe-west3-b"

    - &dockerCloudDeployerCurrent   # cloudDeployer version used in prod (used for lastest release deployement)
        docker:
            - image: eu.gcr.io/akeneo-cloud/cloud-deployer:7.7
              auth:
                  username: _json_key  # default username when using a JSON key file to authenticate
                  password: $GCLOUD_SERVICE_KEY_DEV  # JSON service account you created, do not encode to base64

    - &dockerCloudDeployerNext      # cloudDeployer version (used for lastest current deployement)
        docker:
            - image: eu.gcr.io/akeneo-cloud/cloud-deployer:7.7
              auth:
                  username: _json_key  # default username when using a JSON key file to authenticate
                  password: $GCLOUD_SERVICE_KEY_DEV  # JSON service account you created, do not encode to base64

    - &dockerJenkinsCloudDeployer
        docker:
            - image: eu.gcr.io/akeneo-cloud/jenkinsfile-runner:7.7
              auth:
                  username: _json_key  # default username when using a JSON key file to authenticate
                  password: $GCLOUD_SERVICE_KEY_DEV  # JSON service account you created, do not encode to base64

executor-machine: &executor-machine 'ubuntu-2004:202111-02'

executors:
    cypress-with-chrome:
        docker:
            - image: 'cypress/browsers:node14.16.0-chrome90-ff88'
        resource_class: large

jobs:
    checkout:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: ""
        docker:
            -   image: alpine/git
        resource_class: small
        steps:
            - run:
                    name: Checkout code
                    command: |
                        mkdir -p ~/.ssh
                        chmod 0700 ~/.ssh
                        echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
                        echo "$CHECKOUT_KEY" > ~/.ssh/id_rsa
                        chmod 0600 ~/.ssh/id_rsa ~/.ssh/known_hosts
                        git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
                        git config --global gc.auto 0 || true
                        git clone --depth=1 --single-branch -b $CIRCLE_BRANCH $CIRCLE_REPOSITORY_URL .
                        git --no-pager log --no-color -n 1 --format='HEAD is now at %h %s'
            -   run:
                    name: Install cUrl
                    command: apk --no-cache add curl
            -   run:
                    name: Install yq
                    command: |
                        wget https://github.com/mikefarah/yq/releases/download/3.3.1/yq_linux_386
                        mv yq_linux_386 /usr/local/bin/yq
                        echo "e7fa464149a450d068311a244f403757408a745b  /usr/local/bin/yq" > /tmp/checksum
                        sha1sum -c /tmp/checksum
                        chmod +x /usr/local/bin/yq
            -   run:
                    name: Remove MySQL port translation for EE (see BH-664)
                    command: yq delete --inplace docker-compose.yml services.mysql.ports
            -   run:
                    name: Remove MySQL port translation for GRTH (see BH-664)
                    command: yq delete --inplace grth/docker-compose.yml services.mysql.ports
            -   run:
                    name: Remove MySQL port translation for TRIA
                    command: yq delete --inplace tria/docker-compose.yml services.mysql.ports
            -   when:
                    condition:
                        not:
                            equal: [ master, << pipeline.git.branch >> ]
                    steps:
                        -   run:
                                name: Update composer.json if same branch exists in CE for EE
                                command: |
                                    curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} && \
                                        sed -i "s#akeneo/pim-community-dev\": \"dev-master#akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}#" composer.json || \
                                        echo "No CE branch $CIRCLE_BRANCH found. I don't touch the EE dependencies."
                        -   run:
                                name: Update composer.json if same branch exists in CE for GRTH
                                command: |
                                    curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} && \
                                        sed -i "s#akeneo/pim-community-dev\": \"dev-master#akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}#" grth/composer.json || \
                                        echo "No CE branch $CIRCLE_BRANCH found. I don't touch the Growth Edition file."
                        -   run:
                                name: Update composer.json if same branch exists in CE for TRIA
                                command: |
                                    curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} && \
                                        sed -i "s#akeneo/pim-community-dev\": \"dev-master#akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}#" tria/composer.json || \
                                        echo "No CE branch $CIRCLE_BRANCH found. I don't touch the Tria file."
            -   run:
                    name: Remove useless files
                    command: rm -rf .git/
            -   persist_to_workspace:
                    root: ~/
                    paths:
                        - project
            -   store_artifacts:
                    path: composer.json
                    destination: ee-composer.json
            -   store_artifacts:
                    path: grth/composer.json
                    destination: grth-composer.json
            -   store_artifacts:
                    path: tria/composer.json
                    destination: tria-composer.json
            -   store_artifacts:
                    path: docker-compose.yml
                    destination: ee-docker-compose.yml
            -   store_artifacts:
                    path: grth/docker-compose.yml
                    destination: grth-docker-compose.yml
            -   store_artifacts:
                    path: tria/docker-compose.yml
                    destination: tria-docker-compose.yml

    build_srnt_dev:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Copy docker-compose.override.yml.dist
                  command: cp .circleci/docker-compose.override.yml.dist docker-compose.override.yml
            - run:
                  name: Creating cache key for PHP Docker image
                  command: |
                      find Dockerfile docker/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/php-docker-image.hash
                      date +%F >> ~/php-docker-image.hash
            - restore_cache:
                  name: Restore PHP docker image cache
                  key: php-docker-image-{{ .Environment.CACHE_VERSION }}-{{ checksum "~/php-docker-image.hash" }}
            - run:
                  name: Build the latest Docker images
                  command: |
                      ls php-pim-image.tar && docker load -i php-pim-image.tar
                      ls php-pim-image.tar || make php-image-dev
                      ls php-pim-image.tar || docker save -o php-pim-image.tar akeneo/pim-dev/php:8.0
            - save_cache:
                  name: Save PHP docker image cache
                  key: php-docker-image-{{ .Environment.CACHE_VERSION }}-{{ checksum "~/php-docker-image.hash" }}
                  paths:
                      - php-pim-image.tar
            - run:
                  name: Setup tests results folder and log folder
                  command: mkdir -p var/tests/phpspec var/tests/csfixer var/logs var/tests/screenshots ~/.cache/yarn ~/.cache/Cypress ~/.composer
            - run:
                  name: Creating cache key for JS and PHP dependencies
                  command: |
                      cat yarn.lock > ~/front-dependency.hash && date +%F >> ~/front-dependency.hash
                      cat composer.json > ~/back-dependency.hash && date +%F >> ~/back-dependency.hash
            - restore_cache:
                  name: Restore cache - yarn and Cypress dependency cache
                  keys:
                      - frontend-dependency-cache-{{ checksum "~/front-dependency.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore cache - composer dependency cache
                  keys:
                      - backend-dependency-cache-{{ checksum "~/back-dependency.hash" }}-{{ .Environment.CACHE_VERSION }}
            - change_pim_onboarder_branch_steps
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: |
                      sudo chown -R 1000:1000 ../project
                      sudo chown -R 1000:1000 ~/.composer
                      sudo chown -R 1000:1000 ~/.cache/
            - run:
                  name: Install back and front dependencies
                  command: make dependencies
                  environment:
                      YARN_REGISTRY: "http://registry.yarnpkg.com"
            - run:
                  name: Install assets
                  command: make assets
            - run:
                  name: Build css
                  command: make css
            - run:
                  name: Create hash for front packages
                  command: |
                      find vendor/akeneo/pim-community-dev/front-packages/akeneo-design-system -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/akeneo-design-system.hash
                      find vendor/akeneo/pim-community-dev/front-packages/measurement -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/measurement.hash
                      find vendor/akeneo/pim-community-dev/front-packages/shared -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/shared.hash
                      find components/tailored-export/front/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/tailored-export.hash
                      find components/tailored-import/front/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/tailored-import.hash
                      find vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Job/front/process-tracker -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/process-tracker.hash
                      find vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/CatalogVolumeMonitoringBundle/front -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/catalog-volume-monitoring.hash
                      find vendor/akeneo/pim-community-dev/src/Oro/Bundle/ConfigBundle/front -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/config.hash
                      date +%F | tee -a ~/akeneo-design-system.hash ~/measurement.hash ~/shared.hash ~/tailored-export.hash ~/tailored-import.hash ~/catalog-volume-monitoring.hash ~/process-tracker.hash ~/config.hash
            - run:
                  name: Set front package directories owner to circleci
                  command: sudo chown -R circleci:circleci vendor/akeneo/pim-community-dev/ front-packages/
            - restore_cache:
                  name: Restore front package DSM cache
                  key: front-packages-dsm-{{ checksum "~/akeneo-design-system.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore front package measurement cache
                  key: front-packages-measurement-{{ checksum "~/measurement.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore front package Shared cache
                  key: front-packages-shared-{{ checksum "~/shared.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore front package Tailored Export cache
                  key: front-packages-tailored-export-{{ checksum "~/tailored-export.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore front package Tailored Import cache
                  key: front-packages-tailored-import-{{ checksum "~/tailored-import.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore micro frontend Process Tracker cache
                  key: micro-frontend-process-tracker-{{ checksum "~/process-tracker.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore micro-frontend Catalog Volume Monitoring cache
                  key: micro-frontend-catalog-volume-monitoring-{{ checksum "~/catalog-volume-monitoring.hash" }}-{{ .Environment.CACHE_VERSION }}
            - restore_cache:
                  name: Restore micro-frontend Config cache
                  key: micro-frontend-config-{{ checksum "~/config.hash" }}-{{ .Environment.CACHE_VERSION }}
            - run:
                  name: Set front packages directories owner to docker
                  command: sudo chown -R 1000:1000 vendor/akeneo/pim-community-dev/ front-packages/
            - run:
                  name: Build front-packages
                  command: make front-packages
            - run:
                  name: Build Javascript
                  command: make javascript-dev
            - run:
                  name: Change owner on project dir to have the right to cache the data
                  command: sudo chmod -R 777 ../project ~/.cache ~/.composer vendor/akeneo/pim-community-dev/front-packages/ front-packages/
            - save_cache:
                  name: Save fontend dependency cache
                  paths:
                      - ~/.cache
                  key: frontend-dependency-cache-{{ checksum "~/front-dependency.hash" }}-{{ .Environment.CACHE_VERSION }}
            - save_cache:
                  name: Save backend dependency cache
                  paths:
                      - ~/.composer
                  key: backend-dependency-cache-{{ checksum "~/back-dependency.hash" }}-{{ .Environment.CACHE_VERSION }}
            - save_cache:
                  name: Save front package DSM cache
                  key: front-packages-dsm-{{ checksum "~/akeneo-design-system.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/front-packages/akeneo-design-system/
            - save_cache:
                  name: Save front package measurement cache
                  key: front-packages-measurement-{{ checksum "~/measurement.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/front-packages/measurement/
            - save_cache:
                  name: Save front package Shared cache
                  key: front-packages-shared-{{ checksum "~/shared.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/front-packages/shared/
            - save_cache:
                  name: Save front package Tailored Export cache
                  key: front-packages-tailored-export-{{ checksum "~/tailored-export.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - front-packages/tailored-export/
            - save_cache:
                  name: Save front package Tailored Import cache
                  key: front-packages-tailored-import-{{ checksum "~/tailored-import.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - front-packages/tailored-import/
            - save_cache:
                  name: Save micro frontend Process Tracker cache
                  key: micro-frontend-process-tracker-{{ checksum "~/process-tracker.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Job/front/process-tracker/
            - save_cache:
                  name: Save micro-frontend Catalog Volume Monitoring cache
                  key: micro-frontend-catalog-volume-monitoring-{{ checksum "~/catalog-volume-monitoring.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/CatalogVolumeMonitoringBundle/front/
            - save_cache:
                  name: Save micro-frontend Config cache
                  key: micro-frontend-config-{{ checksum "~/config.hash" }}-{{ .Environment.CACHE_VERSION }}
                  paths:
                      - vendor/akeneo/pim-community-dev/src/Oro/Bundle/ConfigBundle/front/
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project

    build_srnt_prod:
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        working_directory: ~/project
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - change_pim_onboarder_branch_steps
            - connector_bigcommerce_checkout_steps
            - set_gcloud_config_dev
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      TYPE_LONG="serenity"
                      IMAGE_TAG=${CIRCLE_SHA1}
                      IMAGE_TAG_SHORTED=$(echo ${IMAGE_TAG} | cut -c -7)
                      IMAGE_TAG_DATE=$(date +%Y%m%d%H%M%S)
                      RELEASE_NAME="v$(date +%Y%m%d%H%M%S)"
                      PRODUCT_REFERENCE_TYPE="serenity_instance"
                      PRODUCT_REFERENCE_CODE="serenity_${ENV_NAME}"

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export TYPE_LONG=${TYPE_LONG} >> $BASH_ENV
                      echo export IMAGE_TAG=${IMAGE_TAG} >> $BASH_ENV
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> $BASH_ENV
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> $BASH_ENV
                      echo export RELEASE_NAME=${RELEASE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV

                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Serenity release name: ${RELEASE_NAME}"
            - run:
                  name: Build the Serenity Edition prod image
                  command: make -C deployments/ php-image-prod
            - run:
                  name: Push the Serenity Edition prod image on docker registry
                  command: make -C deployments/ push-php-image-prod
            - run:
                  name: Push Terraform modules to GCS
                  command: |
                      BOTO_CONFIG=/dev/null gsutil -m cp -r deployments/ gs://akecld-terraform-modules/serenity-edition-dev/${IMAGE_TAG}/
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export TYPE=${TYPE} > persisted_env_vars
                      echo export TYPE_LONG=${TYPE_LONG} >> persisted_env_vars
                      echo export IMAGE_TAG=${IMAGE_TAG} >> persisted_env_vars
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> persisted_env_vars
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> persisted_env_vars
                      echo export RELEASE_NAME=${RELEASE_NAME} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> persisted_env_vars
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    build_env_vars:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
        environment:
            <<: *envVarsDeployDev
        docker:
            - image: alpine:3
        resource_class: small
        working_directory: ~/project
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Define and persist value for next jobs
                  command: |
                      TYPE=<< parameters.PRODUCT_TYPE >>
                      TYPE_LONG=serenity
                      PRODUCT_REFERENCE_TYPE="${TYPE_LONG}_instance"
                      PRODUCT_REFERENCE_CODE="${TYPE_LONG}_${ENV_NAME}"
                      IMAGE_TAG=${CIRCLE_SHA1}
                      IMAGE_TAG_SHORTED=$(echo ${IMAGE_TAG} | cut -c -7)
                      IMAGE_TAG_DATE=$(date +%Y%m%d%H%M%S)
                      RELEASE_NAME="v$(date +%Y%m%d%H%M%S)"
                      if [[ "${TYPE}" == "grth" ]]; then
                          TYPE_LONG=growth
                          PRODUCT_REFERENCE_TYPE="growth_edition_instance"
                          PRODUCT_REFERENCE_CODE="growth_edition_${ENV_NAME}"
                          RELEASE_NAME="${TYPE_LONG}-${RELEASE_NAME}"
                      fi

                      echo export TYPE=${TYPE} > persisted_env_vars
                      echo export TYPE_LONG=${TYPE_LONG} >> persisted_env_vars
                      echo export IMAGE_TAG=${IMAGE_TAG} >> persisted_env_vars
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> persisted_env_vars
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> persisted_env_vars
                      echo export RELEASE_NAME=${RELEASE_NAME} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> persisted_env_vars

                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Release name: ${RELEASE_NAME}"
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    build_grth:
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        working_directory: ~/project
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - connector_bigcommerce_checkout_steps
            - set_gcloud_config_dev
            - install_yq
            - when:
                  condition:
                      not:
                          equal: [master, << pipeline.git.branch >>]
                  steps:
                      - run:
                            name: Get last good CE build revision on PR
                            command: |
                                if curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH}; then
                                  CE_BRANCH=${CIRCLE_BRANCH}
                                  CE_COMMIT_HASH=HEAD
                                else
                                  CE_BRANCH=master
                                  CE_COMMIT_HASH=HEAD
                                fi

                                echo export CE_BRANCH=${CE_BRANCH} >> $BASH_ENV
                                echo export CE_COMMIT_HASH=${CE_COMMIT_HASH} >> $BASH_ENV
            - when:
                  condition:
                      equal: [master, << pipeline.git.branch >>]
                  steps:
                      - run:
                            name: Get last good CE build revision on master
                            command: |
                                docker run --rm -v ${PWD}/last_good_ce:/app composer composer install
                                CE_BRANCH=master
                                CE_COMMIT_HASH=$(docker run --rm -v ${PWD}/last_good_ce:/app composer php get_last_good_ce_revision.php)

                                echo export CE_BRANCH=${CE_BRANCH} >> $BASH_ENV
                                echo export CE_COMMIT_HASH=${CE_COMMIT_HASH} >> $BASH_ENV
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="grth"
                      TYPE_LONG="growth"
                      IMAGE_TAG=$(echo growth-${CIRCLE_SHA1} | cut -b 1-40)
                      IMAGE_TAG_SHORTED=$(echo ${CIRCLE_SHA1} | cut -c -7)
                      IMAGE_TAG_DATE=$(date +%Y%m%d%H%M%S)
                      RELEASE_NAME="growth-v$(date +%Y%m%d%H%M%S)"
                      PRODUCT_REFERENCE_TYPE="growth_edition_instance"
                      PRODUCT_REFERENCE_CODE="growth_edition_${ENV_NAME}"

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export TYPE_LONG=${TYPE_LONG} >> $BASH_ENV
                      echo export IMAGE_TAG=${IMAGE_TAG} >> $BASH_ENV
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> $BASH_ENV
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> $BASH_ENV
                      echo export RELEASE_NAME=${RELEASE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV

                      echo "CE Branch used: ${CE_BRANCH}"
                      echo "CE Commit hash used: ${CE_COMMIT_HASH}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Growth Release name: ${RELEASE_NAME}"
            - run:
                  name: Set the right CE branch
                  command: |
                      docker run --rm -v ${PWD}:/app -e CE_COMMIT_HASH=${CE_COMMIT_HASH} -e CE_BRANCH=${CE_BRANCH} -w /srv/pim/${TYPE} composer bash -c 'composer require "akeneo/pim-community-dev:dev-${CE_BRANCH}#${CE_COMMIT_HASH}" --no-update --ignore-platform-reqs'
            - run:
                  name: Prepare chart values
                  command: make -C deployments/ prepare-chart-default-values
            - run:
                  name: Build the Growth Edition prod image
                  command: make -C deployments/ php-image-prod
            - run:
                  name: Push the Growth Edition prod image on docker registry
                  command: make -C deployments/ push-php-image-prod
            - run:
                  name: Push Terraform modules to GCS
                  command: |
                      BOTO_CONFIG=/dev/null gsutil -m cp -r deployments/ gs://akecld-terraform-modules/growth-edition-dev/${IMAGE_TAG}/
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export TYPE=${TYPE} > persisted_env_vars
                      echo export TYPE_LONG=${TYPE_LONG} >> persisted_env_vars
                      echo export IMAGE_TAG=${IMAGE_TAG} >> persisted_env_vars
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> persisted_env_vars
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> persisted_env_vars
                      echo export RELEASE_NAME=${RELEASE_NAME} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> persisted_env_vars
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project

    build_tria:
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        working_directory: ~/project
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - connector_bigcommerce_checkout_steps
            - set_gcloud_config_dev
            - install_yq
            - when:
                  condition:
                      not:
                          equal: [master, << pipeline.git.branch >>]
                  steps:
                      - run:
                            name: Get last good CE build revision on PR
                            command: |
                                if curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH}; then
                                  CE_BRANCH=${CIRCLE_BRANCH}
                                  CE_COMMIT_HASH=HEAD
                                else
                                  CE_BRANCH=master
                                  CE_COMMIT_HASH=HEAD
                                fi

                                echo export CE_BRANCH=${CE_BRANCH} >> $BASH_ENV
                                echo export CE_COMMIT_HASH=${CE_COMMIT_HASH} >> $BASH_ENV
            - when:
                  condition:
                      equal: [master, << pipeline.git.branch >>]
                  steps:
                      - run:
                            name: Get last good CE build revision on master
                            command: |
                                docker run --rm -v ${PWD}/last_good_ce:/app composer composer install
                                CE_BRANCH=master
                                CE_COMMIT_HASH=$(docker run --rm -v ${PWD}/last_good_ce:/app composer php get_last_good_ce_revision.php)

                                echo export CE_BRANCH=${CE_BRANCH} >> $BASH_ENV
                                echo export CE_COMMIT_HASH=${CE_COMMIT_HASH} >> $BASH_ENV
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="tria"
                      TYPE_LONG="trial"
                      IMAGE_TAG=$(echo trial-${CIRCLE_SHA1} | cut -b 1-40)
                      IMAGE_TAG_SHORTED=$(echo ${CIRCLE_SHA1} | cut -c -7)
                      IMAGE_TAG_DATE=$(date +%Y%m%d%H%M%S)
                      RELEASE_NAME="trial-v$(date +%Y%m%d%H%M%S)"
                      PRODUCT_REFERENCE_TYPE="pim_trial_instance"
                      PRODUCT_REFERENCE_CODE="pim_trial_${ENV_NAME}"

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export TYPE_LONG=${TYPE_LONG} >> $BASH_ENV
                      echo export IMAGE_TAG=${IMAGE_TAG} >> $BASH_ENV
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> $BASH_ENV
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> $BASH_ENV
                      echo export RELEASE_NAME=${RELEASE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV

                      echo "CE Branch used: ${CE_BRANCH}"
                      echo "CE Commit hash used: ${CE_COMMIT_HASH}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Trial Release name: ${RELEASE_NAME}"
            - run:
                  name: Set the right CE branch
                  command: |
                      docker run --rm -v ${PWD}:/app -e CE_COMMIT_HASH=${CE_COMMIT_HASH} -e CE_BRANCH=${CE_BRANCH} -w /srv/pim/${TYPE} composer bash -c 'composer require "akeneo/pim-community-dev:dev-${CE_BRANCH}#${CE_COMMIT_HASH}" --no-update --ignore-platform-reqs'
            - run:
                  name: Prepare chart values
                  command: make -C deployments/ prepare-chart-default-values
            - run:
                  name: Build the Free Trial Edition prod image
                  command: make -C deployments/ php-image-prod
            - run:
                  name: Push the Free Trial Edition prod image on docker registry
                  command: make -C deployments/ push-php-image-prod
            - run:
                  name: Push Terraform modules to GCS
                  command: |
                      BOTO_CONFIG=/dev/null gsutil -m cp -r deployments/ gs://akecld-terraform-modules/trial-edition-dev/${IMAGE_TAG}/
                      BOTO_CONFIG=/dev/null gsutil -m cp -r tria/deployments/terraform/redirection_trial gs://akecld-terraform-modules/trial-edition-dev/${IMAGE_TAG}/deployments/terraform/
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export TYPE=${TYPE} > persisted_env_vars
                      echo export TYPE_LONG=${TYPE_LONG} >> persisted_env_vars
                      echo export IMAGE_TAG=${IMAGE_TAG} >> persisted_env_vars
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> persisted_env_vars
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> persisted_env_vars
                      echo export RELEASE_NAME=${RELEASE_NAME} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> persisted_env_vars
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> persisted_env_vars
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project

    ##################
    # Tests          #
    ##################
    test_grth:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="grth"
                      echo export TYPE=${TYPE} >> $BASH_ENV
            - run:
                  name: Setup tests results folder and log folder
                  command: mkdir -p ${TYPE}/var/tests/phpspec ${TYPE}/var/tests/csfixer ${TYPE}/var/logs ${TYPE}/var/tests/screenshots ~/.cache/yarn ~/.composer ~/.cache/Cypress
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: sudo chown -R 1000:1000 ~/project ~/.cache ~/.composer
            - run:
                  name: Load php image
                  command: docker load -i php-pim-image.tar
            - run:
                  name: Install dependencies
                  command: make dependencies
            - run:
                  name: Launch Grth in test mode
                  command: make pim-test
            - run:
                  name: Lint Back
                  command: PIM_CONTEXT=test make lint-back
            - run:
                  name: Static tests
                  command: PIM_CONTEXT=test make static-back
            - run:
                  name: Unit Back
                  command: PIM_CONTEXT=test make unit-back
            - run:
                  name: Code Coupling Detection
                  command: PIM_CONTEXT=test make coupling-back
            - run:
                  name: Acceptance tests
                  command: PIM_CONTEXT=test make acceptance-back
            - run:
                  name: Integration Back
                  command: PIM_CONTEXT=test make pim-integration-back
            - run:
                  name: End to End Back
                  command: PIM_CONTEXT=test make end-to-end-back
            - run:
                  name: PhpUnit Migration
                  command: PIM_CONTEXT=test make migration-back
            - run:
                  name: Tailored Export Back Tests
                  command: PIM_CONTEXT=tailored-export make ci-back
            - run:
                  name: Tailored Import Back Tests
                  command: PIM_CONTEXT=tailored-import make ci-back
            - run:
                  name: Install assets & css
                  command: make assets css
            - run:
                  name: Build the DSM
                  command: make dsm
            - run:
                  name: Build front-packages
                  command: make front-packages
            - run:
                  name: Build Javascript
                  command: make javascript-test
            - run:
                  name: Front linter
                  command: PIM_CONTEXT=test make lint-front
            - run:
                  name: Front unit tests
                  command: PIM_CONTEXT=test make unit-front
            - run:
                  name: Tailored Export Front Tests
                  command: PIM_CONTEXT=tailored-export make ci-front
            - run:
                  name: Tailored Import Front Tests
                  command: PIM_CONTEXT=tailored-import make ci-front
            - store_test_results:
                  path: ${TYPE}/var/tests
            - store_artifacts:
                  path: ${TYPE}/var/tests
            - store_artifacts:
                  path: ${TYPE}/var/logs

    test_tria:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="tria"
                      echo export TYPE=${TYPE} >> $BASH_ENV
            - run:
                  name: Setup tests results folder and log folder
                  command: mkdir -p ${TYPE}/var/tests/phpspec ${TYPE}/var/tests/csfixer ${TYPE}/var/logs ${TYPE}/var/tests/screenshots ~/.cache/yarn ~/.composer
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: sudo chown -R 1000:1000 ~/project ~/.cache/yarn ~/.composer
            - run:
                  name: Load php image
                  command: docker load -i php-pim-image.tar
            - run:
                  name: Install dependencies
                  command: make dependencies
            - run:
                  name: Build the DSM
                  command: make dsm
            - run:
                  name: Launch Tria in test mode
                  command: make pim-test
            - run:
                  name: Lint Front
                  command: PIM_CONTEXT=test make lint-front
            - run:
                  name: Unit Front
                  command: PIM_CONTEXT=test make unit-front
            - run:
                  name: Lint Back
                  command: PIM_CONTEXT=test make lint-back
            - run:
                  name: Unit Back
                  command: PIM_CONTEXT=test make unit-back
            - run:
                  name: Integration Back
                  command: PIM_CONTEXT=test make pim-integration-back
            - store_test_results:
                  path: ${TYPE}/var/tests
            - store_artifacts:
                  path: ${TYPE}/var/tests
            - store_artifacts:
                  path: ${TYPE}/var/logs

    ##################
    # Helm tests     #
    ##################
    test_helm_generated_k8s_files:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            CLUSTER_VERSION:
                type: string
                default: ""
            CLUSTER_NEXT:
                type: boolean
                default: false
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - when:
                  condition:
                      equal: [true, << parameters.CLUSTER_NEXT >> ]
                  steps:
                      - modify_cluster
            - set_gcloud_config_dev
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="<<parameters.PRODUCT_TYPE>>"
                      K8S_CLUSTER_VERSION=<< parameters.CLUSTER_VERSION >>

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export PIM_CONTEXT=${PIM_CONTEXT} >> $BASH_ENV
                      echo export K8S_CLUSTER_VERSION=${K8S_CLUSTER_VERSION} >> $BASH_ENV
                      echo "K8s version tested (empty=current): ${K8S_CLUSTER_VERSION}"
            - run:
                  name: Test <<parameters.PRODUCT_TYPE>> without Onboarder bundle Helm generated yaml files
                  command: make -C deployments/ test_helm_generated_k8s_files
            - run:
                  name: Test <<parameters.PRODUCT_TYPE>> with Onboarder bundle Helm generated yaml files
                  command: WITH_ONBOARDER=1 make -C deployments/ test_helm_generated_k8s_files

    test_cronjobs_existence:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - install_yq
            - run:
                  name: Test Cronjob jobs exists
                  command: make -C deployments/ test-helm-cronjob

    ##################
    # Tests deploy   #
    ##################
    test_deploy:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            CLUSTER_NEXT:
                type: boolean
                default: false
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - when:
                  condition:
                      equal: [true, << parameters.CLUSTER_NEXT >> ]
                  steps:
                      - modify_cluster
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Define value for next steps
                  command: |
                      INSTANCE_NAME_PREFIX=pimci
                      INSTANCE_NAME=${INSTANCE_NAME_PREFIX}-${IMAGE_TAG_SHORTED}-${CIRCLE_BUILD_NUM}

                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV

                      echo "Instance name prefix: ${INSTANCE_NAME_PREFIX}"
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Image tag: ${IMAGE_TAG}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Deploy PIM on kubernetes
                  command: |
                      NS=${TYPE}-${INSTANCE_NAME} PHASE=install bash deployments/bin/deployments_poll_up.sh 2>&1 >> deployment.log &
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      make -C deployments/ deploy-instance
                      make -C deployments/ commit-instance
            - run:
                  name: Test PIM connexion on kubernetes
                  command: make -C deployments/ test-prod
            - run:
                  name: Display Deployment Errors
                  command: cat deployment.log
                  when: on_fail
            - run:
                  name: Prepare infrastructure artifacts
                  command: make -C deployments/ prepare-infrastructure-artifacts
                  when: on_fail
            - store_artifacts:
                  path: ~/artifacts/infra
            - store_artifacts:
                  path: deployment.log
                  destination: test_deploy_<<parameters.PRODUCT_TYPE>>_deployment.log
            - run:
                  name: Remove env on kubernetes
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                  when: always
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - upgrades.tfplan.json

    test_deploy_last_release:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            CLUSTER_NEXT:
                type: boolean
                default: false
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerCurrent
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - when:
                  condition:
                      equal: [true, << parameters.CLUSTER_NEXT >> ]
                  steps:
                      - modify_cluster
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Get latest release & export variables
                  command: |
                      LATEST_RELEASE=$(bash ${PWD}/deployments/bin/get_latest_release.sh)
                      if [[ -z "${LATEST_RELEASE}" ]]; then
                          echo "Could not retrieve latest deployed release"
                          exit 1
                      fi
                      INSTANCE_NAME_PREFIX=pimup
                      INSTANCE_NAME=${INSTANCE_NAME_PREFIX}-${IMAGE_TAG_SHORTED}-${CIRCLE_BUILD_NUM}

                      echo export LATEST_RELEASE=${LATEST_RELEASE} >> $BASH_ENV
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV

                      echo "Instance name prefix: ${INSTANCE_NAME_PREFIX}"
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Latest image tag: ${LATEST_RELEASE}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Pull Terraform modules from last release
                  command: |
                      rm -r ./deployments
                      BOTO_CONFIG=/dev/null gsutil -m cp -r gs://akecld-terraform-modules/${TYPE_LONG}-edition-dev/${LATEST_RELEASE}/deployments/ .
            - run:
                  name: Deploy instance with latest release
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      IMAGE_TAG=${LATEST_RELEASE} make -C deployments/ deploy-instance
                      IMAGE_TAG=${LATEST_RELEASE} make -C deployments/ commit-instance
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export INSTANCE_NAME="${INSTANCE_NAME}" >> persisted_env_vars
            - run:
                  name: Remove env on kubernetes
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                  when: on_fail
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    test_upgrade_from_last_release:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            CLUSTER_NEXT:
                type: boolean
                default: false
            INSTANCE_NAME:
                type: string
                default: ""
            REMOVE_ENV:
                type: boolean
                default: true
        environment:
            <<: *envVarsDeployDev
        <<: *dockerJenkinsCloudDeployer
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys
            - when:
                  condition:
                      equal: [true, << parameters.CLUSTER_NEXT >> ]
                  steps:
                      - modify_cluster
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Prepare the environment
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Jenkins Upgrade
                  command: |
                      NS=${TYPE}-${INSTANCE_NAME} PHASE=upgrade bash deployments/bin/deployments_poll_up.sh 2>&1 >> deployment.log &
                      OPERATIONS_TOOLS_BRANCH=master make -C deployments/ upgrade-instance
            - run:
                  name: Production tests on upgraded env
                  command: make -C deployments/ test-prod
            - run:
                  name: Check that upgrader pod ran
                  command: kubectl get pods --namespace=${TYPE}-${INSTANCE_NAME} | grep pim-upgrader
            - run:
                  name: Check PIM version installed
                  command: |
                      VERSION_INSTALLED=$(helm3 get values ${TYPE}-${INSTANCE_NAME} -n ${TYPE}-${INSTANCE_NAME} | yq r - 'image.pim.tag')
                      if [[ "${VERSION_INSTALLED}" == "${IMAGE_TAG}" ]]; then
                        echo "PIM successfully upgraded to ${IMAGE_TAG}"
                      else
                        echo "PIM not upgraded to the correct version"
                        echo "PIM version wanted: ${IMAGE_TAG}"
                        echo "PIM version installed: ${VERSION_INSTALLED}"
                        exit 1
                      fi
            - run:
                  name: Display Deployment Errors
                  command: cat deployment.log
                  when: on_fail
            - run:
                  name: Check if upgrader failed
                  command: kubectl logs -l "job-name=pim-upgrader" --namespace=${TYPE}-${INSTANCE_NAME}
                  when: on_fail
            - run:
                  name: Prepare infrastructure artifacts
                  command: make -C deployments/ prepare-infrastructure-artifacts
                  when: on_fail
            - store_artifacts:
                  path: ~/artifacts/infra
            - store_artifacts:
                  path: deployment.log
                  destination: test_upgrade_from_last_release_deployment.log
            - when:
                  condition:
                      equal: [true, << parameters.REMOVE_ENV >> ]
                  steps:
                      - run:
                            name: Remove env on kubernetes
                            command: |
                                ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                                export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                                UNCOMMIT_INSTANCE_STATUS_CODE=0
                                for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                                exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                            when: always
            - when:
                  condition:
                      equal: [false, << parameters.REMOVE_ENV >> ]
                  steps:
                      - run:
                            name: Remove env on kubernetes
                            command: |
                                ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                                export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                                UNCOMMIT_INSTANCE_STATUS_CODE=0
                                for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                                exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                            when: on_fail

    test_clone_from_customer_db:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            SOURCE_PFID:
                type: string
                default: ""
            LONG_TTL_INSTANCE:
                type: boolean
                default: false
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Define value for next steps
                  command: |
                      SOURCE_PFID=<< parameters.SOURCE_PFID >>
                      INSTANCE_NAME_PREFIX=pimci<<# parameters.LONG_TTL_INSTANCE >>-long<</ parameters.LONG_TTL_INSTANCE >>-duplic
                      INSTANCE_NAME=${INSTANCE_NAME_PREFIX}-$(echo "${SOURCE_PFID}" | cut -c1-15)-${CIRCLE_BUILD_NUM}

                      echo export SOURCE_PFID=${SOURCE_PFID} >> $BASH_ENV
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV

                      echo "Source PFID: ${SOURCE_PFID}"
                      echo "Instance name prefix: ${INSTANCE_NAME_PREFIX}"
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Long ttl tag: << parameters.LONG_TTL_INSTANCE >>"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Duplicate PROD environment
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      make -C deployments/ clone_saas_instance
                      make -C deployments/ commit-instance
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      PIM_ADMIN_PASSWORD=$(yq r /root/project/deployments/instances/${TYPE}-${INSTANCE_NAME}/values.yaml pim.defaultAdminUser.password)
                      echo export PIM_ADMIN_PASSWORD=${PIM_ADMIN_PASSWORD} >> persisted_env_vars
                      echo export SOURCE_PFID=${SOURCE_PFID} >> persisted_env_vars
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> persisted_env_vars
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> persisted_env_vars
            - run:
                  name: Prepare infrastructure artifacts
                  command: make -C deployments/ prepare-infrastructure-artifacts
                  when: on_fail
            - store_artifacts:
                  path: ~/artifacts/infra
            - run:
                  name: Remove env on kubernetes
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                  when: on_fail
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    test_migrate_flex:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            SOURCE_PFID_SOURCE_PROJECT_ID:
                type: string
                default: ""
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Define value for next steps
                  command: |
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      SOURCE_PFID_SOURCE_PROJECT_ID=<< parameters.SOURCE_PFID_SOURCE_PROJECT_ID >>
                      SOURCE_PFID="${SOURCE_PFID_SOURCE_PROJECT_ID%%##*}"
                      SOURCE_PROJECT_ID="${SOURCE_PFID_SOURCE_PROJECT_ID##*##}"
                      INSTANCE_NAME_PREFIX=pimci-duplic
                      INSTANCE_NAME=${INSTANCE_NAME_PREFIX}-$(echo "${SOURCE_PFID}" | cut -c1-20)-${CIRCLE_BUILD_NUM}

                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export SOURCE_PFID=${SOURCE_PFID} >> $BASH_ENV
                      echo export SOURCE_PROJECT_ID=${SOURCE_PROJECT_ID} >> $BASH_ENV
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV

                      echo "Source PFID: ${SOURCE_PFID}"
                      echo "Source project ID: ${SOURCE_PROJECT_ID}"
                      echo "Instance name prefix: ${INSTANCE_NAME_PREFIX}"
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Migrate Flex
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      IMAGE_TAG=${RELEASE_TO_DEPLOY} make -C deployments/ migrate_flexibility
                      make -C deployments/ commit-instance
            - run:
                  name: Prepare infrastructure artifacts
                  command: make -C deployments/ prepare-infrastructure-artifacts
                  when: on_fail
            - store_artifacts:
                  path: ~/artifacts/infra
            - run:
                  name: Remove env on kubernetes
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                  when: always

    test_migrate_from_flex_customer_db:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            SOURCE_PFID_SOURCE_PROJECT_ID:
                type: string
                default: ""
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Define value for next steps
                  command: |
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      SOURCE_PFID_SOURCE_PROJECT_ID=<< parameters.SOURCE_PFID_SOURCE_PROJECT_ID >>
                      SOURCE_PFID="${SOURCE_PFID_SOURCE_PROJECT_ID%%##*}"
                      SOURCE_PROJECT_ID="${SOURCE_PFID_SOURCE_PROJECT_ID##*##}"
                      INSTANCE_NAME_PREFIX=pimci-duplic
                      INSTANCE_NAME=${INSTANCE_NAME_PREFIX}-$(echo "${SOURCE_PFID}" | cut -c1-20)-${CIRCLE_BUILD_NUM}

                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export SOURCE_PFID=${SOURCE_PFID} >> $BASH_ENV
                      echo export SOURCE_PROJECT_ID=${SOURCE_PROJECT_ID} >> $BASH_ENV
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV

                      echo "Source PFID: ${SOURCE_PFID}"
                      echo "Source project ID: ${SOURCE_PROJECT_ID}"
                      echo "Instance name prefix: ${INSTANCE_NAME_PREFIX}"
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Migrate Flex to SRNT environment
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      IMAGE_TAG=${RELEASE_TO_DEPLOY} make -C deployments/ migrate_flexibility_to_serenity
                      make -C deployments/ commit-instance
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      PIM_ADMIN_PASSWORD=$(yq r /root/project/deployments/instances/${TYPE}-${INSTANCE_NAME}/values.yaml pim.defaultAdminUser.password)
                      echo export PIM_ADMIN_PASSWORD=${PIM_ADMIN_PASSWORD} >> persisted_env_vars
                      echo export SOURCE_PFID=${SOURCE_PFID} >> persisted_env_vars
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> persisted_env_vars
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> persisted_env_vars
            - run:
                  name: Prepare infrastructure artifacts
                  command: make -C deployments/ prepare-infrastructure-artifacts
                  when: on_fail
            - store_artifacts:
                  path: ~/artifacts/infra
            - run:
                  name: Remove env on kubernetes
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                  when: on_fail
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    test_upgrade_from_customer_db:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            SOURCE_PFID:
                type: string
                default: ""
        environment:
            <<: *envVarsDeployDev
        <<: *dockerJenkinsCloudDeployer
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Define value for next steps
                  command: |
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      if [[ "${TYPE}" == "grth" ]]; then
                          RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^growth-v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      fi

                      echo export IMAGE_TAG=${RELEASE_TO_DEPLOY} >> $BASH_ENV

                      echo "Release to deploy: ${IMAGE_TAG}"
            - run:
                  name: Prepare the environment
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Jenkins Upgrade
                  command: |
                      NS=${TYPE}-${INSTANCE_NAME} PHASE=upgrade bash deployments/bin/deployments_poll_up.sh 2>&1 >> deployment.log &
                      OPERATIONS_TOOLS_BRANCH=master make -C deployments/ upgrade-instance
            - run:
                  name: Production tests on upgraded env
                  command: make -C deployments/ test-prod
            - run:
                  name: Check that upgrader pod ran
                  command: kubectl get pods --namespace=${TYPE}-${INSTANCE_NAME} | grep pim-upgrader
            - run:
                  name: Check PIM version installed
                  command: |
                      VERSION_INSTALLED=$(helm3 get values ${TYPE}-${INSTANCE_NAME} -n ${TYPE}-${INSTANCE_NAME} | yq r - 'image.pim.tag')
                      if [[ "${VERSION_INSTALLED}" == "${IMAGE_TAG}" ]]; then
                        echo "PIM successfully upgraded to ${IMAGE_TAG}"
                      else
                        echo "PIM not upgraded to the correct version"
                        echo "PIM version wanted: ${IMAGE_TAG}"
                        echo "PIM version installed: ${VERSION_INSTALLED}"
                        exit 1
                      fi
            - run:
                  name: Display Deployment Errors
                  command: cat deployment.log
                  when: on_fail
            - run:
                  name: Check if upgrader failed
                  command: kubectl logs -l "job-name=pim-upgrader" --namespace=${TYPE}-${INSTANCE_NAME}
                  when: on_fail
            - run:
                  name: Prepare infrastructure artifacts
                  command: make -C deployments/ prepare-infrastructure-artifacts
                  when: on_fail
            - store_artifacts:
                  path: ~/artifacts/infra
            - store_artifacts:
                  path: deployment.log
                  destination: test_upgrade_from_srnt_customer_db.log
            - run:
                  name: Remove env on kubernetes
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                  when: on_fail
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

    ##################
    # Releases       #
    ##################
    release:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Rename release if not on master
                  command: |
                      if [ "${CIRCLE_BRANCH}" != "master" ]; then
                          echo export RELEASE_NAME="RC-${RELEASE_NAME}" >> $BASH_ENV
                      fi
            - run:
                  name: Push Terraform modules to GCS
                  command: |
                      BOTO_CONFIG=/dev/null gsutil -m cp -r gs://akecld-terraform-modules/${TYPE_LONG}-edition-dev/${IMAGE_TAG} gs://akecld-terraform-modules/${TYPE_LONG}-edition-dev/${RELEASE_NAME}
                      BOTO_CONFIG=/dev/null gsutil -m cp -r gs://akecld-terraform-modules/${TYPE_LONG}-edition-dev/${IMAGE_TAG} gs://akecld-terraform-modules/${TYPE_LONG}-edition/${RELEASE_NAME}
            - run:
                  name: Tag the Docker image with the definitive tag
                  command: |
                      OLD_IMAGE_TAG=${IMAGE_TAG} NEW_IMAGE_TAG=${RELEASE_NAME} make -C deployments/ release
            - run:
                  name: Show the definitive tag
                  command: |
                      echo "RELEASE_NAME=${RELEASE_NAME}"

    ##################
    # Deploy         #
    ##################
    deploy_srnt_helpdesk_environment:
        environment:
            <<: *envVarsDeployPreprod
        <<: *dockerJenkinsCloudDeployer
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_preprod
            - add_ssh_keys
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      INSTANCE_NAME="pimci-helpdesk"
                      PRODUCT_REFERENCE_TYPE="serenity_instance"
                      PRODUCT_REFERENCE_CODE="serenity_${ENV_NAME}"
                      ACTIVATE_MONITORING=true

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV
                      echo export ACTIVATE_MONITORING=${ACTIVATE_MONITORING} >> $BASH_ENV

                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Setup key for Jenkins
                  command: |
                      ssh-keyscan github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - run:
                  name: Jenkins Upgrade
                  command: |
                      VERSION_INSTALLED=$(helm3 get values ${TYPE}-${INSTANCE_NAME} -n ${TYPE}-${INSTANCE_NAME} | yq r - 'image.pim.tag')
                      if [[ "${VERSION_INSTALLED}" == "${RELEASE_TO_DEPLOY}" ]]; then
                        echo "PIM already at the latest release"
                        echo "No need to upgrade"
                      else
                        echo "Need to upgrade the PIM to the latest release"
                        IMAGE_TAG=${RELEASE_TO_DEPLOY} OPERATIONS_TOOLS_BRANCH=master make -C deployments/ upgrade-instance
                      fi
            - run:
                  name: Communicate
                  command: |
                      IMAGE_TAG=${RELEASE_TO_DEPLOY} make -C deployments/ slack_helpdesk

    deploy_grth_helpdesk_environment:
        environment:
            <<: *envVarsDeployPreprod
        <<: *dockerJenkinsCloudDeployer
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_preprod
            - add_ssh_keys
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="grth"
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^growth-v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      INSTANCE_NAME="pimci-helpdesk-ge"
                      PRODUCT_REFERENCE_TYPE="growth_edition_instance"
                      PRODUCT_REFERENCE_CODE="growth_edition_${ENV_NAME}"
                      ACTIVATE_MONITORING=true

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV
                      echo export ACTIVATE_MONITORING=${ACTIVATE_MONITORING} >> $BASH_ENV
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Setup key for Jenkins
                  command: |
                      ssh-keyscan github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - run:
                  name: Jenkins Upgrade
                  command: |
                      VERSION_INSTALLED=$(helm3 get values ${TYPE}-${INSTANCE_NAME} -n ${TYPE}-${INSTANCE_NAME} | yq r - 'image.pim.tag')
                      if [[ "${VERSION_INSTALLED}" == "${RELEASE_TO_DEPLOY}" ]]; then
                        echo "PIM already at the latest release"
                        echo "No need to upgrade"
                      else
                        echo "Need to upgrade the PIM to the latest release"
                        IMAGE_TAG=${RELEASE_TO_DEPLOY} OPERATIONS_TOOLS_BRANCH=master make -C deployments/ upgrade-instance
                      fi
            - run:
                  name: Communicate
                  command: |
                      IMAGE_TAG=${RELEASE_TO_DEPLOY} make -C deployments/ slack_helpdesk

    deploy_pm_environment:
        environment:
            <<: *envVarsDeployPreprod
        <<: *dockerJenkinsCloudDeployer
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_preprod
            - add_ssh_keys
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      INSTANCE_NAME="pimci-pm"
                      PRODUCT_REFERENCE_TYPE="serenity_instance"
                      PRODUCT_REFERENCE_CODE="serenity_${ENV_NAME}"
                      ACTIVATE_MONITORING=true

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV
                      echo export ACTIVATE_MONITORING=${ACTIVATE_MONITORING} >> $BASH_ENV

                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Setup key for Jenkins
                  command: |
                      ssh-keyscan github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - run:
                  name: Jenkins Upgrade
                  command: |
                      VERSION_INSTALLED=$(helm3 get values ${TYPE}-${INSTANCE_NAME} -n ${TYPE}-${INSTANCE_NAME} | yq r - 'image.pim.tag')
                      if [[ "${VERSION_INSTALLED}" == "${RELEASE_TO_DEPLOY}" ]]; then
                        echo "PIM already at the latest release"
                        echo "No need to upgrade"
                      else
                        echo "Need to upgrade the PIM to the latest release"
                        IMAGE_TAG=${RELEASE_TO_DEPLOY} OPERATIONS_TOOLS_BRANCH=master make -C deployments/ upgrade-instance
                      fi

    deploy_bh_environment:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            CLUSTER_NEXT:
                type: boolean
                default: true
        environment:
            <<: *envVarsDeployDev
        <<: *dockerJenkinsCloudDeployer
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - when:
                  condition:
                      equal: [true, << parameters.CLUSTER_NEXT >> ]
                  steps:
                      - modify_cluster
            - set_gcloud_config_dev
            - add_ssh_keys
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      INSTANCE_NAME="bh-ref-instance"
                      PRODUCT_REFERENCE_TYPE="serenity_instance"
                      PRODUCT_REFERENCE_CODE="serenity_${ENV_NAME}"
                      ACTIVATE_MONITORING=true

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV
                      echo export ACTIVATE_MONITORING=${ACTIVATE_MONITORING} >> $BASH_ENV

                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Setup key for Jenkins
                  command: |
                      ssh-keyscan github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - run:
                  name: Jenkins Upgrade
                  command: |
                      VERSION_INSTALLED=$(helm3 get values ${TYPE}-${INSTANCE_NAME} -n ${TYPE}-${INSTANCE_NAME} | yq r - 'image.pim.tag')
                      if [[ "${VERSION_INSTALLED}" == "${RELEASE_TO_DEPLOY}" ]]; then
                        echo "PIM already at the latest release"
                        echo "No need to upgrade"
                      else
                        echo "Need to upgrade the PIM to the latest release"
                        IMAGE_TAG=${RELEASE_TO_DEPLOY} OPERATIONS_TOOLS_BRANCH=master make -C deployments/ upgrade-instance
                      fi

    deploy_pr_environment:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="<<parameters.PRODUCT_TYPE>>"
                      INSTANCE_NAME_PREFIX=pimci-pr
                      if [[ "${TYPE}" == "grth" ]]; then
                          INSTANCE_NAME_PREFIX=pimci-pr-ge
                      fi
                      if [[ "${TYPE}" == "tria" ]]; then
                          INSTANCE_NAME_PREFIX=pimci-pr-ft
                      fi
                      INSTANCE_NAME=${INSTANCE_NAME_PREFIX}-${CIRCLE_PULL_REQUEST##*/}
                      ACTIVATE_MONITORING=true

                      echo export IMAGE_TAG=${IMAGE_TAG} >> $BASH_ENV
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV
                      echo export ACTIVATE_MONITORING=${ACTIVATE_MONITORING} >> $BASH_ENV

                      echo "Instance name prefix: ${INSTANCE_NAME_PREFIX}"
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Image tag: ${IMAGE_TAG}"
            - run:
                  name: DATADOG deployment Livetail logs page
                  command: echo "https://app.datadoghq.eu/logs/livetail?query=kube_namespace%3A${TYPE}-${INSTANCE_NAME}"
            - run:
                  name: Check Circle CI PR
                  command: |
                      if [[ ${CIRCLE_PULL_REQUEST##*/} == "" ]]; then echo "ERROR : CIRCLE_PULL_REQUEST is empty."; exit 1;fi
                      echo "This environment will be available at https://${INSTANCE_NAME}.dev.cloud.akeneo.com once deployed :)"
            - run:
                  name: Deploy PR environment
                  command: |
                      NS=${TYPE}-${INSTANCE_NAME} PHASE=install bash deployments/bin/deployments_poll_up.sh 2>&1 >> deployment.log &
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      make -C deployments/ deploy-instance
                      make -C deployments/ commit-instance
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export INSTANCE_NAME="${INSTANCE_NAME}" >> persisted_env_vars
                      echo export INSTANCE_NAME_PREFIX="${INSTANCE_NAME_PREFIX}" >> persisted_env_vars
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars
            - run:
                  name: Prepare infrastructure artifacts
                  command: make -C deployments/ prepare-infrastructure-artifacts
                  when: on_fail
            - run:
                  name: Remove env on kubernetes
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                  when: on_fail
            - store_artifacts:
                  path: ~/artifacts/infra

    ##################
    # Cleanup        #
    ##################
    delete_environments_hourly:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: ""
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - set_gcloud_config_dev
            - run:
                  name: Delete environments
                  no_output_timeout: 30m
                  command: |
                      TYPE="<<parameters.PRODUCT_TYPE>>"
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'

                      TYPE=${TYPE} make -C deployments/ delete_environments_hourly

    delete_pr_environment:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: ""
            INSTANCE_NAME:
                type: string
                default: ""
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "5f:7b:b3:cb:d4:3d:e2:c2:36:5f:9d:b4:87:86:5f:67"
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Delete environments
                  no_output_timeout: 30m
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}

    delete_expired_uptime_check:
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_dev
            - run:
                  name: Delete expired uptime checks
                  command:
                      make -C deployments/ delete_expired_uptime_check

    remove_unused_resources:
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerNext
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_dev
            - run:
                  name: Remove unused resources
                  command:
                      make -C deployments/ remove_unused_resources

    #########################
    # Deployment validation #
    #########################
    zdd_compliancy_diff:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            CHECK_AGAINST:
                type: string
                default: "top"
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - checkout
            - set_gcloud_config_dev
            - run:
                  name: Run the tool zdd_compliancy_checker
                  command: |
                      OPTIONS=""
                      if [ "<< parameters.CHECK_AGAINST >>" == "oldest" ]; then
                          OPTIONS="-o"
                      fi
                      VERSIONS_FILE=/tmp/zdd_versions.env
                      touch ${VERSIONS_FILE}
                      VERSIONS_FILE=${VERSIONS_FILE} TYPE=<<parameters.PRODUCT_TYPE>> bash deployments/bin/zdd_compliancy_checker.sh ${OPTIONS}
            - store_artifacts:
                  path: /tmp/zdd_versions.env
                  destination: versions
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - zdd_compliancy_checker

    zdd_compliancy_checker:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            CONTEXT:
                type: string
                default: "diff_infra"
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - checkout
            - run:
                  name: Run the tool zdd_compliancy_checker
                  command:
                      TYPE=<<parameters.PRODUCT_TYPE>> ZCC_CONTEXT=diff_<<parameters.CONTEXT>> bash deployments/bin/zdd_compliancy_checker.sh

    configure_deployment_e2e_validation:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            PFID:
                type: string
                default: "srnt-c3po"
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - checkout
            - install_yq
            - run:
                  name: Configure cypress deployment validation for <<parameters.PRODUCT_TYPE>>
                  command: |
                      CURRENT_TIME=$(date +%s)
                      LAST_HOUR_TIME=$(( CURRENT_TIME - 60*60 ))
                      VERSION=$(curl --location -s -g -H "Content-Type: application/json" -H "DD-API-KEY: ${DATADOG_API_KEY}" -H "DD-APPLICATION-KEY: ${DATADOG_APP_KEY}" --request GET "https://api.datadoghq.eu/api/v1/query?from=${LAST_HOUR_TIME}&to=${CURRENT_TIME}&query=sum:kubernetes.containers.running{project:akecld-saas-demo,short_image:pim-enterprise-dev,app:pim,component:pim-web,type:<<parameters.PRODUCT_TYPE>>,pfid:<<parameters.PFID>>}%20by%20{image_tag}" | yq r - 'series[*].tag_set[0]' | sort | tail -n1 | cut -c11-)
                      TYPE=<<parameters.PRODUCT_TYPE>> LOGIN=${E2E_LOGIN_<<parameters.PRODUCT_TYPE>>} PASSWORD=${E2E_PASSWORD_<<parameters.PRODUCT_TYPE>>} VERSION=${VERSION} make -C deployments/ configure-cypress
            - persist_to_workspace:
                  root: /home/circleci
                  paths:
                      - project

    list_production_version:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
        docker:
            - image: cimg/base:2021.12
        resource_class: small
        steps:
            - run:
                  name: Versions in production
                  command: |
                      CURRENT_TIME=$(date +%s)
                      LAST_HOUR_TIME=$(( CURRENT_TIME - 60*60 ))
                      curl --location -s -g -H "Content-Type: application/json" -H "DD-API-KEY: ${DATADOG_API_KEY}" -H "DD-APPLICATION-KEY: ${DATADOG_APP_KEY}" --request GET "https://api.datadoghq.eu/api/v1/query?from=${LAST_HOUR_TIME}&to=${CURRENT_TIME}&query=top(sum:kubernetes.containers.running{project:akecld-saas-prod,short_image:pim-enterprise-dev,app:pim,component:pim-web,type:<<parameters.PRODUCT_TYPE>>}by{image_tag},%20100,%20%27max%27,%20%27desc%27)" | jq -r .series[].tag_set[0] | cut -c11- | sort

    ui_sanity_checks:
        parameters:
            SOURCE_PFID:
                type: string
                default: ""
        machine:
            image: *executor-machine
        resource_class: large
        steps:
            - attach_workspace:
                  at: ~/
            - restore_persisted_env_vars
            - run:
                  name: Copy docker-compose.override.yml.dist
                  command: cp .circleci/docker-compose.override.yml.dist docker-compose.override.yml
            - run:
                  name: Setup tests results folder and log folder
                  command: mkdir -p var/tests/phpspec var/tests/csfixer var/logs var/tests/screenshots ~/.cache/yarn ~/.composer ~/.cache/Cypress
            - run:
                  name: Modify the password for the sanity check
                  command: |
                      sed -i "s/Q7sKB5xP2ttc5KnqFPOF1BrOkTRSulmEj528BpJzbDcLbYSHU1/${PIM_ADMIN_PASSWORD}/g" tests/front/e2e/product/edit.js
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: |
                      sudo chown -R 1000:1000 ../project
                      sudo chown -R 1000:1000 ~/.composer
                      sudo chown -R 1000:1000 ~/.cache/yarn
                      sudo chown -R 1000:1000 ~/.cache/Cypress
            - run:
                  name: Build the latest Docker images
                  command: |
                      make php-image-dev
            - when:
                  condition:
                      not:
                          equal: [master, << pipeline.git.branch >>]
                  steps:
                      - run:
                            name: Update composer.json if same branch exists in CE
                            command: >
                                curl --output /dev/null --silent --head --fail
                                https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} &&
                                docker-compose run --rm -u www-data:www-data php php
                                /usr/local/bin/composer require "akeneo/pim-community-dev:dev-${CIRCLE_BRANCH}" --no-update ||
                                echo "No CE branch $CIRCLE_BRANCH found. I don't touch the composer.json file."
            - run:
                  name: Install back dependencies
                  command: make dependencies
            - run:
                  name: Launch Cypress
                  command: |
                      PIM_CONTEXT=test CYPRESS_defaultCommandTimeout=10000 CYPRESS_requestTimeout=10000 CYPRESS_responseTimeout=50000 CYPRESS_baseUrl=https://${INSTANCE_NAME}.dev.cloud.akeneo.com make end-to-end-front
            - store_artifacts:
                  path: cypress/screenshots
            - store_artifacts:
                  path: cypress/videos
            - store_artifacts:
                  path: var/logs

commands:
    set_gcloud_config_dev:
        description: "Authenticate on GCP services and set config and key to be used by other tools that need to authenticate."
        steps:
            - run:
                  name: "Set Gcloud Config."
                  shell: "/bin/bash -eo pipefail"
                  command: |
                      echo ${GCLOUD_SERVICE_KEY_DEV} | gcloud auth activate-service-account --key-file=-
                      gcloud config set project ${GOOGLE_PROJECT_ID}
                      gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
                      gcloud container clusters get-credentials ${GOOGLE_COMPUTE_ZONE} --project=${GOOGLE_PROJECT_ID} --zone=${GOOGLE_COMPUTE_ZONE}
                      echo ${GCLOUD_SERVICE_KEY_DEV} > ${HOME}/gcloud-service-key.json
                      echo 'export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"' >> $BASH_ENV
                      export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"
                      gcloud auth configure-docker --quiet

    set_gcloud_config_preprod:
        description: "Authenticate on GCP services and set config and key to be used by other tools that need to authenticate."
        steps:
            - run:
                  name: "Set Gcloud Config."
                  shell: "/bin/bash -eo pipefail"
                  command: |
                      echo ${GCLOUD_SERVICE_KEY_PREPROD} | gcloud auth activate-service-account --key-file=-
                      gcloud config set project ${GOOGLE_PROJECT_ID}
                      gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
                      gcloud container clusters get-credentials ${GOOGLE_COMPUTE_ZONE} --project=${GOOGLE_PROJECT_ID} --zone=${GOOGLE_COMPUTE_ZONE}
                      echo ${GCLOUD_SERVICE_KEY_PREPROD} > ${HOME}/gcloud-service-key.json
                      echo 'export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"' >> $BASH_ENV
                      export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"
                      gcloud auth configure-docker --quiet

    restore_persisted_env_vars:
        description: "Restore env vars that have been persisted by the previous job."
        steps:
            - run:
                  name: Restore persisted env vars
                  command: |
                      echo "Persisted env vars:"
                      cat persisted_env_vars
                      cat persisted_env_vars >> $BASH_ENV

    modify_cluster:
        description: "Modify cluster version if needed"
        steps:
            - run:
                  name: Modify cluster version
                  command: |
                      GOOGLE_COMPUTE_ZONE=${GOOGLE_COMPUTE_ZONE_NEXT}
                      CLUSTER_NAME=${CLUSTER_NAME_NEXT}
                      GOOGLE_CLUSTER_ZONE=${CLUSTER_NAME_NEXT}
                      echo export GOOGLE_COMPUTE_ZONE=${GOOGLE_COMPUTE_ZONE} >> $BASH_ENV
                      echo export CLUSTER_NAME=${CLUSTER_NAME} >> $BASH_ENV
                      echo export GOOGLE_CLUSTER_ZONE=${GOOGLE_CLUSTER_ZONE} >> $BASH_ENV

    install_yq:
        description: "Install yq"
        steps:
            - run:
                  name: Install yq
                  command: |
                      wget https://github.com/mikefarah/yq/releases/download/3.3.1/yq_linux_386
                      sudo mv yq_linux_386 /usr/local/bin/yq
                      echo "e7fa464149a450d068311a244f403757408a745b  /usr/local/bin/yq" > /tmp/checksum
                      sha1sum -c /tmp/checksum
                      sudo chmod +x /usr/local/bin/yq

    connector_bigcommerce_checkout_steps:
        description: "Checkout big commerce connector repository"
        steps:
            - run:
                  name: BIG COMMERCE CONNECTOR - Ensure to use the ssh key of akeneo-circle-ci account
                  command: |
                      ssh-add -D
                      ssh-add ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966
            - when:
                  condition:
                      not:
                          equal: [master, << pipeline.git.branch >>]
                  steps:
                      - run:
                            name: BIG COMMERCE CONNECTOR - Get connector branch if the same branch exists than the PIM one
                            command: |
                                if git ls-remote --exit-code --heads git@github.com:akeneo/bigcommerce-connector.git ${CIRCLE_BRANCH}; then
                                  CONNECTOR_BC_BRANCH=${CIRCLE_BRANCH}
                                else
                                  CONNECTOR_BC_BRANCH=master
                                fi
                                echo ${CONNECTOR_BC_BRANCH}
                                echo export CONNECTOR_BC_BRANCH=${CONNECTOR_BC_BRANCH} >> $BASH_ENV
            - when:
                  condition:
                      equal: [master, << pipeline.git.branch >>]
                  steps:
                      - run:
                            name: BIG COMMERCE CONNECTOR - Get last tagged connector version ready for production
                            command: |
                                CONNECTOR_BC_BRANCH=$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags git@github.com:akeneo/bigcommerce-connector.git 'v*' | tail -n1 | cut -d'/' -f3)

                                echo export CONNECTOR_BC_BRANCH=${CONNECTOR_BC_BRANCH} >> $BASH_ENV
            - run:
                  name: BIG COMMERCE CONNECTOR - Checkout BigCommerce Connector
                  command: |
                      mkdir -p tmp
                      echo ${CONNECTOR_BC_BRANCH}
                      git clone --branch $CONNECTOR_BC_BRANCH git@github.com:akeneo/bigcommerce-connector.git tmp/build-connector
                      cd tmp/build-connector
                      echo ${CONNECTOR_BC_BRANCH} > back/VERSION
                      pwd
                      echo `git rev-parse --short HEAD`

    change_pim_onboarder_branch_steps:
        description: "Change Onboarder dependency if same branch exists"
        steps:
            - when:
                  condition:
                      not:
                          equal: [master, << pipeline.git.branch >>]
                  steps:
                      - run:
                            name: Update composer.json if same branch exists in PIM Onboarder for EE
                            command: |
                                curl -H "Authorization: token ${GITHUB_TOKEN}" \
                                    -H 'Accept: application/vnd.github.v3.raw' \
                                    --output /dev/null --silent --head --fail \
                                    -L https://api.github.com/repos/akeneo/pim-onboarder/contents/README.md?ref=${CIRCLE_BRANCH} && \
                                    ONBOARDER_BRANCH="dev-${CIRCLE_BRANCH}" || ONBOARDER_BRANCH="dev-master"
                                    echo "Update Onboarder dependencie to branch ${ONBOARDER_BRANCH}"
                                    sed -i "s#akeneo/pim-onboarder\": \"^5.0.0#akeneo/pim-onboarder\": \"${ONBOARDER_BRANCH}#" composer.json
