orbs:
    slack: circleci/slack@3.4.2
    cypress: cypress-io/cypress@1

executors:
  cypress-legacy-with-chrome:
    docker:
      - image: 'cypress/included:7.6.0'
    resource_class: large

workflows:
    on_demand_deployment_validation:
        when:
            not:
                equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        jobs:
            - deployment_validation:
                  name: "Start test ?"
                  type: approval
                  filters:
                      branches:
                          only:
                              - master
            - cypress/install:
                  name: "Cypress install"
                  install-command: npm install
                  working_directory: ./deployments/test/e2e/
                  cache-key: 'cache-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}'
                  requires:
                      - "Start test ?"
            - configure_deployment_e2e_validation:
                  name: "[srnt] Configure cypress"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          PFID: ["srnt-c3po"]
                  requires:
                      - "Cypress install"
            - configure_deployment_e2e_validation:
                  name: "[grth] Configure cypress"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth"]
                          PFID: ["grth-r2d2"]
                  requires:
                      - "Cypress install"
            - cypress/run:
                  name: "[srnt] Post deployment e2e validation"
                  executor: cypress-legacy-with-chrome
                  browser: chrome
                  store_artifacts: true
                  post-checkout:
                      - run: cp -R ~/deployments ~/project
                  attach-workspace: true
                  config-file: ./config/cypress.srnt.json
                  working_directory: deployments/test/e2e
                  cache-key: 'cache-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}'
                  no-workspace: true
                  requires:
                      - "[srnt] Configure cypress"
            - cypress/run:
                  name: "[grth] Post deployment e2e validation"
                  executor: cypress-legacy-with-chrome
                  browser: chrome
                  store_artifacts: true
                  post-checkout:
                      - run: cp -R ~/deployments ~/project
                  attach-workspace: true
                  config-file: ./config/cypress.grth.json
                  working_directory: deployments/test/e2e
                  cache-key: 'cache-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}'
                  no-workspace: true
                  requires:
                      - "[grth] Configure cypress"

    on_demand_compliancy_checker:
        when:
            not:
                equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        jobs:
            - ready_to_build?:
                  type: approval
                  filters:
                      branches:
                          only:
                              - master
            - rolling_update_compliancy_diff:
                  name: "[<< matrix.PRODUCT_TYPE >>][top] Get ZDD compliancy files"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                          CHECK_AGAINST: ["top"]
                  requires:
                      - ready_to_build?
            - rolling_update_compliancy_checker:
                  name: "[<< matrix.PRODUCT_TYPE >>][top][<< matrix.CONTEXT >>] Check ZDD compliancy"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                          CONTEXT: ["infra", "db"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>][top] Get ZDD compliancy files"
            - list_production_version:
                  name: "[<< matrix.PRODUCT_TYPE >>] Versions currently in production"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                  requires:
                      - ready_to_build?
            - execute_compliancy_check:
                  type: approval
                  name: "[<< matrix.PRODUCT_TYPE >>] Execute compliancy check on oldest version"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Versions currently in production"
            - rolling_update_compliancy_diff:
                  name: "[<< matrix.PRODUCT_TYPE >>][<< matrix.CHECK_AGAINST >>] Get ZDD compliancy files"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                          CHECK_AGAINST: ["oldest"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Execute compliancy check on oldest version"
            - rolling_update_compliancy_checker:
                  name: "[<< matrix.PRODUCT_TYPE >>][oldest][<< matrix.CONTEXT >>] Check ZDD compliancy"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                          CONTEXT: ["infra", "db"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>][oldest] Get ZDD compliancy files"
