envVarsDeployDev: &envVarsDeployDev
envVarsDeployPreprod: &envVarsDeployPreprod
dockerJenkinsCloudDeployer: &dockerJenkinsCloudDeployer

jobs:
    deploy_srnt_helpdesk_environment:
        environment:
            <<: *envVarsDeployPreprod
        <<: *dockerJenkinsCloudDeployer
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_preprod
            - add_ssh_keys
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      INSTANCE_NAME="pimci-helpdesk"
                      PRODUCT_REFERENCE_TYPE="serenity_instance"
                      PRODUCT_REFERENCE_CODE="serenity_${ENV_NAME}"

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV

                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - show_datadog_logs_links:
                  pfid: ${TYPE}-${INSTANCE_NAME}
            - run:
                  name: Setup key for Jenkins
                  command: |
                      ssh-keyscan github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_ee73a1e4ef57139ecfd323fbe2c1d792 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - run:
                  name: Jenkins Upgrade
                  command: |
                      VERSION_INSTALLED=$(helm3 get values ${TYPE}-${INSTANCE_NAME} -n ${TYPE}-${INSTANCE_NAME} | yq r - 'image.pim.tag')
                      if [[ "${VERSION_INSTALLED}" == "${RELEASE_TO_DEPLOY}" ]]; then
                        echo "PIM already at the latest release"
                        echo "No need to upgrade"
                      else
                        echo "Need to upgrade the PIM to the latest release"
                        IMAGE_TAG=${RELEASE_TO_DEPLOY} OPERATIONS_TOOLS_BRANCH=master make -C deployments/ upgrade-instance
                      fi
            - get_datadog_migration_logs:
                  pfid: ${TYPE}-${INSTANCE_NAME}
            - store_artifacts:
                  path: /tmp/migration-logs.json
                  destination: migration-logs.json
            - run:
                  name: Communicate
                  command: |
                      IMAGE_TAG=${RELEASE_TO_DEPLOY} make -C deployments/ slack_helpdesk

    deploy_grth_helpdesk_environment:
        environment:
            <<: *envVarsDeployPreprod
        <<: *dockerJenkinsCloudDeployer
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_preprod
            - add_ssh_keys
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="grth"
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^growth-v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      INSTANCE_NAME="pimci-helpdesk-ge"
                      PRODUCT_REFERENCE_TYPE="growth_edition_instance"
                      PRODUCT_REFERENCE_CODE="growth_edition_${ENV_NAME}"

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - show_datadog_logs_links:
                  pfid: ${TYPE}-${INSTANCE_NAME}
            - run:
                  name: Setup key for Jenkins
                  command: |
                      ssh-keyscan github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_ee73a1e4ef57139ecfd323fbe2c1d792 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - run:
                  name: Jenkins Upgrade
                  command: |
                      VERSION_INSTALLED=$(helm3 get values ${TYPE}-${INSTANCE_NAME} -n ${TYPE}-${INSTANCE_NAME} | yq r - 'image.pim.tag')
                      if [[ "${VERSION_INSTALLED}" == "${RELEASE_TO_DEPLOY}" ]]; then
                        echo "PIM already at the latest release"
                        echo "No need to upgrade"
                      else
                        echo "Need to upgrade the PIM to the latest release"
                        IMAGE_TAG=${RELEASE_TO_DEPLOY} OPERATIONS_TOOLS_BRANCH=master make -C deployments/ upgrade-instance
                      fi
            - get_datadog_migration_logs:
                  pfid: ${TYPE}-${INSTANCE_NAME}
            - store_artifacts:
                  path: /tmp/migration-logs.json
                  destination: migration-logs.json
            - run:
                  name: Communicate
                  command: |
                      IMAGE_TAG=${RELEASE_TO_DEPLOY} make -C deployments/ slack_helpdesk

    deploy_pm_environment:
        environment:
            <<: *envVarsDeployPreprod
        <<: *dockerJenkinsCloudDeployer
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - set_gcloud_config_preprod
            - add_ssh_keys
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      INSTANCE_NAME="pimci-pm"
                      PRODUCT_REFERENCE_TYPE="serenity_instance"
                      PRODUCT_REFERENCE_CODE="serenity_${ENV_NAME}"

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV

                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - show_datadog_logs_links:
                  pfid: ${TYPE}-${INSTANCE_NAME}
            - run:
                  name: Setup key for Jenkins
                  command: |
                      ssh-keyscan github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_ee73a1e4ef57139ecfd323fbe2c1d792 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - run:
                  name: Jenkins Upgrade
                  command: |
                      VERSION_INSTALLED=$(helm3 get values ${TYPE}-${INSTANCE_NAME} -n ${TYPE}-${INSTANCE_NAME} | yq r - 'image.pim.tag')
                      if [[ "${VERSION_INSTALLED}" == "${RELEASE_TO_DEPLOY}" ]]; then
                        echo "PIM already at the latest release"
                        echo "No need to upgrade"
                      else
                        echo "Need to upgrade the PIM to the latest release"
                        IMAGE_TAG=${RELEASE_TO_DEPLOY} OPERATIONS_TOOLS_BRANCH=master make -C deployments/ upgrade-instance
                      fi
            - get_datadog_migration_logs:
                  pfid: ${TYPE}-${INSTANCE_NAME}
            - store_artifacts:
                  path: /tmp/migration-logs.json
                  destination: migration-logs.json

    deploy_bh_environment:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "srnt"
            CLUSTER_NEXT:
                type: boolean
                default: true
        environment:
            <<: *envVarsDeployDev
        <<: *dockerJenkinsCloudDeployer
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - when:
                  condition:
                      equal: [true, << parameters.CLUSTER_NEXT >> ]
                  steps:
                      - modify_cluster
            - set_gcloud_config_dev
            - add_ssh_keys
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      RELEASE_TO_DEPLOY=$(gcloud container images list-tags eu.gcr.io/akeneo-cloud/pim-enterprise-dev --filter="tags~^v[0-9]{14}$" --sort-by="~tags" --limit=1 --format="value(tags)")
                      INSTANCE_NAME="bh-ref-instance"
                      PRODUCT_REFERENCE_TYPE="serenity_instance"
                      PRODUCT_REFERENCE_CODE="serenity_${ENV_NAME}"

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export RELEASE_TO_DEPLOY=${RELEASE_TO_DEPLOY} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV

                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Release to deploy: ${RELEASE_TO_DEPLOY}"
            - show_datadog_logs_links:
                  pfid: ${TYPE}-${INSTANCE_NAME}
            - run:
                  name: Setup key for Jenkins
                  command: |
                      ssh-keyscan github.com >> ~/.ssh/known_hosts
                      echo '' > /root/.ssh/config #clean github exclusions automatically added by circleci
                      REPO_TO_ADD=github.com KEY_TO_ADD=/root/.ssh/id_rsa_ee73a1e4ef57139ecfd323fbe2c1d792 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=cloud-customers-dev KEY_TO_ADD=/root/.ssh/id_rsa_5f7bb3cbd43de2c2365f9db487865f67 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=jenkins-k8s-utils KEY_TO_ADD=/root/.ssh/id_rsa_2c6118646e36aa7476fd5e6b735923c6 bash deployments/bin/add-deploy-key.sh
                      REPO_TO_ADD=operation-tools KEY_TO_ADD=/root/.ssh/id_rsa_9871a29f0e320bbf564ab34189c7b429 bash deployments/bin/add-deploy-key.sh
            - run:
                  name: Jenkins Upgrade
                  command: |
                      VERSION_INSTALLED=$(helm3 get values ${TYPE}-${INSTANCE_NAME} -n ${TYPE}-${INSTANCE_NAME} | yq r - 'image.pim.tag')
                      if [[ "${VERSION_INSTALLED}" == "${RELEASE_TO_DEPLOY}" ]]; then
                        echo "PIM already at the latest release"
                        echo "No need to upgrade"
                      else
                        echo "Need to upgrade the PIM to the latest release"
                        IMAGE_TAG=${RELEASE_TO_DEPLOY} OPERATIONS_TOOLS_BRANCH=master make -C deployments/ upgrade-instance
                      fi
            - get_datadog_migration_logs:
                pfid: ${TYPE}-${INSTANCE_NAME}
            - store_artifacts:
                path: /tmp/migration-logs.json
                destination: migration-logs.json
