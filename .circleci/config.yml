version: 2.1
jobs:
  setup:
    parameters:
        is_pull_request:
            type: boolean
            default: true
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Copy docker-compose.override.yml.dist
          command: cp .circleci/docker-compose.override.yml.dist docker-compose.override.yml
      - run:
          name: Pull and build the latest Docker images
          command: |
              make php-image-dev
              docker save -o php-pim-image.tar akeneo/pim-dev/php:7.3
      - run:
          name: Setup tests results folder and log folder
          command: mkdir -p var/tests/phpunit var/tests/behat var/tests/phpspec var/tests/csfixer var/logs var/tests/screenshots ~/.cache/yarn ~/.composer
      - run:
          name: Setup behat
          command: make behat.yml
      - run:
          name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
          command: |
              sudo chown -R 1000:1000 ../project
              sudo chown -R 1000:1000 ~/.composer
              sudo chown -R 1000:1000 ~/.cache/yarn
      - run:
          name: Start containers
          command: make up
      - run:
          name: Change owner on project dir after restoring cache
          command: sudo chown -R 1000:1000 ../project
      - when:
            condition: << parameters.is_pull_request >>
            steps:
                - run:
                      name: Update composer.json if same branch exists in CE
                      command: >
                          curl --output /dev/null --silent --head --fail
                          https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} &&
                          docker-compose exec -u www-data:www-data fpm php
                          /usr/local/bin/composer require "akeneo/pim-community-dev:dev-${CIRCLE_BRANCH}" --no-update ||
                          echo "No CE branch $CIRCLE_BRANCH found. I don't touch the composer.json file."
      - run:
          name: Install back dependencies
          command: make vendor
      - run:
          name: Install front dependencies
          command: make node_modules
      - run:
          name: Install asset
          command: make assets
      - run:
          name: Build CSS
          command: make css
      - run:
          name: Build Javascript
          command: |
              make javascript-test
              make javascript-dev
      - run:
            name: Change owner on project dir after installing when there is no cache
            command: sudo chmod -R 777 ../project
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  back_static_and_acceptance:
      machine:
          image: ubuntu-1604:201903-01
          docker_layer_caching: true
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Load archived docker image
                command: docker load -i php-pim-image.tar
          - run:
                name: Generate dev cache for Symfony's Phpstan extension
                command: APP_ENV=dev make clean-back
          - run:
                name: PhpSpec
                command: docker-compose run -u www-data --rm -T php vendor/bin/phpspec run --format=junit > var/tests/phpspec/specs.xml
          - run:
                name: Find non executed PhpSpec files
                command: vendor/akeneo/pim-community-dev/.circleci/find_non_executed_phpspec.sh
          - run:
                name: PhpSpec (Reference Entities)
                command: docker-compose run -u www-data --rm php vendor/bin/phpspec run -c src/Akeneo/ReferenceEntity/tests/back/phpspec.yml.dist --no-interaction -vvv
          - run:
                name: PhpSpec (Asset Manager)
                command: docker-compose run -u www-data --rm php vendor/bin/phpspec run -c src/Akeneo/AssetManager/tests/back/phpspec.yml.dist --no-interaction -vvv
          - run:
                name: PhpCsFixer
                command: docker-compose run -u www-data --rm -T php vendor/bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php
                when: always
          - run:
                name: PhpCoupling Detector
                command: make coupling
                when: always
          - run:
                name: PHPStan (Reference Entities)
                command: docker-compose run -u www-data --rm -T php vendor/bin/phpstan analyse --configuration src/Akeneo/ReferenceEntity/tests/back/phpstan.neon.dist
                when: always
          - run:
                name: PHPStan (Asset Manager)
                command: docker-compose run -u www-data --rm -T php vendor/bin/phpstan analyse --configuration src/Akeneo/AssetManager/tests/back/phpstan.neon.dist
                when: always
          - run:
                name: PHPStan
                command: docker-compose run -u www-data --rm -T php vendor/bin/phpstan analyse src/Akeneo/Pim -l 1
                when: always
          - run:
                name: Check Pullup
                command: docker-compose run -u www-data --rm -T php vendor/akeneo/pim-community-dev/bin/check-pullup
                when: always
          - run:
                name: Acceptance back
                command: docker-compose run -u www-data --rm php vendor/bin/behat --strict -p acceptance -vv
                when: always
          - run:
                name: Acceptance back (Reference Entities)
                command: docker-compose run -u www-data --rm php vendor/bin/behat --config src/Akeneo/ReferenceEntity/tests/back/behat.yml.dist --no-interaction --format=progress
                when: always
          - run:
                name: Acceptance back (Asset Manager)
                command: docker-compose run -u www-data --rm php vendor/bin/behat --config src/Akeneo/AssetManager/tests/back/behat.yml.dist --no-interaction --format=progress
                when: always
          - store_test_results:
                path: var/tests
          - store_artifacts:
                path: var/tests
          - store_artifacts:
                path: var/logs

  back_phpunit:
      machine:
          image: ubuntu-1604:201903-01
          docker_layer_caching: true
      parallelism: 10
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage' make up
                    vendor/akeneo/pim-community-dev/.circleci/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PHPunit Integration
                command: |
                    TESTFILES=$(docker-compose run -u www-data --rm -T php php vendor/akeneo/pim-community-dev/.circleci/find_phpunit.php -c . --testsuite PIM_Integration_Test | circleci tests split --split-by=timings)
                    vendor/akeneo/pim-community-dev/.circleci/run_phpunit.sh . $TESTFILES
          - run:
                name: PHPunit Integration (Reference Entities)
                command: |
                    TESTFILES=$(docker-compose run -u www-data --rm -T php php vendor/akeneo/pim-community-dev/.circleci/find_phpunit.php -c src/Akeneo/ReferenceEntity/tests/back | circleci tests split --split-by=timings)
                    vendor/akeneo/pim-community-dev/.circleci/run_phpunit.sh src/Akeneo/ReferenceEntity/tests/back $TESTFILES
          - run:
                name: PHPunit Integration (Asset Manager)
                command: |
                    TESTFILES=$(docker-compose run -u www-data --rm -T php php vendor/akeneo/pim-community-dev/.circleci/find_phpunit.php -c src/Akeneo/AssetManager/tests/back | circleci tests split --split-by=timings)
                    vendor/akeneo/pim-community-dev/.circleci/run_phpunit.sh src/Akeneo/AssetManager/tests/back $TESTFILES
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PHPunit End to end
                command: |
                    TESTFILES=$(docker-compose run -u www-data --rm -T php php vendor/akeneo/pim-community-dev/.circleci/find_phpunit.php --testsuite End_to_End | circleci tests split --split-by=timings)
                    vendor/akeneo/pim-community-dev/.circleci/run_phpunit.sh . $TESTFILES
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

  back_behat_legacy:
    machine:
        image: ubuntu-1604:201903-01
        docker_layer_caching: true
    parallelism: 20
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Get Behat Suite name to run
          command: |
            TESTSUITE=$(echo $CIRCLE_BRANCH | sed -e 's/^.*-\([^-]*\)$/\1/g')
            if ! [[ $TESTSUITE =~ ^(weasel|chipmunk|raccoon|insights)$ ]] ; then
              TESTSUITE="all"
            fi
            echo "Behat Suite to run: "$TESTSUITE
            echo "export TESTSUITE=$TESTSUITE" >> $BASH_ENV
      - run:
          name: Change owner on project dir in order to archive the project into the workspace
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            docker load -i php-pim-image.tar
            APP_ENV=behat C='fpm mysql elasticsearch httpd object-storage selenium' make up
            vendor/akeneo/pim-community-dev/.circleci/wait_docker_up.sh
      - run:
          name: Install database
          command: APP_ENV=behat make database
      - run:
          name: Non critical Behat
          command: |
            TESTFILES=$(docker-compose run -u www-data --rm -T php vendor/bin/behat --list-scenarios -p legacy -s $TESTSUITE | circleci tests split --split-by=timings)
            vendor/akeneo/pim-community-dev/.circleci/run_behat.sh $TESTSUITE $TESTFILES
      - run:
          name: Critical Behat
          command: |
            TESTFILES=$(docker-compose run -u www-data --rm -T php vendor/bin/behat --list-scenarios -p legacy -s critical | circleci tests split --split-by=timings)
            vendor/akeneo/pim-community-dev/.circleci/run_behat.sh critical $TESTFILES
      - run:
          name: Gather Junit test result files in the same directory to improve the render of failing tests
          command: |
              set -e
              cd var/tests/behat
              sudo chmod -R 777 .
              for subdir in */*; do mv "${subdir}" "${subdir/\//_}"; done
          when: always
      - store_test_results:
          path: var/tests/behat
      - store_artifacts:
          path: var/tests/behat
      - store_artifacts:
          path: var/logs
      - store_artifacts:
          path: var/tests/screenshots

  front_static_acceptance_and_integration:
      machine:
          image: ubuntu-1604:201903-01
          docker_layer_caching: true
      steps:
        - attach_workspace:
            at: ~/
        - run:
            name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
            command: sudo chown -R 1000:1000 ../project
        - run:
            name: Front linter
            command: docker-compose run --rm node yarn run lint
        - run:
            name: Front linter (Franklin Insights)
            command: |
                docker-compose run --rm node ./node_modules/.bin/tslint -c src/Akeneo/Pim/Automation/FranklinInsights/tslint.json src/Akeneo/Pim/Automation/FranklinInsights/**/*.{ts,tsx}
                docker-compose run --rm node ./node_modules/.bin/prettier --config src/Akeneo/Pim/Automation/FranklinInsights/.prettierrc.json --check src/Akeneo/Pim/Automation/FranklinInsights/**/*.{ts,tsx}
        - run:
            name: Front unit tests
            command: docker-compose run --rm node yarn run unit
        - run:
            name: Front acceptance tests
            command: MAX_RANDOM_LATENCY_MS=100 docker-compose run --rm node yarn run acceptance ./tests/features

  back_performance:
    machine:
        image: ubuntu-1604:201903-01
        docker_layer_caching: true
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            export ES_JAVA_OPTS='-Xms2g -Xmx2g'
            docker load -i php-pim-image.tar
            APP_ENV=behat C='fpm mysql httpd elasticsearch object-storage' make up
            vendor/akeneo/pim-community-dev/.circleci/wait_docker_up.sh
      - run:
          name: Run performance tests
          command: .circleci/run_performance_tests.sh
      - store_test_results:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/tests/phpunit

workflows:
  version: 2
  pull_request:
      jobs:
          - wait_for_user_approval:
                type: approval
                filters:
                    branches:
                        ignore:
                            - master
          - setup:
                requires:
                    - wait_for_user_approval
          - back_static_and_acceptance:
                requires:
                    - setup
          - front_static_acceptance_and_integration:
                requires:
                    - setup
          - back_phpunit:
                requires:
                    - back_static_and_acceptance
                    - front_static_acceptance_and_integration
          - back_behat_legacy:
                requires:
                    - back_phpunit

  nightly:
      triggers:
          - schedule:
                cron: "0 2 * * *"
                filters:
                    branches:
                        only:
                            - master
      jobs:
          - setup:
                is_pull_request: false
          - back_static_and_acceptance:
                requires:
                    - setup
          - front_static_acceptance_and_integration:
                requires:
                    - setup
          - back_phpunit:
                requires:
                    - back_static_and_acceptance
                    - front_static_acceptance_and_integration
          - back_behat_legacy:
                requires:
                    - back_phpunit
          - back_performance:
                requires:
                    - back_behat_legacy
