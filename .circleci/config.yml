version: 2.1
jobs:
  checkout:
    docker:
      - image: alpine/git
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  build_dev:
    parameters:
        is_pull_request:
            type: boolean
            default: true
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - attach_workspace:
            at: ~/
      - run:
          name: Copy docker-compose.override.yml.dist
          command: cp .circleci/docker-compose.override.yml.dist docker-compose.override.yml
      - run:
          name: Build the latest Docker images
          command: |
              make php-image-dev
              docker save -o php-pim-image.tar akeneo/pim-dev/php:7.3
      - run:
          name: Setup tests results folder and log folder
          command: mkdir -p var/tests/phpspec var/tests/csfixer var/logs var/tests/screenshots ~/.cache/yarn ~/.composer
      - run:
          name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
          command: |
              sudo chown -R 1000:1000 ../project
              sudo chown -R 1000:1000 ~/.composer
              sudo chown -R 1000:1000 ~/.cache/yarn
      - run:
          name: Change owner on project dir after restoring cache
          command: sudo chown -R 1000:1000 ../project
      - when:
            condition: << parameters.is_pull_request >>
            steps:
                - run:
                      name: Update composer.json if same branch exists in CE
                      command: >
                          curl --output /dev/null --silent --head --fail
                          https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} &&
                          docker-compose run --rm -u www-data:www-data php php
                          /usr/local/bin/composer require "akeneo/pim-community-dev:dev-${CIRCLE_BRANCH}" --no-update ||
                          echo "No CE branch $CIRCLE_BRANCH found. I don't touch the composer.json file."
      - run:
          name: Install back and front dependencies
          command: make dependencies
      - run:
          name: Check PIM requirements
          command: |
              C='mysql elasticsearch' make up
              vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
              make check-requirements
      - run:
          name: Install asset
          command: make assets
      - run:
          name: Build CSS
          command: make css
      - run:
          name: Build Javascript
          command: |
              make javascript-test
              make javascript-dev
      - run:
            name: Change owner on project dir after installing when there is no cache
            command: sudo chmod -R 777 ../project
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  test_back_static_and_acceptance:
      machine:
          image: ubuntu-1604:201903-01
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Load archived docker image
                command: docker load -i php-pim-image.tar
          - run:
                name: Check Pullup
                command: make check-pullup
                when: always
          - run:
                name: Analyzes source code to flag programming errors, bugs, stylistic errors, and suspicious constructs
                command: make lint-back
          - run:
                name: Code Coupling Detection
                command: make coupling-back
                when: always
          - run:
                name: Unit tests
                command: make unit-back
          - run:
                name: Acceptance tests
                command: make acceptance-back
                when: always
          - run:
                name: Acceptance back (Apps)
                command: docker-compose run -u www-data --rm php vendor/bin/behat --config vendor/akeneo/pim-community-dev/src/Akeneo/Apps/back/tests/Acceptance/behat.yml --no-interaction --format=progress --strict
                when: always
          - store_test_results:
                path: var/tests
          - store_artifacts:
                path: var/tests
          - store_artifacts:
                path: var/logs

  test_back_phpunit:
      machine:
          image: ubuntu-1604:201903-01
      parallelism: 10
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage' make up
                    vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PhpUnit Integration
                command: make integration-back
          - run:
                name: PhpUnit End to end
                command: make end-to-end-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

  back_behat_legacy:
    machine:
        image: ubuntu-1604:201903-01
    parallelism: 20
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Get Behat Suite name to run
          command: |
            TESTSUITE=$(echo $CIRCLE_BRANCH | sed -e 's/^.*-\([^-]*\)$/\1/g')
            if ! [[ $TESTSUITE =~ ^(weasel|chipmunk|raccoon|insights)$ ]] ; then
              TESTSUITE="all"
            fi
            echo "Behat Suite to run: "$TESTSUITE
            echo "export TESTSUITE=$TESTSUITE" >> $BASH_ENV
      - run:
          name: Change owner on project dir in order to archive the project into the workspace
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            docker load -i php-pim-image.tar
            APP_ENV=behat C='fpm mysql elasticsearch httpd object-storage selenium' make up
            vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
      - run:
          name: Install database
          command: APP_ENV=behat make database
      - run:
          name: Non critical Behat
          command: make end-to-end-legacy SUITE=$TESTSUITE
      - run:
          name: Gather Junit test result files in the same directory to improve the render of failing tests
          command: |
              set -e
              cd var/tests/behat
              sudo chmod -R 777 .
              for subdir in */*; do mv "${subdir}" "${subdir/\//_}"; done
          when: always
      - store_test_results:
          path: var/tests/behat
      - store_artifacts:
          path: var/tests/behat
      - store_artifacts:
          path: var/logs
      - store_artifacts:
          path: var/tests/screenshots

  test_front_static_acceptance_and_integration:
      machine:
          image: ubuntu-1604:201903-01
      steps:
        - attach_workspace:
            at: ~/
        - run:
              name: Create yarn cache folder
              command: mkdir -p  ~/.cache/yarn
        - run:
              name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
              command: sudo chown -R 1000:1000 ../project ~/.cache/yarn
        - run:
            name: Front linter
            command: make lint-front
        - run:
            name: Front unit tests
            command: make unit-front
        - run:
            name: Front acceptance tests
            command: make acceptance-front
        - run:
            name: Front integration tests
            command: make integration-front

  back_performance:
    machine:
        image: ubuntu-1604:201903-01
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            export ES_JAVA_OPTS='-Xms2g -Xmx2g'
            docker load -i php-pim-image.tar
            APP_ENV=test APP_DEBUG=false C='fpm mysql httpd elasticsearch object-storage blackfire' make up
            vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
      - run:
          name: Run performance tests
          command: APP_ENV=test .circleci/run_performance_tests.sh
      - store_test_results:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/logs

  build_prod:
      environment:
        GOOGLE_PROJECT_ID: "akecld-saas-dev"
        GOOGLE_COMPUTE_ZONE: "europe-west3-a"
        CLUSTER_NAME: "europe-west3-a"
      machine:
        image: ubuntu-1604:201903-01
      steps:
          - attach_workspace:
                at: ~/
          - run:
              name: Build prod PIM image
              command: |
                  echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
                  sudo apt-get update && sudo apt-get install apt-transport-https \
                                                              ca-certificates \
                                                              google-cloud-sdk
                  echo ${GCLOUD_SERVICE_KEY} | gcloud auth activate-service-account --key-file=-
                  gcloud config set project ${GOOGLE_PROJECT_ID}
                  gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
                  echo ${GCLOUD_SERVICE_KEY} > ${HOME}/gcloud-service-key.json
                  echo 'export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"' >> $BASH_ENV
                  gcloud auth configure-docker --quiet
                  IMAGE_TAG=$CIRCLE_SHA1 make php-image-prod
                  IMAGE_TAG=$CIRCLE_SHA1 make push-php-image-prod

  test_prod:
      machine:
          image: ubuntu-1604:201903-01
      steps:
          -   attach_workspace:
                  at: ~/
          -   run:
                  name: make test-prod
                  command: |
                      docker load -i pim-image-prod.tar
                      make test-prod

  release:
      machine:
          image: ubuntu-1604:201903-01
      steps:
          -   attach_workspace:
                  at: ~/
          - run:
              name: make release
              command: make release

  test_migrations:
      machine:
        image: ubuntu-1604:201903-01
      steps:
        -   attach_workspace:
                at: ~/
        -   run:
                name: Load php image
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='mysql elasticsearch object-storage' make up
                    vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
        -   run:
                name: Restore permissions on file
                command: git checkout -- .
        -   run:
                name: Change owner on project dir after restoring cache
                command: sudo chown -R 1000:1000 ../project/var
        -   run:
                name: Checkout master branch
                command: git checkout -b realmaster --track origin/master
        -   run:
                name: Clean cache
                command: APP_ENV=test make cache
        -   run:
                name: Install master database
                command: APP_ENV=test make database
        -   run:
                name: Checkout PR branch
                command: git checkout $CIRCLE_BRANCH
        -   run:
                name: Clean cache
                command: APP_ENV=test make cache
        -   run:
                name: Launch branch migrations
                command: docker-compose run -u www-data php bin/console doctrine:migrations:migrate --env=test --no-interaction
        -   run:
                name: Dump master with migrations database
                command: |
                    export $(cat .env)
                    docker-compose exec -T mysql mysqldump --no-data --skip-opt --skip-comments --password=$APP_DATABASE_PASSWORD --user=$APP_DATABASE_USER $APP_DATABASE_NAME > /tmp/dump_master_with_migrations.sql
        -   run:
                name: Install branch database
                command: APP_ENV=test make database
        -   run:
                name: Dump branch database
                command: |
                    export $(cat .env)
                    docker-compose exec -T mysql mysqldump --no-data --skip-opt --skip-comments --password=$APP_DATABASE_PASSWORD --user=$APP_DATABASE_USER $APP_DATABASE_NAME > /tmp/dump_master.sql
        -   run:
                name: Compare database master+PR migrations from database PR
                command: diff /tmp/dump_master_with_migrations.sql /tmp/dump_master.sql


workflows:
  version: 2
  pull_request:
      jobs:
          - wait_for_user_approval:
                type: approval
                filters:
                    branches:
                        ignore:
                            - master
          - checkout:
                requires:
                    - wait_for_user_approval
          - build_dev:
                requires:
                    - checkout
          - test_back_static_and_acceptance:
                requires:
                    - build_dev
          - test_front_static_acceptance_and_integration:
                requires:
                    - build_dev
          - test_migrations:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - test_back_phpunit:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - back_behat_legacy:
                requires:
                    - test_migrations
                    - test_back_phpunit

  nightly:
      triggers:
          - schedule:
                cron: "0 2 * * *"
                filters:
                    branches:
                        only:
                            - master
      jobs:
          - checkout
          - build_dev:
                is_pull_request: false
                requires:
                    - checkout
          - test_back_static_and_acceptance:
                requires:
                    - build_dev
          - test_front_static_acceptance_and_integration:
                requires:
                    - build_dev
          - test_back_phpunit:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - back_behat_legacy:
                requires:
                    - test_back_phpunit
          - back_performance:
                requires:
                    - back_behat_legacy
  deployment:
      triggers:
          - schedule:
                cron: "0 3 * * *"
                filters:
                    branches:
                        only:
                            - master
      jobs:
          - checkout
          - build_dev:
              requires:
                    - checkout
          - build_prod:
                requires:
                    - checkout
          - test_back_static_and_acceptance:
                requires:
                    - build_dev
          - test_front_static_acceptance_and_integration:
                requires:
                    - build_dev
          - test_back_phpunit:
                requires:
                    - build_dev
          - back_behat_legacy:
                requires:
                    - build_dev
          - test_migrations:
                requires:
                    - build_dev
          - test_prod:
                requires:
                    - build_prod
          - release:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
                    - test_back_phpunit
                    - back_behat_legacy
                    - test_prod
