#!groovy

String[] legacyFeatures = ["tests/legacy/features", "vendor/akeneo/pim-community-dev/tests/legacy/features"]
String ceBranch = "master"
String ceOwner = "akeneo"
String launchUnitTests = "yes"
String launchAcceptanceTests = "yes"
String launchIntegrationTests = "yes"
String launchEndToEndTests = "yes"
String verboseOutputs = "yes"
String slackChannel = ""
String tag = "eu.gcr.io/akeneo-ci/pim-enterprise-dev:${env.BRANCH_NAME}"

stage("Build") {
    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                string(defaultValue: 'master', description: 'Community Edition branch used for the build', name: 'ce_branch'),
                string(defaultValue: 'akeneo', description: 'Owner of the repository on GitHub', name: 'ce_owner'),
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run acceptance tests', name: 'launchAcceptanceTests'),
                choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run end to end tests (whole Legacy Behat suite)', name: 'launchEndToEndTests'),
                string(defaultValue: 'tests/legacy/features,vendor/akeneo/pim-community-dev/tests/legacy/features', description: 'Legacy end to end scenarios to run', name: 'legacyFeatures'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: '', description: 'Channel or user to notify (example : "#channel,@user")', name: 'slackChannel'),
            ])

            ceBranch = userInput['ce_branch']
            ceOwner = userInput['ce_owner']
            legacyFeatures = userInput['legacyFeatures'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            launchAcceptanceTests = userInput['launchAcceptanceTests']
            launchIntegrationTests = userInput['launchIntegrationTests']
            launchEndToEndTests = userInput['launchEndToEndTests']
            verboseOutputs = userInput['verboseOutputs']
            slackChannel = userInput['slackChannel']
        }
    }
    milestone 2

    pod(label: "build", containers: [
        containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud:latest", ttyEnabled: true, command: 'cat', resourceRequestCpu: '100m', resourceRequestMemory: '200Mi')
    ]) {container('docker') {
        checkout scm

        dir('packages/pim-community-dev') {
            checkout([$class: 'GitSCM',
                branches: [[name: ceBranch]],
                userRemoteConfigs: [[credentialsId: "github-credentials", url: "https://github.com/${ceOwner}/pim-community-dev.git"]]
            ])
        }

        sh "gcloud container builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag} ."
    }}
}

stage("Test") {
    try {
        parallel(
            // UNIT TESTS & MISC
            "back-php-coupling-detector": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/php-coupling-detector detect --config-file=.php_cd.php src"
            )},
            "back-phpspec": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && su -s /bin/sh www-data -c './vendor/bin/phpspec run --no-interaction --format=junit' > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "back-php-cs-fixer": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "front-grunt": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run lint"
            )},

            // ACCEPTANCE TESTS
            "front-acceptance": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run webpack-test && MAX_RANDOM_LATENCY_MS=100 yarn run acceptance /var/www/pim/vendor/akeneo/pim-community-dev/tests/features /var/www/pim/tests/features"
            )},
            "back-acceptance-ee": {queue(
                condition: launchAcceptanceTests.equals("yes"),
                verbose: (verboseOutputs == "yes"),
                container: tag,
                fetcher: {return pimBehatFetcher(profiles: ["acceptance"], features: ["tests/features", "vendor/akeneo/pim-community-dev/tests/features"])}
            )},

            // INTEGRATION TESTS
            "front-integration": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run webpack-test && yarn run integration"
            )},
            "back-legacy-integration-phpunit": {queue(
                condition: launchIntegrationTests.equals("yes"),
                container: tag,
                verbose: (verboseOutputs == "yes"),
                fetcher: {return pimIntegrationFetcher(testsuites: ["PIM_Integration_Test"])}
            )},

            // END TO END TESTS
            "legacy-end-to-end-behat": {queue(
                condition: launchEndToEndTests.equals("yes"),
                container: tag,
                verbose: (verboseOutputs == "yes"),
                fetcher: {return pimBehatFetcher(profiles: ["legacy", "acceptance"], features: legacyFeatures)}
            )}
        )
    } finally {
        notifySlack(slackChannel)
    }
}
