#!groovy
@Library("k8s-utils@2.x")

String[] editions = ["ce"]
String[] features = ["features"]
String launchUnitTests = "yes"
String launchIntegrationTests = "yes"
String launchEndToEndTests = "yes"
String verboseOutputs = "yes"
String slackChannel = ""
String tag = "eu.gcr.io/akeneo-ci/pim-community-dev:${env.BRANCH_NAME}"

stage("Build") {
    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run end to end tests (Behat)', name: 'launchEndToEndTests'),
                string(defaultValue: 'features,vendor/akeneo/pim-community-dev/features', description: 'End to end tests to run', name: 'features'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: '', description: 'Channel or user to notify (example : "#channel,@user")', name: 'slackChannel'),
                string(defaultValue: 'ee,ce', description: 'PIM edition the behat tests should run on (comma separated values)', name: 'editions'),
            ])

            editions = userInput['editions'].tokenize(',')
            features = userInput['features'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            launchIntegrationTests = userInput['launchIntegrationTests']
            launchEndToEndTests = userInput['launchEndToEndTests']
            verboseOutputs = userInput['verboseOutputs']
            slackChannel = userInput['slackChannel']
        }
    }
    milestone 2

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        parallel(
            "pim-ce": {
                pod {
                    container('docker') {
                        checkout scm

                        sh "cp .ci/Dockerfile Dockerfile"
                        sh "gcloud container builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag} ."
                    }
                }
            },
            "pim-ee": {
                if (editions.contains("ee")) {
                    pod {
                        container('docker') {
                            checkout([$class: 'GitSCM',
                                branches: [[name: '2.0']],
                                userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-enterprise-dev.git']]
                            ])

                            dir('packages/pim-community-dev') {
                                checkout scm
                            }

                            sh "cp .ci/Dockerfile Dockerfile"
                            sh "gcloud container builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag}-ee ."
                        }
                    }
                } else {
                    echo "Skipping Enterprise Edition matrix"
                }
            }
        )
    }
}

stage("Test") {
    try {
        parallel(
            "php-coupling-detector": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/php-coupling-detector detect --config-file=.php_cd.php src"
            )},
            "phpunit": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/phpunit -c app/phpunit.xml.dist --testsuite PIM_Unit_Test --log-junit %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "phpspec": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && su -s /bin/sh www-data -c './vendor/bin/phpspec run --format=junit' > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "php-cs-fixer": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "grunt": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run lint"
            )},
            "integration-ce": {queue(
                condition: launchIntegrationTests.equals("yes") && editions.contains("ce"),
                verbose: (verboseOutputs == "yes"),
                container: tag,
                containers: pimContainers(image: tag, selenium: false),
                fetcher: {return pimPhpunitFetcher(paths:["/var/www/pim/src", "/var/www/pim/tests"])},
                parallelism: 50
            )},
            "integration-ee": {queue(
                condition: launchIntegrationTests.equals("yes") && editions.contains("ee"),
                verbose: (verboseOutputs == "yes"),
                container: "${tag}-ee",
                containers: pimContainers(image: "${tag}-ee", selenium: false),
                fetcher: {return pimPhpunitFetcher(paths:["/var/www/pim/src", "/var/www/pim/vendor/akeneo/pim-community-dev/src", "/var/www/pim/vendor/akeneo/pim-community-dev/tests"])},
                parallelism: 50
            )},
            "behat-ce": {queue(
                condition: launchEndToEndTests.equals("yes") && editions.contains("ce"),
                verbose: (verboseOutputs == "yes"),
                container: tag,
                containers: pimContainers(image: tag),
                fetcher: {return pimBehatFetcher(hasToInstall: true, script: "cd /var/www/pim/ && vendor/bin/behat -p default --list-scenarios", features: features)}
            )},
            "behat-ee": {queue(
                condition: launchEndToEndTests.equals("yes") && editions.contains("ee"),
                verbose: (verboseOutputs == "yes"),
                container: "${tag}-ee",
                containers: pimContainers(image: "${tag}-ee"),
                fetcher: {return pimBehatFetcher(hasToInstall: true, script: "cd /var/www/pim/ && vendor/bin/behat -p default --list-scenarios", features: features)}
            )}
        )
    } finally {
        notifySlack(slackChannel)
    }
}
