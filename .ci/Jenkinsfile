#!groovy
@Library("k8s-utils@v2.0.0")

String[] legacyFeatures = ["tests/legacy/features", "vendor/akeneo/pim-community-dev/tests/legacy/features"]
String ceBranch = "2.3"
String ceOwner = "akeneo"
String launchFrontUnitTests = "yes"
String launchBackUnitTests = "yes"
String launchFrontIntegrationTests = "yes"
String launchBackIntegrationTests = "yes"
String launchFrontAcceptanceTests = "yes"
String launchBackAcceptanceTests = "yes"
String launchEndToEndTests = "yes"
String verboseOutputs = "yes"
String slackChannel = ""
String tag = "eu.gcr.io/akeneo-ci/pim-enterprise-dev:${env.BRANCH_NAME}"
String composerCommand = "update"

stage("Build") {
    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                string(defaultValue: '2.3', description: 'Community Edition branch used for the build', name: 'ce_branch'),
                string(defaultValue: 'akeneo', description: 'Owner of the repository on GitHub', name: 'ce_owner'),
                choice(choices: 'yes\nno', description: 'Run front unit tests and code style checks', name: 'launchFrontUnitTests'),
                choice(choices: 'yes\nno', description: 'Run back unit tests and code style checks', name: 'launchBackUnitTests'),
                choice(choices: 'yes\nno', description: 'Run front integration tests', name: 'launchFrontIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run back integration tests', name: 'launchBackIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run front acceptance tests', name: 'launchFrontAcceptanceTests'),
                choice(choices: 'yes\nno', description: 'Run back acceptance tests', name: 'launchBackAcceptanceTests'),
                choice(choices: 'yes\nno', description: 'Run end to end tests (whole Legacy Behat suite)', name: 'launchEndToEndTests'),
                string(defaultValue: 'tests/legacy/features,vendor/akeneo/pim-community-dev/tests/legacy/features', description: 'Legacy end to end scenarios to run', name: 'legacyFeatures'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: '', description: 'Channel or user to notify (example : "#channel,@user")', name: 'slackChannel'),
            ])

            if (ceBranch == userInput['ce_branch']) {
                composerCommand = "install"
            }

            ceBranch = userInput['ce_branch']
            ceOwner = userInput['ce_owner']
            legacyFeatures = userInput['legacyFeatures'].tokenize(',')
            launchFrontUnitTests = userInput['launchFrontUnitTests']
            launchBackUnitTests = userInput['launchBackUnitTests']
            launchFrontIntegrationTests = userInput['launchFrontIntegrationTests']
            launchBackIntegrationTests = userInput['launchBackIntegrationTests']
            launchFrontAcceptanceTests = userInput['launchFrontAcceptanceTests']
            launchBackAcceptanceTests = userInput['launchBackAcceptanceTests']
            launchEndToEndTests = userInput['launchEndToEndTests']
            verboseOutputs = userInput['verboseOutputs']
            slackChannel = userInput['slackChannel']

        }
    }
    milestone 2

    pod {
        container('docker') {
            checkout scm

            dir('packages/pim-community-dev') {
                checkout([$class: 'GitSCM',
                    branches: [[name: ceBranch]],
                    userRemoteConfigs: [[credentialsId: "github-credentials", url: "https://github.com/${ceOwner}/pim-community-dev.git"]]
                ])
            }

            sh "cp .ci/Dockerfile Dockerfile"
            sh "gcloud container builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag},_COMPOSER_COMMAND=${composerCommand} ."
        }
    }
}

stage("Test") {
    try {
        parallel(
            // UNIT TESTS & MISC
            "back-php-coupling-detector": {testif(
                condition: launchBackUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/php-coupling-detector detect --config-file=.php_cd.php src"
            )},
            "back-phpspec": {testif(
                condition: launchBackUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && su -s /bin/sh www-data -c './vendor/bin/phpspec run --no-interaction --format=junit' > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "back-php-cs-fixer": {testif(
                condition: launchBackUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "front-lint": {testif(
                condition: launchFrontUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run lint"
            )},
            "front-unit": {testif(
                condition: launchFrontUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run unit"
            )},

            // ACCEPTANCE TESTS
            "front-acceptance": {testif(
                condition: launchFrontAcceptanceTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run webpack-test && MAX_RANDOM_LATENCY_MS=100 yarn run acceptance /var/www/pim/vendor/akeneo/pim-community-dev/tests/features /var/www/pim/tests/features"
            )},
            "back-acceptance": {testif(
                condition: launchBackAcceptanceTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/behat --strict -p acceptance -vv"
            )},

            // INTEGRATION TESTS
            "front-integration": {testif(
                condition: launchFrontIntegrationTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run webpack-test && yarn run integration"
            )},
            "back-integration": {queue(
                condition: launchBackIntegrationTests.equals("yes"),
                container: tag,
                containers: pimContainers(image: tag, selenium: false),
                verbose: (verboseOutputs == "yes"),
                fetcher: {
                    return pimPhpunitFetcher(
                        paths:[
                            "/var/www/pim/src",
                            "/var/www/pim/vendor/akeneo/pim-community-dev/src",
                            "/var/www/pim/vendor/akeneo/pim-community-dev/tests"
                        ]
                    )
                },
                parallelism: 50
            )},

            // END TO END TESTS
            "legacy-end-to-end-behat": {queue(
                condition: launchEndToEndTests.equals("yes"),
                container: tag,
                containers: pimContainers(image: tag),
                verbose: (verboseOutputs == "yes"),
                fetcher: {return pimBehatFetcher(hasToInstall: true, profiles: ["legacy"], features: legacyFeatures)}
            )}
        )
    } finally {
        notifySlack(slackChannel)
    }
}
