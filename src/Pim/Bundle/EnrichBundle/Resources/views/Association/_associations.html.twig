{% if associationTypes is empty %}
    <div class="buffer-top buffer-left">
        <span class="buffer-small-right">
            {{ 'info.association type.none exist'|trans }}
        </span>
        {% if resource_granted('pim_enrich_associationtype_index') %}
            <a href="#{{ path('pim_enrich_associationtype_index') }}">
                <span class="label link-label">{{ 'info.association type.create one'|trans }}</span>
            </a>
        {% endif %}
    </div>
{% else %}
    {% import 'PimDataGridBundle::macros.html.twig' as dataGrid %}

    <script type="text/javascript">
        require(
            ['jquery', 'underscore', 'oro/mediator'],
            function($, _, mediator) {
                'use strict';
                $(function() {
                    $('#association-list').on('shown', 'a[data-toggle="tab"]', function() {
                        var associationId = $(this).attr('id').replace(/^\D+/g, '');
                        changeAssociation(associationId);
                    });
                    var dataGrids = {
                        product: {
                            name:          'association-product-grid',
                            appendField:   'appendProducts',
                            removeField:   'removeProducts',
                            paramName:     'associationType',
                            getParamValue: function(associationId) {
                                return associationId;
                            }
                        },
                        group: {
                            name:          'association-group-grid',
                            appendField:   'appendGroups',
                            removeField:   'removeGroups',
                            paramName:     'associatedIds',
                            getParamValue: function(associationId) {
                                var ids = $('#association-link-' + associationId).data('associated-group-ids');
                                return ids ? _.extend({}, String(ids).split(',')) : false;
                            }
                        }
                    };

                    var changeAssociation = function (associationId) {
                        var $idField = $('#pim_product_edit_associations').find('input[type="hidden"][value="' + associationId + '"]');

                        _.each(dataGrids, function(datagrid) {
                            var appendFieldId = '#' + $idField.siblings('[id$="' + datagrid.appendField + '"]').attr('id'),
                                removeFieldId = '#' + $idField.siblings('[id$="' + datagrid.removeField + '"]').attr('id');
                                mediator
                                    .trigger('column_form_listener:set_selectors:' + datagrid.name, { included: appendFieldId, excluded: removeFieldId })
                                    .trigger('datagrid:removeParam:' + datagrid.name, datagrid.paramName)
                                    .trigger('datagrid:setParam:' + datagrid.name, datagrid.paramName, datagrid.getParamValue(associationId))
                                    .trigger('datagrid:doRefresh:' + datagrid.name);
                        });
                    };

                    $('#association-buttons').on('click', 'button[data-target-association]', function() {
                        var targetAssociation = $(this).attr('data-target-association');

                        _.each(dataGrids, function(datagrid, gridType) {
                            var $grid = $('#' + datagrid.name);
                            if (gridType === targetAssociation) {
                                $grid.removeClass('hide');
                            } else {
                                $grid.addClass('hide');
                            }
                        });

                        $(this).addClass('hide').siblings('[data-target-association]').removeClass('hide');
                    });

                    // Execute a callback when the column listeners have been instantiated
                    var onColumnListenersReady = function(callback) {
                        var gridNames = _.pluck(dataGrids, 'name');

                        mediator.on('column_form_listener:initialized', function onColumnListenerReady (gridName) {
                            gridNames = _.without(gridNames, gridName);
                            if (!gridNames.length) {
                                mediator.off('column_form_listener:initialized', onColumnListenerReady);
                                callback();
                            }
                        });
                    };

                    // Trigger the shown event on the active tab to set the column listener selectors
                    onColumnListenersReady(function() {
                        $('#association-list').find('li.active').find('a').trigger('shown');
                    });
                });
            }
        );
    </script>

    <div id="association-list" class="tab-groups">
        <ul class="nav nav-list">
            {% for associationType in associationTypes %}
                <li class="tab{% if loop.first %} active{% endif %}">
                    {% set currentAssociation = product.getAssociationForType(associationType) %}
                    {% set associatedGroupIds = [] %}
                    {% for group in currentAssociation.groups %}
                        {% set associatedGroupIds = associatedGroupIds|merge([group.id]) %}
                    {% endfor %}

                    <a id="association-link-{{ associationType.id }}" href="#association-tab-{{ associationType.id }}" data-toggle="tab" data-associated-group-ids="{{ associatedGroupIds|join(',') }}">
                        {% set associationCount = currentAssociation.products|length + currentAssociation.groups|length %}
                        <i class="icon-ok {{ associationCount > 0 ? 'green' : 'gray' }}"></i>
                        {{ associationType.label }} ({{ associationCount }})
                    </a>
                </li>
            {% endfor %}
        </ul>
    </div>

    <div class="tab-content fullheight">
        <div id="association-buttons" class="navbar-extra pull-right">
            <button type="button" class="btn pull-right hide" data-target-association="product">
                <i class="icon-random"></i>
                {{ 'info.association type.show products'|trans }}
            </button>
            <button type="button" class="btn pull-right" data-target-association="group">
                <i class="icon-random"></i>
                {{ 'info.association type.show groups'|trans }}
            </button>
        </div>
        {% for associationType in associationTypes %}
             <div id="association-tab-{{ associationType.id }}" class="tab-pane">
                <h3 class="unspaced">
                    {{ associationType.label }}
                    <span class="muted small">
                        {% set currentAssociation = product.getAssociationForType(associationType) %}
                        {{ 'info.product.number of associations'|trans({ '%productCount%': currentAssociation.products|length, '%groupCount%': currentAssociation.groups|length }) }}
                    </span>
                </h3>
            </div>
        {% endfor %}

        <div id="association-product-grid">
            {{ dataGrid.renderGrid('association-product-grid', { product: product.id, associationType: associationTypes|first.id, dataLocale: dataLocale }) }}
        </div>

        <div id="association-group-grid" class="hide">
            {% set currentAssociation = product.getAssociationForType(associationTypes|first) %}
            {% set associatedGroupIds = [] %}
            {% for group in currentAssociation.groups %}
                {% set associatedGroupIds = associatedGroupIds|merge([group.id]) %}
            {% endfor %}

            {{ dataGrid.renderGrid('association-group-grid', { associatedIds: associatedGroupIds }) }}
        </div>
    </div>
{% endif %}
