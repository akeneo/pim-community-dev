steps:
- id: 'tf sec'
  name: 'aquasec/tfsec'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "deployments-ucs/infra/terraform/${_ENV}" ]; then
        tfsec deployments-ucs/infra/terraform/${_ENV}/ \
            -m MEDIUM
      else
        echo "No files for deployments-ucs/infra/terraform/${_ENV}. Exiting"
      fi
- id: 'tf plan'
  name: 'hashicorp/terraform:1.1.3'
  env:
    - 'TF_IN_AUTOMATION=true'
    - 'GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=${_TARGET_IMPERSONATE}'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "deployments-ucs/infra/terraform/${_ENV}/" ]; then
        cd deployments-ucs/infra/terraform/${_ENV}
        echo "*************** TERRAFORM PLAN ******************"
        echo "******* At project: ${_TARGET_PROJECT_ID} ********"
        echo "*************************************************"
        terraform init -no-color
        terraform plan -no-color || exit 1
      else
        echo "No files for ${_TARGET_PROJECT_ID}. Exiting"
      fi
- id: 'tf apply'
  name: 'hashicorp/terraform:1.1.3'
  env:
    - 'TF_IN_AUTOMATION=true'
    - 'GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=${_TARGET_IMPERSONATE}'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ "${BRANCH_NAME}" != "master" ]; then
        echo "Not on branch master. Leaving ..."
      else
        if [ -d "deployments-ucs/infra/terraform/${_ENV}/" ]; then
          cd deployments-ucs/infra/terraform/${_ENV}
          echo "*************** TERRAFORM APPLY ******************"
          echo "******* At project: ${_TARGET_PROJECT_ID} ********"
          echo "*************************************************"
          terraform init -no-color
          terraform apply -no-color -auto-approve || exit 1
        else
          echo "No files for ${_TARGET_PROJECT_ID}. Exiting"
        fi
      fi
- id: 'gke gateway'
  name: "gcr.io/cloud-builders/gcloud"
  dir: "deployments-ucs"
  entrypoint: 'bash'
  args:
  - '-c'
  - |
      if [ "${BRANCH_NAME}" == "master" ]; then
        # Set cluster authentication
        gcloud config set auth/impersonate_service_account ${_TARGET_IMPERSONATE}
        gcloud config set project ${_TARGET_PROJECT_ID}
        gcloud container clusters list --format 'value(name,location)' | while read -r line; do
          CLUSTER_NAME=$(echo $line|awk '{print $1}')
          REGION=$(echo $line|awk '{print $2}')
          gcloud container clusters get-credentials $${CLUSTER_NAME} --project=${_TARGET_PROJECT_ID} --region=$${REGION}
          gcloud container update $${CLUSTER_NAME} --region=$${REGION} --project ${_TARGET_PROJECT_ID} --gateway-api=standard
        done
      else
        echo "Not on branch master. Leaving ..."
      fi

logsBucket: 'gs://${_TARGET_PROJECT_ID}-cloudbuild-logs'
substitutions:
  _ENV: dev
  _TARGET_PROJECT_ID: akecld-prd-pim-saas-dev
  _TARGET_IMPERSONATE: main-service-account@akecld-prd-pim-saas-dev.iam.gserviceaccount.com
