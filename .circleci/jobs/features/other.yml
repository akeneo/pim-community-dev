executor-machine: &executor-machine

jobs:
    test_back_static_and_acceptance:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: sudo chown -R 1000:1000 ../project
            - run:
                  name: No legacy translation format
                  command: PIM_CONTEXT=test make find-legacy-translations
            - run:
                  name: Load archived docker image
                  command: docker load -i php-pim-image.tar
            - run:
                  name: Static tests
                  command: PIM_CONTEXT=test make static-back
            - run:
                  name: Analyzes source code to flag programming errors, bugs, stylistic errors, and suspicious constructs
                  command: PIM_CONTEXT=test make lint-back
            - run:
                  name: Code Coupling Detection
                  command: PIM_CONTEXT=test make coupling-back
            - run:
                  name: Unit tests
                  command: PIM_CONTEXT=test make unit-back
            - run:
                  name: Acceptance tests
                  command: PIM_CONTEXT=test make acceptance-back
            - store_test_results:
                  path: var/tests
            - store_artifacts:
                  path: var/tests
            - store_artifacts:
                  path: var/logs

    test_back_integration_bounded_contexts:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Change owner on project dir in order to archive the project into the workspace
                  command: sudo chown -R 1000:1000 ../project
            - run:
                  name: Start containers
                  command: |
                      docker load -i php-pim-image.tar
                      APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                      docker/wait_docker_up.sh
            - run:
                  name: Install database
                  command: APP_ENV=test make database
            - run:
                  name: Data Quality
                  command: PIM_CONTEXT=data-quality-insights make data-quality-insights-integration-back
                  no_output_timeout: 60m
            - run:
                  name: Asset Manager
                  command: PIM_CONTEXT=asset-manager make asset-manager-integration-back
            - run:
                  name: Rules Engine
                  command: PIM_CONTEXT=rule-engine make rule-engine-integration-back
            - run:
                  name: Tailored Export
                  command: PIM_CONTEXT=tailored-export make integration-back
            - run:
                  name: Tailored Import
                  command: PIM_CONTEXT=tailored-import make integration-back
            - run:
                  name: Table Attribute
                  command: PIM_CONTEXT=table-attribute make table-attribute-integration-back
            - run:
                  name: Reference Entities
                  command: PIM_CONTEXT=reference-entity make reference-entity-integration-back
            - store_test_results:
                  path: var/tests/phpunit
            - store_artifacts:
                  path: var/tests/phpunit
            - store_artifacts:
                  path: var/logs

    test_database:
        machine:
            image: *executor-machine
        resource_class: medium
        parallelism: 1
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Change owner on project dir in order to archive the project into the workspace
                  command: sudo chown -R 1000:1000 ../project
            - run:
                  name: Start containers
                  command: |
                      docker load -i php-pim-image.tar
                      APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                      docker/wait_docker_up.sh
            - run:
                  name: Install database
                  command: APP_ENV=dev make database
            - run:
                  name: Database test
                  command: APP_ENV=dev PIM_CONTEXT=test make test-database-structure

    test_back_phpunit:
        machine:
            image: *executor-machine
        resource_class: medium
        parallelism: 20
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Change owner on project dir in order to archive the project into the workspace
                  command: sudo chown -R 1000:1000 ../project
            - run:
                  name: Start containers
                  command: |
                      docker load -i php-pim-image.tar
                      APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                      docker/wait_docker_up.sh
            - run:
                  name: Install database
                  command: APP_ENV=test make database
            - run:
                  name: PhpUnit Integration
                  command: PIM_CONTEXT=test make pim-integration-back
            - run:
                  name: PhpUnit End to end
                  command: PIM_CONTEXT=test make end-to-end-back
            - run:
                  name: PhpUnit End to end Table Attribute
                  command: PIM_CONTEXT=table-attribute make table-attribute-end-to-end-back
            - store_test_results:
                  path: var/tests/phpunit
            - store_artifacts:
                  path: var/tests/phpunit
            - store_artifacts:
                  path: var/logs

    test_back_behat_legacy:
        machine:
            image: *executor-machine
        resource_class: medium
        parallelism: 40
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Get Behat Suite name to run
                  command: |
                      TESTSUITE=$(echo $CIRCLE_BRANCH | sed -e 's/^.*-\([^-]*\)$/\1/g')
                      if ! [[ $TESTSUITE =~ ^(weasel|chipmunk|raccoon)$ ]] ; then
                        TESTSUITE="all"
                      fi
                      echo "Behat Suite to run: "$TESTSUITE
                      echo "export TESTSUITE=$TESTSUITE" >> $BASH_ENV
            - run:
                  name: Change owner on project dir in order to archive the project into the workspace
                  command: sudo chown -R 1000:1000 ../project
            - run:
                  name: Start containers
                  command: |
                      docker load -i php-pim-image.tar
                      APP_ENV=behat C='fpm mysql elasticsearch httpd object-storage selenium pubsub-emulator' make up
                      docker/wait_docker_up.sh
            - run:
                  name: Install database
                  command: APP_ENV=behat make database
            - run:
                  name: End to end Behat tests
                  command: PIM_CONTEXT=test SUITE=$TESTSUITE make end-to-end-legacy
            - run:
                  name: Gather Junit test result files in the same directory to improve the render of failing tests
                  command: |
                      set -e
                      cd var/tests/behat
                      sudo chmod -R 777 .
                      for subdir in */*; do mv "${subdir}" "${subdir/\//_}"; done
                  when: always
            - store_test_results:
                  path: var/tests/behat
            - store_artifacts:
                  path: var/tests/behat
            - store_artifacts:
                  path: var/logs
            - store_artifacts:
                  path: var/tests/screenshots

    test_back_data_migrations:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Change owner on project dir in order to archive the project into the workspace
                  command: sudo chown -R 1000:1000 ../project
            - run:
                  name: Start containers
                  command: |
                      docker load -i php-pim-image.tar
                      APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                      docker/wait_docker_up.sh
            - run:
                  name: Install database
                  command: APP_ENV=test make database
            - run:
                  name: PhpUnit Migration
                  command: PIM_CONTEXT=test make migration-back
            - store_test_results:
                  path: var/tests/phpunit
            - store_artifacts:
                  path: var/tests/phpunit
            - store_artifacts:
                  path: var/logs

    test_onboarder_bundle:
        machine:
            image: *executor-machine
        resource_class: medium
        environment:
            FLAG_ONBOARDER_ENABLED: 1
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Change owner on project dir in order to archive the project into the workspace
                  command: |
                      mkdir -p ~/.cache/yarn ~/.composer
                      sudo chown -R 1000:1000 ../project
                      sudo chown -R 1000:1000 ~/.composer
                      sudo chown -R 1000:1000 ~/.cache/yarn
            - run:
                  name: Create an empty service account
                  command: |
                      mkdir secret
                      echo "{}" > secret/serviceAccount.json
            - run:
                  name: Load php pim image
                  command: |
                      docker load -i php-pim-image.tar
            - run:
                  name: Load make commands
                  command: |
                      cp vendor/akeneo/pim-onboarder/onboarder.mk make-file/onboarder.mk
            - run:
                  name: Require onboarder tests dependencies
                  command: PIM_CONTEXT=onboarder make add-bundle-specific-dev-dependencies
            - run:
                  name: Composer update for tests dependencies
                  command: docker-compose run --rm php composer update --no-interaction
            - run:
                  name: Add configuration files to run the bundle tests from the PIM
                  command: |
                      rm -f docker-compose.override.yml
                      PIM_VERSION=master SETUP_FOR_CI=1 PIM_CONTEXT=onboarder make setup-onboarder-parameters
                      PIM_VERSION=master PIM_CONTEXT=onboarder make setup-onboarder-tests
            - run:
                  name: Change owner of PIM as some files have been created with wrong owner
                  command: sudo chown -R 1000:1000 ~/project
            - run:
                  name: Execute specifications
                  command: PIM_CONTEXT=onboarder make test-spec
            - run:
                  name: Start containers
                  command: |
                      APP_ENV=test C='mysql elasticsearch object-storage pubsub-emulator' make up
                      docker/wait_docker_up.sh
            - run:
                  name: Install Akeneo PIM with Onboarder specific configuration (channel, attribute, ...)
                  command: PIM_CONTEXT=onboarder ENVIRONMENT=test SETUP_FOR_CI=1 make onboarder-install
            - run:
                  name: Execute acceptance tests
                  command: PIM_CONTEXT=onboarder make test-acceptance
            - run:
                  name: Execute PHPUnit integration tests
                  command: PIM_CONTEXT=onboarder make test-integration
            - run:
                  name: Start Apache/FPM and Selenium for End to End tests
                  command: make up APP_ENV=behat C='fpm httpd selenium'
            - run:
                  name: Execute end-to-end tests
                  command: PIM_CONTEXT=onboarder make test-end-to-end
            - run:
                  name: Execute synchronization end-to-end tests
                  command: PIM_CONTEXT=onboarder GITHUB_TOKEN=${GITHUB_TOKEN} make test-synchronization-end-to-end
            - run:
                  name: Restart FPM with Onboarder feature turned off
                  command: make up APP_ENV=behat FLAG_ONBOARDER_ENABLED=0 C='fpm'
            - run:
                  name: Execute end-to-end "Onboarder feature disabled" tests
                  command: PIM_CONTEXT=onboarder make test-end-to-end-onboarder-disabled
            - store_test_results:
                  path: ~/project/pim/var/tests
            - store_artifacts:
                  path: ~/project/pim/var/tests
            - store_artifacts:
                  path: ~/project/pim/var/logs

    test_back_performance:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: sudo chown -R 1000:1000 ../project
            - run:
                  name: Start containers
                  command: |
                      export ES_JAVA_OPTS='-Xms2g -Xmx2g'
                      docker load -i php-pim-image.tar
                      APP_ENV=test APP_DEBUG=false C='fpm mysql httpd elasticsearch object-storage blackfire pubsub-emulator' make up
                      docker/wait_docker_up.sh
            - run:
                  name: Run performance tests
                  command: APP_ENV=test .circleci/run_performance_tests.sh
            - store_test_results:
                  path: var/tests/phpunit
            - store_artifacts:
                  path: var/tests/phpunit
            - store_artifacts:
                  path: var/logs

    test_front_code_style:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Create yarn cache folder
                  command: mkdir -p  ~/.cache/yarn
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: sudo chown -R 1000:1000 ../project ~/.cache/yarn
            - run:
                  name: Front type checking
                  command: make javascript-dev-strict
            - run:
                  name: Front linter
                  command: PIM_CONTEXT=test make lint-front

    test_front_static_acceptance_and_integration:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Create yarn cache folder
                  command: mkdir -p  ~/.cache/yarn
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: sudo chown -R 1000:1000 ../project ~/.cache/yarn
            - run:
                  name: Front unit tests
                  command: PIM_CONTEXT=test make unit-front

    test_front_end_to_end:
        machine:
            image: *executor-machine
        resource_class: large
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Change owner on project dir in order to archive the project into the workspace
                  command: sudo chown -R 1000:1000 ../project
            - run:
                  name: Create yarn cache folder
                  command: mkdir -p  ~/.cache/yarn
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: sudo chown -R 1000:1000 ../project ~/.cache/yarn
            - run:
                  name: Start containers
                  command: |
                      docker load -i php-pim-image.tar
                      APP_ENV=behat C='fpm mysql elasticsearch httpd object-storage pubsub-emulator' make up
                      docker/wait_docker_up.sh
            - run:
                  name: Install database
                  command: APP_ENV=behat O="--catalog src/Akeneo/Platform/Bundle/InstallerBundle/Resources/fixtures/icecat_demo_dev" make database
            - run:
                  name: Create adminakeneo user
                  command: |
                      APP_ENV=behat docker-compose run --rm -u www-data:www-data php bin/console pim:user:create adminakeneo Q7sKB5xP2ttc5KnqFPOF1BrOkTRSulmEj528BpJzbDcLbYSHU1 product-team@akeneo.com admin1 admin2 en_US --admin -n
            - run:
                  name: Hotfix rnd file - Should be removed
                  command: rm -f .rnd
            - run:
                  name: Launch Cypress
                  command: PIM_CONTEXT=test CYPRESS_defaultCommandTimeout=8000 CYPRESS_requestTimeout=10000 make end-to-end-front
            - store_artifacts:
                  path: cypress/screenshots
            - store_artifacts:
                  path: cypress/videos
            - store_artifacts:
                  path: var/logs

    test_grth:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="grth"
                      echo export TYPE=${TYPE} >> $BASH_ENV
            - run:
                  name: Setup tests results folder and log folder
                  command: mkdir -p ${TYPE}/var/tests/phpspec ${TYPE}/var/tests/csfixer ${TYPE}/var/logs ${TYPE}/var/tests/screenshots ~/.cache/yarn ~/.composer ~/.cache/Cypress
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: sudo chown -R 1000:1000 ~/project ~/.cache ~/.composer
            - run:
                  name: Load php image
                  command: docker load -i php-pim-image.tar
            - run:
                  name: Install dependencies
                  command: make dependencies
            - run:
                  name: Launch Grth in test mode
                  command: make pim-test
            - run:
                  name: Lint Back
                  command: PIM_CONTEXT=test make lint-back
            - run:
                  name: Static tests
                  command: PIM_CONTEXT=test make static-back
            - run:
                  name: Unit Back
                  command: PIM_CONTEXT=test make unit-back
            - run:
                  name: Code Coupling Detection
                  command: PIM_CONTEXT=test make coupling-back
            - run:
                  name: Acceptance tests
                  command: PIM_CONTEXT=test make acceptance-back
            - run:
                  name: Integration Back
                  command: PIM_CONTEXT=test make pim-integration-back
            - run:
                  name: End to End Back
                  command: PIM_CONTEXT=test make end-to-end-back
            - run:
                  name: PhpUnit Migration
                  command: PIM_CONTEXT=test make migration-back
            - run:
                  name: Tailored Export Back Tests
                  command: PIM_CONTEXT=tailored-export make ci-back
            - run:
                  name: Tailored Import Back Tests
                  command: PIM_CONTEXT=tailored-import make ci-back
            - run:
                  name: Job Automation Back Tests
                  command: PIM_CONTEXT=job-automation make ci-back
            - run:
                  name: Install assets & css
                  command: make assets css
            - run:
                  name: Build the DSM
                  command: make dsm
            - run:
                  name: Build front-packages
                  command: make front-packages
            - run:
                  name: Build Javascript
                  command: make javascript-test
            - run:
                  name: Front linter
                  command: PIM_CONTEXT=test make lint-front
            - run:
                  name: Front unit tests
                  command: PIM_CONTEXT=test make unit-front
            - run:
                  name: Tailored Export Front Tests
                  command: PIM_CONTEXT=tailored-export make ci-front
            - run:
                  name: Tailored Import Front Tests
                  command: PIM_CONTEXT=tailored-import make ci-front
            - run:
                  name: Job Automation Front Tests
                  command: PIM_CONTEXT=job-automation make ci-front
            - store_test_results:
                  path: ${TYPE}/var/tests
            - store_artifacts:
                  path: ${TYPE}/var/tests
            - store_artifacts:
                  path: ${TYPE}/var/logs

    test_tria:
        machine:
            image: *executor-machine
        resource_class: medium
        steps:
            - attach_workspace:
                  at: ~/
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="tria"
                      echo export TYPE=${TYPE} >> $BASH_ENV
            - run:
                  name: Setup tests results folder and log folder
                  command: mkdir -p ${TYPE}/var/tests/phpspec ${TYPE}/var/tests/csfixer ${TYPE}/var/logs ${TYPE}/var/tests/screenshots ~/.cache/yarn ~/.composer
            - run:
                  name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                  command: sudo chown -R 1000:1000 ~/project ~/.cache/yarn ~/.composer
            - run:
                  name: Load php image
                  command: docker load -i php-pim-image.tar
            - run:
                  name: Install dependencies
                  command: make dependencies
            - run:
                  name: Build the DSM
                  command: make dsm
            - run:
                  name: Launch Tria in test mode
                  command: make pim-test
            - run:
                  name: Debug
                  command: PIM_CONTEXT=test make env-debug
            - run:
                  name: Lint Front
                  command: PIM_CONTEXT=test make lint-front
            - run:
                  name: Unit Front
                  command: PIM_CONTEXT=test make unit-front
            - run:
                  name: Lint Back
                  command: PIM_CONTEXT=test make lint-back
            - run:
                  name: Unit Back
                  command: PIM_CONTEXT=test make unit-back
            - run:
                  name: Integration Back
                  command: PIM_CONTEXT=test make pim-integration-back
            - store_test_results:
                  path: ${TYPE}/var/tests
            - store_artifacts:
                  path: ${TYPE}/var/tests
            - store_artifacts:
                  path: ${TYPE}/var/logs

    pull_request_success:
        docker:
            - image: alpine/git
        resource_class: small
        steps:
            - run:
                  name: Success
                  command: echo "The build has run with success! Let's merge :)"
