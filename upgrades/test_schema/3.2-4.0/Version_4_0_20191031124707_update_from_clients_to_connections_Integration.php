<?php

declare(strict_types=1);

namespace Pim\Upgrade\Schema\Tests;

use AkeneoTest\Pim\Enrichment\Integration\Elasticsearch\IndexConfiguration\AbstractPimCatalogTestCase;
use Doctrine\DBAL\Connection;
use PHPUnit\Framework\Assert;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\BufferedOutput;

/**
 * This class will be removed after 4.0 version
 *
 * @author    Romain Monceau <romain@akeneo.com>
 * @copyright 2020 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Version_4_0_20191031124707_update_from_clients_to_connections_Integration extends AbstractPimCatalogTestCase
{
    use ExecuteMigrationTrait;

    private const MIGRATION_LABEL = '_4_0_20191031124707_update_from_clients_to_connections';

    protected function getConfiguration()
    {
        return $this->catalog->useTechnicalCatalog();
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_it_migrates_api_clients()
    {
        list($magentoClientId, $magentoSecret, $magentoLabel) = $this->createApiClient('Magento');
        list($erpClientId, $erpSecret, $erpLabel) = $this->createApiClient('ERP');

        $this->reExecuteMigration(self::MIGRATION_LABEL);

        $this->assertClientCount(2);
        $this->assertClientHasNotChanged($magentoClientId, $magentoSecret, $magentoLabel);
        $this->assertClientHasNotChanged($erpClientId, $erpSecret, $erpLabel);

        $this->assertConnectionCount(2);
        $this->assertConnectionExist($magentoLabel, $magentoLabel, $magentoClientId);
        $this->assertConnectionExist($erpLabel, $erpLabel, $erpClientId);
    }

    public function test_it_migrates_api_client_with_specific_chars()
    {
        list($clientId, $secret, $label) = $this->createApiClient('Akénéo-2');

        $this->reExecuteMigration(self::MIGRATION_LABEL);

        $this->assertClientCount(1);
        $this->assertClientHasNotChanged($clientId, $secret, $label);

        $this->assertConnectionCount(1);
        $this->assertConnectionExist('Ak__n__o_2', 'Akénéo-2', $clientId);
    }

    public function test_it_migrates_api_client_with_short_label()
    {
        list($clientId, $secret, $label) = $this->createApiClient('A');

        $this->reExecuteMigration(self::MIGRATION_LABEL);

        $this->assertClientCount(1);
        $this->assertClientHasNotChanged($clientId, $secret, $label);

        $this->assertConnectionCount(1);
        $this->assertConnectionExist('A__', 'A__', $clientId);
    }

    public function test_it_migrates_api_client_with_short_label_of_number_type()
    {
        list($clientId, $secret, $label) = $this->createApiClient('1');

        $this->reExecuteMigration(self::MIGRATION_LABEL);

        $this->assertClientCount(1);
        $this->assertClientHasNotChanged($clientId, $secret, $label);

        $this->assertConnectionCount(1);
        $this->assertConnectionExist('1__', '1__', $clientId);
    }

    public function test_it_migrates_api_client_with_long_label()
    {
        list($clientId, $secret, $label) = $this->createApiClient(str_pad('', 120, 'a'));

        $this->reExecuteMigration(self::MIGRATION_LABEL);

        $this->assertClientCount(1);
        $this->assertClientHasNotChanged($clientId, $secret, $label);

        $this->assertConnectionCount(1);
        $this->assertConnectionExist(str_pad('', 97, 'a'), str_pad('', 97, 'a'), $clientId);
    }

    public function test_it_migrates_api_client_with_label_chars_not_valid_for_user_firstname()
    {
        list($clientId, $secret, $label) = $this->createApiClient('"Test: > J&B');

        $this->reExecuteMigration(self::MIGRATION_LABEL);

        $this->assertClientCount(1);
        $this->assertClientHasNotChanged($clientId, $secret, $label);

        $this->assertConnectionCount(1);
        $this->assertConnectionExist('_Test____J_B', '"Test: > J&B', $clientId);
    }

    public function test_it_migrates_api_client_with_twice_the_same_client_label()
    {
        list($clientId1, $secret1, $label1) = $this->createApiClient('magento');
        list($clientId2, $secret2, $label2) = $this->createApiClient('magento');

        $this->reExecuteMigration(self::MIGRATION_LABEL);

        $this->assertClientCount(2);
        $this->assertClientHasNotChanged($clientId1, $secret1, $label1);
        $this->assertClientHasNotChanged($clientId2, $secret2, $label2);

        $this->assertConnectionCount(2);
        $this->assertConnectionExist('magento_2', 'magento', $clientId1);
        $this->assertConnectionExist('magento', 'magento', $clientId2);
    }

    private function createApiClient(string $label): array
    {
        $input  = new ArrayInput([
            'command' => 'pim:oauth-server:create-client',
            'label'   => $label,
        ]);
        $output = new BufferedOutput();

        $consoleApp = new Application(static::$kernel);
        $consoleApp->setAutoExit(false);
        $consoleApp->run($input, $output);

        $content = $output->fetch();
        preg_match('/client_id: (.+)\nsecret: (.+)\nlabel: (.+)$/', $content, $matches);

        return [$matches[1], $matches[2], $matches[3]];
    }

    private function assertClientCount(int $expectedCount): void
    {
        $results = $this->getDbalConnection()->fetchAll('SELECT * FROM pim_api_client');
        Assert::assertCount($expectedCount, $results);
    }

    private function assertClientHasNotChanged(string $clientId, string $secret, string $label): void
    {
        list($id, $randomId) = explode('_', $clientId);
        $sqlQuery = <<<SQL
SELECT * FROM pim_api_client WHERE id = :id AND random_id = :random_id AND secret = :secret AND label = :label
SQL;

        $results = $this->getDbalConnection()->fetchAll($sqlQuery, ['id' => $id, 'random_id' => $randomId, 'secret' => $secret, 'label' => $label]);
        Assert::assertCount(1, $results);
    }

    private function assertConnectionCount(int $expectedCount): void
    {
        $results = $this->getDbalConnection()->fetchAll('SELECT * FROM akeneo_connectivity_connection');
        Assert::assertCount($expectedCount, $results);
    }

    private function assertConnectionExist(string $code, string $label, string $clientId): void
    {
        list($id, $randomId) = explode('_', $clientId);
        $sqlQuery = <<<SQL
SELECT * FROM akeneo_connectivity_connection conn 
INNER JOIN pim_api_client cli ON cli.id = conn.client_id
WHERE conn.code = :code AND conn.label = :label AND conn.client_id = :id AND cli.random_id = :random_id
SQL;
        $results = $this->getDbalConnection()->fetchAll($sqlQuery, ['id' => $id, 'random_id' => $randomId, 'code' => $code, 'label' => $label]);
        Assert::assertCount(1, $results);
    }

    private function getDbalConnection(): Connection
    {
        return $this->get('database_connection');
    }

    /**
     * {@inheritdoc}
     */
    protected function addDocuments()
    {
    }
}
