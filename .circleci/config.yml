version: 2.1

aliases:
  - &envVarsDeploy
      GOOGLE_PROJECT_ID: "akecld-saas-dev"
      GOOGLE_COMPUTE_ZONE: "europe-west3-a"
      CLUSTER_NAME: "europe-west3-a"

  - &dockerCloudDeployer
      docker:
        - image: eu.gcr.io/akeneo-cloud/cloud-deployer:1
          auth:
            username: _json_key  # default username when using a JSON key file to authenticate
            password: $GCLOUD_SERVICE_KEY  # JSON service account you created, do not encode to base64

jobs:
  checkout:
    docker:
      - image: alpine/git
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  build_dev:
    parameters:
        is_pull_request:
            type: boolean
            default: true
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - attach_workspace:
            at: ~/
      - run:
          name: Copy docker-compose.override.yml.dist
          command: cp .circleci/docker-compose.override.yml.dist docker-compose.override.yml
      - run:
          name: Build the latest Docker images
          command: |
              make php-image-dev
              docker save -o php-pim-image.tar akeneo/pim-dev/php:7.3
      - run:
          name: Setup tests results folder and log folder
          command: mkdir -p var/tests/phpspec var/tests/csfixer var/logs var/tests/screenshots ~/.cache/yarn ~/.composer
      - run:
          name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
          command: |
              sudo chown -R 1000:1000 ../project
              sudo chown -R 1000:1000 ~/.composer
              sudo chown -R 1000:1000 ~/.cache/yarn
      - run:
          name: Change owner on project dir after restoring cache
          command: sudo chown -R 1000:1000 ../project
      - when:
            condition: << parameters.is_pull_request >>
            steps:
                - run:
                      name: Update composer.json if same branch exists in CE
                      command: >
                          curl --output /dev/null --silent --head --fail
                          https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} &&
                          docker-compose run --rm -u www-data:www-data php php
                          /usr/local/bin/composer require "akeneo/pim-community-dev:dev-${CIRCLE_BRANCH}" --no-update ||
                          echo "No CE branch $CIRCLE_BRANCH found. I don't touch the composer.json file."
      - run:
          name: Install back and front dependencies
          command: make dependencies
      - run:
          name: Check PIM requirements
          command: |
              C='mysql elasticsearch' make up
              vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
              make check-requirements
      - run:
          name: Install asset
          command: make assets
      - run:
          name: Build Javascript
          command: |
              make javascript-test
              make javascript-dev
      - run:
            name: Change owner on project dir after installing when there is no cache
            command: sudo chmod -R 777 ../project
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  test_back_static_and_acceptance:
      machine:
          image: ubuntu-1604:201903-01
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Load archived docker image
                command: docker load -i php-pim-image.tar
          - run:
                name: Check Pullup
                command: make check-pullup
                when: always
          - run:
                name: Check that all defined services are instantiable
                command: make check-sf-services
          - run:
                name: Analyzes source code to flag programming errors, bugs, stylistic errors, and suspicious constructs
                command: make lint-back
          - run:
                name: Code Coupling Detection
                command: make coupling-back
                when: always
          - run:
                name: Static tests
                command: make asset-manager-static-back
          - run:
                name: Unit tests
                command: make unit-back
          - run:
                name: Acceptance tests
                command: make acceptance-back
                when: always
          - run:
                name: Acceptance back (Connectivity Connection)
                command: docker-compose run -u www-data --rm php vendor/bin/behat --config vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/tests/Acceptance/behat.yml --no-interaction --format=progress --strict
                when: always
          - store_test_results:
                path: var/tests
          - store_artifacts:
                path: var/tests
          - store_artifacts:
                path: var/logs

  test_back_phpunit:
      machine:
          image: ubuntu-1604:201903-01
      parallelism: 10
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage' make up
                    vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PhpUnit Integration
                command: make integration-back
          - run:
                name: PhpUnit End to end
                command: make end-to-end-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

  back_behat_legacy:
    machine:
        image: ubuntu-1604:201903-01
    parallelism: 20
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Get Behat Suite name to run
          command: |
            TESTSUITE=$(echo $CIRCLE_BRANCH | sed -e 's/^.*-\([^-]*\)$/\1/g')
            if ! [[ $TESTSUITE =~ ^(weasel|chipmunk|raccoon|franklin)$ ]] ; then
              TESTSUITE="all"
            fi
            echo "Behat Suite to run: "$TESTSUITE
            echo "export TESTSUITE=$TESTSUITE" >> $BASH_ENV
      - run:
          name: Change owner on project dir in order to archive the project into the workspace
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            docker load -i php-pim-image.tar
            APP_ENV=behat C='fpm mysql elasticsearch httpd object-storage selenium' make up
            vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
      - run:
          name: Install database
          command: APP_ENV=behat make database
      - run:
          name: Non critical Behat
          command: make end-to-end-legacy SUITE=$TESTSUITE
      - run:
          name: Gather Junit test result files in the same directory to improve the render of failing tests
          command: |
              set -e
              cd var/tests/behat
              sudo chmod -R 777 .
              for subdir in */*; do mv "${subdir}" "${subdir/\//_}"; done
          when: always
      - store_test_results:
          path: var/tests/behat
      - store_artifacts:
          path: var/tests/behat
      - store_artifacts:
          path: var/logs
      - store_artifacts:
          path: var/tests/screenshots

  test_front_static_acceptance_and_integration:
      machine:
          image: ubuntu-1604:201903-01
      steps:
        - attach_workspace:
            at: ~/
        - run:
              name: Create yarn cache folder
              command: mkdir -p  ~/.cache/yarn
        - run:
              name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
              command: sudo chown -R 1000:1000 ../project ~/.cache/yarn
        - run:
            name: Front linter
            command: make lint-front
        - run:
            name: Front unit tests
            command: make unit-front
        - run:
            name: Front acceptance tests
            command: make acceptance-front
        - run:
            name: Front integration tests
            command: make integration-front

  test_back_performance:
    machine:
        image: ubuntu-1604:201903-01
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            export ES_JAVA_OPTS='-Xms2g -Xmx2g'
            docker load -i php-pim-image.tar
            APP_ENV=test APP_DEBUG=false C='fpm mysql httpd elasticsearch object-storage blackfire' make up
            vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
      - run:
          name: Run performance tests
          command: APP_ENV=test .circleci/run_performance_tests.sh
      - store_test_results:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/logs

  build_prod:
      environment:
        <<: *envVarsDeploy
      machine:
          image: ubuntu-1604:201903-01
      steps:
          - attach_workspace:
                at: ~/
          - set_gcloud_config
          - run:
              name: Build PROD PIM docker image
              command: IMAGE_TAG=$CIRCLE_SHA1 make php-image-prod
          - run:
              name: Push PROD PIM image on docker registry
              command: IMAGE_TAG=$CIRCLE_SHA1 make push-php-image-prod

  deploy_master_environment:
      environment:
        <<: *envVarsDeploy
      <<: *dockerCloudDeployer
      steps:
          - attach_workspace:
                at: ~/
          - set_gcloud_config
          - prepare_terraform
          - run:
              name: Prepare helm deployment on kubernetes
              command: make helm-prepare
          - run:
              name: Deploy PIM on kubernetes
              command: IMAGE_TAG=$CIRCLE_SHA1 make deploy
          - run:
              name: Test PIM connexion on kubernetes
              command: IMAGE_TAG=$CIRCLE_SHA1 make test-prod
          - run:
              name: Remove env on kubernetes
              command: IMAGE_TAG=$CIRCLE_SHA1 make delete
          - run:
              name: Delete FAILED validation env
              when: on_fail
              shell: "/bin/bash -eo pipefail"
              command: |
                echo "DEPLOY FAILED - Delete CI env PFID=srnt-ci-$CIRCLE_SHA1"
                IMAGE_TAG=$CIRCLE_SHA1 make delete

  deploy_upgrade_pim3_environment:
      environment:
        <<: *envVarsDeploy
      <<: *dockerCloudDeployer
      steps:
          - attach_workspace:
                at: ~/
          - add_ssh_keys
          - set_gcloud_config
          - run:
              name: PIM3 deployment on kubernetes
              command: |
                ssh-keyscan github.com >> ~/.ssh/known_hosts
                INSTANCE_NAME_PREFIX=pimup IMAGE_TAG=$CIRCLE_SHA1 make helm-prepare
                INSTANCE_NAME_PREFIX=pimup IMAGE_TAG=$CIRCLE_SHA1 make deploy-pim3
          - run:
              name: Upgrade PIM3 env
              command: |
                INSTANCE_NAME_PREFIX=pimup IMAGE_TAG=$CIRCLE_SHA1 make create-ci-instance
                INSTANCE_NAME_PREFIX=pimup IMAGE_TAG=$CIRCLE_SHA1 make deploy
          - run:
              name: Production tests on upgraded env
              command: INSTANCE_NAME_PREFIX=pimup IMAGE_TAG=$CIRCLE_SHA1 make test-prod
          - run:
              name: Remove upgraded env
              command: INSTANCE_NAME_PREFIX=pimup IMAGE_TAG=$CIRCLE_SHA1 make delete
          - run:
              name: Delete FAILED validation env
              when: on_fail
              shell: "/bin/bash -eo pipefail"
              command: |
                echo "DEPLOY FAILED - Delete CI env PFID=srnt-ci-$CIRCLE_SHA1"
                INSTANCE_NAME_PREFIX=pimup IMAGE_TAG=$CIRCLE_SHA1 make delete

  release:
      environment:
          <<: *envVarsDeploy
      machine:
          image: ubuntu-1604:201903-01
      steps:
          -   attach_workspace:
                  at: ~/
          - set_gcloud_config
          - run:
              name: make release
              command: OLD_IMAGE_TAG=$CIRCLE_SHA1 NEW_IMAGE_TAG=v$(date +%Y%m%d%H%M%S) make release

  test_back_missing_structure_migrations:
      machine:
        image: ubuntu-1604:201903-01
      steps:
        -   attach_workspace:
                at: ~/
        -   run:
                name: Load php image
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='mysql elasticsearch object-storage' make up
                    vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
        -   run:
                name: Restore permissions on files
                command: git checkout -- .
        -   run:
                name: Restore permissions on vendor files
                command: |
                    cd vendor/akeneo/pim-community-dev
                    git checkout -- .
        -   run:
                name: Change owner on project dir after restoring cache
                command: sudo chown -R 1000:1000 ../project
        -   run:
                name: Test missing database and index structure migrations
                command: vendor/akeneo/pim-community-dev/.circleci/detect_structure_changes.sh $CIRCLE_BRANCH

  test_back_data_migrations:
      machine:
          image: ubuntu-1604:201903-01
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage' make up
                    vendor/akeneo/pim-community-dev/docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PhpUnit Migration
                command: make migration-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

workflows:
  version: 2
  pull_request:
      jobs:
          - wait_for_user_approval:
                type: approval
                filters:
                    branches:
                        ignore:
                            - master
          - checkout:
                requires:
                    - wait_for_user_approval
          - build_dev:
                requires:
                    - checkout
          - test_back_static_and_acceptance:
                requires:
                    - build_dev
          - test_front_static_acceptance_and_integration:
                requires:
                    - build_dev
          - test_back_missing_structure_migrations:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - test_back_data_migrations:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - test_back_phpunit:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - back_behat_legacy:
                requires:
                    - test_back_data_migrations
                    - test_back_missing_structure_migrations
                    - test_back_phpunit
          - test_back_performance:
                requires:
                    - test_back_data_migrations
                    - test_back_missing_structure_migrations
                    - test_back_phpunit

  nightly:
      triggers:
          - schedule:
                cron: "0 2 * * *"
                filters:
                    branches:
                        only:
                            - master

      jobs:
          - checkout
          - build_dev:
                is_pull_request: false
                requires:
                    - checkout
          - build_prod:
                requires:
                    - checkout
          - deploy_upgrade_pim3_environment:
                requires:
                    - checkout
                    - build_prod
          - deploy_master_environment:
                requires:
                    - build_prod
          - test_back_static_and_acceptance:
                requires:
                    - build_dev
          - test_front_static_acceptance_and_integration:
                requires:
                    - build_dev
          - test_back_phpunit:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - back_behat_legacy:
                requires:
                    - build_dev
          - test_back_data_migrations:
                requires:
                    - build_dev
          - test_back_performance:
                requires:
                    - build_dev
          - ready_to_release:
                type: approval
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
                    - test_back_phpunit
                    - test_back_performance
                    - back_behat_legacy
                    - deploy_master_environment
                    - deploy_upgrade_pim3_environment
                    - test_back_data_migrations
          - release:
                requires:
                    - ready_to_release

commands:
  set_gcloud_config:
    description: "Authenticate on GCP services and set config and key to be used by other tools that need to authenticate."
    steps:
      - run:
          name: "Set Gcloud Config."
          shell: "/bin/bash -eo pipefail"
          command: |
            echo ${GCLOUD_SERVICE_KEY} | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud container clusters get-credentials ${GOOGLE_COMPUTE_ZONE} --project=${GOOGLE_PROJECT_ID} --zone=${GOOGLE_COMPUTE_ZONE}
            echo ${GCLOUD_SERVICE_KEY} > ${HOME}/gcloud-service-key.json
            echo 'export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"' >> $BASH_ENV
            export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"
            gcloud auth configure-docker --quiet


  prepare_terraform:
    description: "Prepare terraform configuration."
    steps:
      - run:
          name: "Prepare terraform configuration."
          shell: "/bin/bash -eo pipefail"
          command: |
            IMAGE_TAG=$CIRCLE_SHA1 make create-ci-instance
            make get-kubeconfig
