<?php

namespace Pim\Bundle\BaseConnectorBundle\EventListener;

use Akeneo\Component\Batch\Event\EventInterface;
use Akeneo\Component\Batch\Event\JobExecutionEvent;
use Akeneo\Component\Batch\Model\JobExecution;
use Pim\Bundle\BaseConnectorBundle\Archiver\ArchiverInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

/**
 * Job execution archivist
 *
 * @author    Gildas Quemener <gildas@akeneo.com>
 * @copyright 2013 Akeneo SAS (http://www.akeneo.com)
 * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class JobExecutionArchivist implements EventSubscriberInterface
{
    /** @var array */
    protected $archivers = [];

    /** @var InvalidItemWriterResolver */
    protected $invalidItemWriterResolver;

    /**
     * @param InvalidItemWriterResolver $invalidItemWriterResolver
     */
    public function __construct(InvalidItemWriterResolver $invalidItemWriterResolver)
    {
        $this->invalidItemWriterResolver = $invalidItemWriterResolver;
    }

    /**
     * {@inheritdoc}
     */
    public static function getSubscribedEvents()
    {
        return [
            EventInterface::BEFORE_JOB_STATUS_UPGRADE => 'beforeStatusUpgrade',
        ];
    }

    /**
     * Register an archiver
     *
     * @param ArchiverInterface $archiver
     *
     * @throws \InvalidArgumentException
     */
    public function registerArchiver(ArchiverInterface $archiver)
    {
        if (array_key_exists($archiver->getName(), $this->archivers)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'There is already a registered archiver named "%s": %s',
                    $archiver->getName(),
                    get_class($this->archivers[$archiver->getName()])
                )
            );
        }

        $this->archivers[$archiver->getName()] = $archiver;
    }

    /**
     * Delegate archiving to the registered archivers
     *
     * @param JobExecutionEvent $event
     */
    public function beforeStatusUpgrade(JobExecutionEvent $event)
    {
        $jobExecution = $event->getJobExecution();

        foreach ($this->archivers as $archiver) {
            if ($archiver->supports($jobExecution)) {
                $archiver->archive($jobExecution);
            }
        }
        
        $this->invalidItemWriterResolver->beforeStatusUpgrade($event);
    }

    /**
     * Get the archives generated by the archivers
     *
     * @param JobExecution $jobExecution
     *
     * @return array
     */
    public function getArchives(JobExecution $jobExecution)
    {
        $result = [];

        if (!$jobExecution->isRunning()) {
            foreach ($this->archivers as $archiver) {
                if (count($archives = $archiver->getArchives($jobExecution)) > 0) {
                    $result[$archiver->getName()] = $archives;
                }
            }
            $result[] = $this->invalidItemWriterResolver->getArchives($jobExecution);
        }


        return $result;
    }

    /**
     * Get an archive of an archiver
     *
     * @param JobExecution $jobExecution
     * @param string       $archiver
     * @param string       $key
     *
     * @throws \InvalidArgumentException
     *
     * @return resource
     */
    public function getArchive(JobExecution $jobExecution, $archiver, $key)
    {
        if (!isset($this->archivers[$archiver])) {
            return $this->invalidItemWriterResolver->getArchive($jobExecution, $archiver, $key);
        }

        return $this->archivers[$archiver]->getArchive($jobExecution, $key);
    }
}
