version: 2.1

jobs:
  checkout_ee:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - add_ssh_keys:
          fingerprints:
              - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
      - run:
          name: Download EE dev with the SSH key that we added above
          command: |
              export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
              git clone git@github.com:akeneo/pim-enterprise-dev.git /home/circleci/project
      - run:
          name: Checkout EE branch if it exists, or 5.0 otherwise
          command: |
            cd /home/circleci/project
            git checkout ${CIRCLE_BRANCH} || git checkout 5.0
      - run:
          name: Require proper dev CE branch
          command: |
            sed -i "s|\"akeneo/pim-community-dev\": \"5.0.x-dev|\"akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}|" composer.json
      - run:
          name: Persist default IMAGE_TAG to be the repo last commit SHA1
          command: echo export IMAGE_TAG=$CIRCLE_SHA1 >> persisted_env_vars
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  checkout_ce:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/
          paths:
              - project

  build_dev:
    parameters:
        is_ee_built:
            type: boolean
            default: true
        path_to_dsm:
            type: string
            default: akeneo-design-system
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - attach_workspace:
            at: ~/
      - run:
          name: Copy docker-compose.override.yml.dist
          command: cp .circleci/docker-compose.override.yml.dist docker-compose.override.yml
      - when:
            condition: << parameters.is_ee_built >>
            steps:
              - run:
                  name: Build the latest EE Docker images
                  command: |
                      make php-image-dev
                      docker save -o php-pim-image.tar akeneo/pim-dev/php:7.4
      - unless:
            condition: << parameters.is_ee_built >>
            steps:
              - run:
                  name: Save the CE image as a tar
                  command: |
                      docker pull akeneo/pim-php-dev:5.0
                      docker save -o php-pim-image.tar akeneo/pim-php-dev:5.0
      - run:
          name: Setup tests results folder and log folder
          command: mkdir -p var/tests/phpspec var/tests/csfixer var/logs var/tests/screenshots ~/.cache/yarn ~/.composer
      - run:
          name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
          command: |
              sudo chown -R 1000:1000 ../project
              sudo chown -R 1000:1000 ~/.composer
              sudo chown -R 1000:1000 ~/.cache/yarn
      - run:
          name: Change owner on project dir after restoring cache
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Install back and front dependencies
          command: make dependencies
          environment:
            YARN_REGISTRY: "http://registry.yarnpkg.com"
      - run:
          name: Check PIM requirements
          command: |
              C='mysql elasticsearch' make up
              docker/wait_docker_up.sh
              make check-requirements
      - run:
          name: Install assets
          command: make assets
      - run:
          name: Build css
          command: make css
      - run:
          name: Create hash for DSM version
          command: |
            find << parameters.path_to_dsm >> -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/akeneo-design-system.hash
            date +%F >> ~/akeneo-design-system.hash
      - run:
          name: Set DSM directory owner to circleci
          command: sudo chown -R circleci:circleci << parameters.path_to_dsm >>
      - restore_cache:
          name: Restore DSM cache
          key: dsm-lib-{{ checksum "~/akeneo-design-system.hash" }}
      - run:
          name: Set DSM directory owner to docker
          command: sudo chown -R 1000:1000 << parameters.path_to_dsm >>
      - run:
          name: Build DSM
          command: test -d << parameters.path_to_dsm >>/lib || make dsm
      - save_cache:
          name: Save DSM cache
          key: dsm-lib-{{ checksum "~/akeneo-design-system.hash" }}
          paths:
            - << parameters.path_to_dsm >>/lib
      - run:
          name: Build Javascript
          command: make javascript-dev
      - run:
            name: Change owner on project dir after installing when there is no cache
            command: sudo chmod -R 777 ../project
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  test_back_static_and_acceptance:
      machine:
          image: ubuntu-2004:202201-02
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: No legacy translation format
                command: PIM_CONTEXT=test make find-legacy-translations
          - run:
                name: Load archived docker image
                command: docker load -i php-pim-image.tar
          - run:
                name: Static tests
                command: PIM_CONTEXT=test make static-back
          - run:
                name: Analyzes source code to flag programming errors, bugs, stylistic errors, and suspicious constructs
                command: PIM_CONTEXT=test make lint-back
          - run:
                name: Code Coupling Detection
                command: PIM_CONTEXT=test make coupling-back
          - run:
                name: Unit tests
                command: PIM_CONTEXT=test make unit-back
          - run:
                name: Acceptance tests
                command: PIM_CONTEXT=test make acceptance-back
          - store_test_results:
                path: var/tests
          - store_artifacts:
                path: var/tests
          - store_artifacts:
                path: var/logs

  test_back_phpunit:
      machine:
          image: ubuntu-2004:202201-02
      parallelism: 20
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PhpUnit Integration
                command: PIM_CONTEXT=test make pim-integration-back
          - run:
                name: PhpUnit End to end
                command: PIM_CONTEXT=test make end-to-end-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

  test_back_behat_legacy:
    machine:
        image: ubuntu-2004:202201-02
    parallelism: 40
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Get Behat Suite name to run
          command: |
            TESTSUITE=$(echo $CIRCLE_BRANCH | sed -e 's/^.*-\([^-]*\)$/\1/g')
            if ! [[ $TESTSUITE =~ ^(weasel|chipmunk|raccoon)$ ]] ; then
              TESTSUITE="all"
            fi
            echo "Behat Suite to run: "$TESTSUITE
            echo "export TESTSUITE=$TESTSUITE" >> $BASH_ENV
      - run:
          name: Change owner on project dir in order to archive the project into the workspace
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            docker load -i php-pim-image.tar
            APP_ENV=behat C='fpm mysql elasticsearch httpd object-storage selenium pubsub-emulator' make up
            docker/wait_docker_up.sh
      - run:
          name: Install database
          command: APP_ENV=behat make database
      - run:
          name: End to end Behat tests
          command: PIM_CONTEXT=test make end-to-end-legacy SUITE=$TESTSUITE
      - run:
          name: Gather Junit test result files in the same directory to improve the render of failing tests
          command: |
              set -e
              cd var/tests/behat
              sudo chmod -R 777 .
              for subdir in */*; do mv "${subdir}" "${subdir/\//_}"; done
          when: always
      - store_test_results:
          path: var/tests/behat
      - store_artifacts:
          path: var/tests/behat
      - store_artifacts:
          path: var/logs
      - store_artifacts:
          path: var/tests/screenshots

  pull_request_success:
      docker:
          - image: alpine/git
      steps:
          - run:
              name: Success
              command: echo "The build has run with success! Let's merge :)"

  test_front_static_acceptance_and_integration:
      machine:
          image: ubuntu-2004:202201-02
      steps:
        - attach_workspace:
            at: ~/
        - run:
              name: Create yarn cache folder
              command: mkdir -p  ~/.cache/yarn
        - run:
              name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
              command: sudo chown -R 1000:1000 ../project ~/.cache/yarn
        - run:
            name: Front type checking
            command: make javascript-dev-strict
        - run:
            name: Front linter
            command: PIM_CONTEXT=test make lint-front
        - run:
            name: Front unit tests
            command: PIM_CONTEXT=test make unit-front

  test_back_performance:
    machine:
        image: ubuntu-2004:202201-02
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Change owner on project dir (docker needs uid 1000, circleci can be another uid)
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            export ES_JAVA_OPTS='-Xms2g -Xmx2g'
            docker load -i php-pim-image.tar
            APP_ENV=test APP_DEBUG=false C='fpm mysql httpd elasticsearch object-storage blackfire pubsub-emulator' make up
            docker/wait_docker_up.sh
      - run:
          name: Run performance tests
          command: APP_ENV=test .circleci/run_performance_tests.sh
      - store_test_results:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/logs

  test_back_missing_structure_migrations:
      machine:
        image: ubuntu-2004:202201-02
      steps:
        -   attach_workspace:
                at: ~/
        -   run:
                name: Load php image
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
        -   run:
                name: Restore permissions on files
                command: git checkout -- .
        -   run:
                name: Restore permissions on vendor files
                command: |
                    cd vendor/akeneo/pim-community-dev
                    git checkout -- .
        -   run:
                name: Change owner on project dir after restoring cache
                command: sudo chown -R 1000:1000 ../project
        -   run:
                name: Test missing database and index structure migrations
                command: vendor/akeneo/pim-community-dev/.circleci/detect_structure_changes.sh $CIRCLE_BRANCH

  test_back_data_migrations:
      machine:
          image: ubuntu-2004:202201-02
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PhpUnit Migration
                command: PIM_CONTEXT=test make migration-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

orbs:
  pull-up: akeneo-orbs/pull-up@1.0

workflows:
  version: 2
  pull_request:
      jobs:
          - ready_to_build?:
                type: approval
                filters:
                    branches:
                        ignore:
                            - "5.0"
          - checkout_ee:
                requires:
                    - ready_to_build?
          - build_dev:
                path_to_dsm: vendor/akeneo/pim-community-dev/akeneo-design-system
                requires:
                    - checkout_ee
          - test_back_static_and_acceptance:
                requires:
                    - build_dev
          - test_front_static_acceptance_and_integration:
                requires:
                    - build_dev
          - test_back_phpunit:
                requires:
                    - build_dev
          - test_back_performance:
                requires:
                    - build_dev
          - test_back_data_migrations:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
                    - test_back_phpunit
          - test_back_behat_legacy:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
                    - test_back_phpunit
          - pull_request_success:
                requires:
                    - test_back_behat_legacy
                    - test_back_performance
                    - test_back_data_migrations

          - ready_to_build_only_ce?:
                type: approval
                filters:
                    branches:
                        ignore:
                            - "5.0"
          - checkout_ce:
                requires:
                    - ready_to_build_only_ce?
          - build_dev:
                name: build_dev_ce
                is_ee_built: false
                requires:
                    - checkout_ce
          - test_back_static_and_acceptance:
                name: test_back_static_and_acceptance_ce
                requires:
                    - build_dev_ce
          - test_front_static_acceptance_and_integration:
                name: test_front_static_acceptance_and_integration_ce
                requires:
                    - build_dev_ce
          - test_back_phpunit:
                name: test_back_phpunit_ce
                requires:
                    - build_dev_ce
          - test_back_data_migrations:
                name: test_back_data_migrations_ce
                requires:
                    - test_back_phpunit_ce
          - test_back_behat_legacy:
                name: test_back_behat_legacy_ce
                requires:
                    - test_back_static_and_acceptance_ce
                    - test_front_static_acceptance_and_integration_ce
                    - test_back_phpunit_ce

  nightly:
      triggers:
          - schedule:
                cron: "0 23 * * *"
                filters:
                    branches:
                        only:
                            - "5.0"
      jobs:
          - checkout_ce
          - build_dev:
                is_ee_built: false
                requires:
                    - checkout_ce
          - test_back_static_and_acceptance:
                requires:
                    - build_dev
          - test_front_static_acceptance_and_integration:
                requires:
                    - build_dev
          - test_back_phpunit:
                requires:
                    - build_dev
          - test_back_behat_legacy:
                requires:
                    - build_dev
          - test_back_data_migrations:
                requires:
                    - build_dev

  pull_up:
    jobs:
      - pull-up/pull-up:
          from: "5.0"
          into: "6.0"
          branch_prefix: "50_to_60"
          checkout_ours: 'src/Akeneo/Platform/CommunityVersion.php **/translations/*.yml'
          github_token: MICHEL_TAG_TOKEN
          github_username: "micheltag"
          slack_webhook: "${SLACK_URL_PULL_UP}"
          filters:
            branches:
              only:
                - "5.0"

commands:
  restore_persisted_env_vars:
    description: "Restore env vars that have been persisted by the previous job."
    steps:
      - run:
         name: Restore persisted env vars
         command: |
            echo "Persisted env vars:"
            cat persisted_env_vars
            cat persisted_env_vars >> $BASH_ENV
