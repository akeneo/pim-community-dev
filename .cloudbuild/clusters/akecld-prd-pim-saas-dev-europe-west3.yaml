# Cluster dev N+1
# For this cluster, we test the deployments modifications on the branches
steps:
  - id: "Stop current build if ongoing build is ongoing"
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - -c
    - |
        # Set project configuration
        gcloud config set project ${PROJECT_ID}
        if [ "${BRANCH_NAME}" != "master" ]; then
          on_going_build_plan=($(gcloud builds list --ongoing --format='value(id)' --filter="${_CLUSTER_NAME}-plan" | xargs))
          for (( i=0; i<${#on_going_build_plan[@]}; i++ )); do
            if [ "$i" -gt "0" ]; then # skip current build
              echo "Cancelling current build, because there is at least another build ongoing (${on_going_build_plan[i]})"
              exit 1
            fi
          done
        else
          on_going_build_apply=($(gcloud builds list --ongoing --format='value(id)' --filter="${_CLUSTER_NAME}-apply" | xargs))
          for (( i=0; i<${#on_going_build_apply[@]}; i++ )); do
            if [ "$i" -gt "0" ]; then # skip current build
              echo "Cancelling current build, because there is at least another build ongoing (${on_going_build_apply[i]})"
              exit 1
            fi
          done
        fi
  - id: Install prerequisite for the PIM
    name: "europe-west1-docker.pkg.dev/akecld-prd-pim-saas-shared/prod/pim-deployer:1.2.0"
    dir: "deployments-ucs"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
        # Set cluster authentication
        gcloud config set auth/impersonate_service_account ${_TARGET_IMPERSONATE}
        gcloud config set project ${_GOOGLE_PROJECT_ID}
        gcloud config set compute/zone ${_GOOGLE_COMPUTE_ZONE}
        gcloud container clusters get-credentials ${_CLUSTER_NAME} --project=${_GOOGLE_PROJECT_ID} --region=${_GOOGLE_CLUSTER_REGION}

        # Custom configuration
        ## Argocd
        yq -i '.configs.credentialTemplates.https-creds.username = "argocd"' argocd/values.yaml
        ARGOCD_GITHUB_TOKEN="$${ARGOCD_GITHUB_TOKEN}" yq -i '.configs.credentialTemplates.https-creds.password = env(ARGOCD_GITHUB_TOKEN)' argocd/values.yaml
        # Set the correct service account for argocd repoServer
        GSA_ARGOCD="argocd@${_GOOGLE_PROJECT_ID}.iam.gserviceaccount.com" yq -i '.repoServer.serviceAccount.annotations."iam.gke.io/gcp-service-account" = env(GSA_ARGOCD)' argocd/values.yaml

        # Append the values file to use for the argocd apps
        VALUES_FILES=("values.yaml" "values-${_CLUSTER_ENV}.yaml" "values-${_GOOGLE_CLUSTER_REGION}.yaml" "values-${_GOOGLE_PROJECT_ID}.yaml" "values-${_CLUSTER_NAME}.yaml")
        yq -i '(.applications.[] | select(.name == "infra-apps").source.helm.valueFiles) = []' argocd-apps/values.yaml
        for VALUES in "$${VALUES_FILES[@]}"
        do
          if [[ -f "infra/k8s/argocd-apps/$${VALUES}" ]]; then
            echo "Adding infra/k8s/argocd-apps/$${VALUES} to values"
            VALUES="$${VALUES}" yq -i '(.applications.[] | select(.name == "infra-apps").source.helm.valueFiles) += env(VALUES)' argocd-apps/values.yaml
          else
            echo "infra/k8s/argocd-apps/$${VALUES} does not exists"
          fi
        done

        # Append the values file to use for the argocd apps (pim-saas-service)
        VALUES="values-${_CLUSTER_NAME}.yaml" yq -i '(.applications.[] | select(.name != "infra-apps").source.helm.valueFiles) += env(VALUES)' argocd-apps/values.yaml

        # Change the branch for infra
        BRANCH_NAME="${BRANCH_NAME}" yq -i '.applications[].source.targetRevision = env(BRANCH_NAME)' argocd-apps/values.yaml

        # Use helm repo
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update 2>&1

        ## Datadog
        kubectl create secret generic datadog-api-secret --from-literal api-key="$${DATADOG_API_KEY}" --dry-run=client -o yaml | kubectl apply -f -

        # Install prerequisite
        ## ArgoCD
        helm upgrade --version ${_ARGOCD_HELM_VERSION} --debug --atomic --cleanup-on-fail --history-max 5 -i --wait --create-namespace -n argocd argocd argo/argo-cd -f argocd/values.yaml
        helm upgrade --version ${_ARGOCD_APP_HELM_VERSION} --debug --atomic --cleanup-on-fail --history-max 5 -i --wait --create-namespace -n argocd argocd-apps argo/argocd-apps -f argocd-apps/values.yaml
    secretEnv: ['ARGOCD_GITHUB_TOKEN', 'DATADOG_API_KEY']

logsBucket: 'gs://${_GOOGLE_PROJECT_ID}-cloudbuild-logs'
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/ARGOCD_GITHUB_TOKEN/versions/latest
    env: 'ARGOCD_GITHUB_TOKEN'
  - versionName: projects/${PROJECT_ID}/secrets/DATADOG_API_KEY/versions/latest
    env: 'DATADOG_API_KEY'
substitutions:
  _ARGOCD_HELM_VERSION: 5.16.7
  _ARGOCD_APP_HELM_VERSION: 0.0.3
  _CLUSTER_ENV: dev
  _CLUSTER_NAME: akecld-prd-pim-saas-dev-europe-west3
  _GOOGLE_CLUSTER_REGION: europe-west3
  _GOOGLE_COMPUTE_ZONE: europe-west3-b
  _GOOGLE_DOMAIN: ci.pim.akeneo.cloud
  _GOOGLE_PROJECT_ID: akecld-prd-pim-saas-dev
  _TARGET_IMPERSONATE: cluster-bootstrap@akecld-prd-pim-saas-dev.iam.gserviceaccount.com
