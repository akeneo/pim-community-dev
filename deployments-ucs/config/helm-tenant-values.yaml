editionFlag:
  enabled: ${USE_EDITION_FLAG}

image:
  pim:
    tag: ${IMAGE_TAG}

global:
  extraLabels: &global_extraLabels
    tags.akeneo.com/instance_fqdn: ${FQDN}
    tags.akeneo.com/instance_type: ${TYPE}
    tags.akeneo.com/instance_dns_record: ${INSTANCE_NAME}
    tags.akeneo.com/instance_dns_zone: ${GOOGLE_MANAGED_ZONE_DNS}
    tags.akeneo.com/portal_project_code: ${PORTAL_PROJECT_CODE}
    tags.akeneo.com/product_reference_code: ${PRODUCT_REFERENCE_CODE}
    tags.akeneo.com/product_reference_type: ${PRODUCT_REFERENCE_TYPE}
    tags.akeneo.com/product_reference_size: ${PRODUCT_REFERENCE_SIZE}
    tags.akeneo.com/pfid: ${PFID} # deprecated
    tags.akeneo.com/product_reference: serenity # deprecated
    tags.akeneo.com/papo_project_code: ${PORTAL_PROJECT_CODE} # deprecated
    type: ${TYPE} # deprecated
    instanceName: ${INSTANCE_NAME} # deprecated
    pfid: ${PFID} # deprecated
    instance_dns_record: ${GOOGLE_MANAGED_ZONE_DNS} # deprecated
    instance_dns_zone: ${GOOGLE_MANAGED_ZONE_DNS} # deprecated
    papo_project_code: ${PORTAL_PROJECT_CODE} # deprecated
    papo_project_code_truncated: ${PORTAL_PROJECT_CODE} # deprecated
    papo_project_code_hashed: ${PORTAL_PROJECT_CODE} # deprecated

elasticsearch:
  cluster:
    env:
      cluster.routing.allocation.disk.watermark.low: .97
      cluster.routing.allocation.disk.watermark.high: .98
      cluster.routing.allocation.disk.watermark.flood_stage: .99
  client:
    podAnnotations:
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: client
      <<: *global_extraLabels
    heapSize: ${ES_CLIENT_HEAP_SIZE}
    resources:
      limits:
        memory: ${ES_CLIENT_LIMITS_MEMORY}
      requests:
        cpu: ${ES_CLIENT_REQUESTS_CPU}
        memory: ${ES_CLIENT_REQUESTS_MEMORY}
  master:
    podAnnotations:
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
      <<: *global_extraLabels
    heapSize: ${ES_MASTER_HEAP_SIZE}
    resources:
      limits:
        memory: ${ES_MASTER_LIMITS_MEMORY}
      requests:
        cpu: ${ES_MASTER_REQUESTS_CPU}
        memory: ${ES_MASTER_REQUESTS_MEMORY}
  data:
    podAnnotations:
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: data
      <<: *global_extraLabels
    heapSize: ${ES_DATA_HEAP_SIZE}
    resources:
      limits:
        memory: ${ES_DATA_LIMITS_MEMORY}
      requests:
        cpu: ${ES_DATA_REQUESTS_CPU}
        memory: ${ES_DATA_REQUESTS_MEMORY}

memcached:
  podAnnotations:
    app.kubernetes.io/name: memcached
    app.kubernetes.io/component: caching
    <<: *global_extraLabels
  resources:
    limits:
      memory: ${MEMCACHED_LIMITS_MEMORY}
    requests:
      cpu: ${MEMCACHED_REQUESTS_CPU}
      memory: ${MEMCACHED_REQUESTS_MEMORY}

common:
  gcpProjectID: ${GOOGLE_PROJECT_ID}
  googleZone: ${GOOGLE_CLUSTER_ZONE}
  pimMasterDomain: ${FQDN}
  dnsCloudDomain: ${GOOGLE_MANAGED_ZONE_DNS}

backup:
  projectId: ${GOOGLE_PROJECT_ID}
  zone: ${GOOGLE_CLUSTER_ZONE}

mailer:
  login: ${MAILGUN_LOGIN}
  password: ${MAILGUN_PASSWORD}
  base_mailer_url: "smtp://${MAILGUN_HOST}:${MAILGUN_PORT}"
  domain: ${MAILGUN_DOMAIN}
  api_key: ${MAILGUN_API_KEY}

pim:
  web:
    namespace: ${PIM_NS}
  api:
    namespace: ${PIM_NS}
  firestore:
    collection: ${FIRESTORE_COLLECTION}
    documentId: ${PFID}
    # data: "{'AKENEO_PIM_URL': 'https://ucs..example.com'"
    data: ${FIRESTORE_DATA}
  monitoring:
    authenticationToken: ${MONITORING_AUTHENTICATION_TOKEN}
  storage:
    bucketName: ${PFID}
    location: ${STORAGE_LOCATION}

mysql:
  mysql:
    userPassword: ${MYSQL_USER_PASSWORD}
    rootPassword: ${MYSQL_ROOT_PASSWORD}
    dataDiskSize: ${MYSQL_DISK_SIZE}
    innodbBufferPoolSize: ${MYSQL_INNODB_BUFFER_POOL_SIZE}
    resources:
      limits:
        memory: ${MYSQL_LIMITS_MEMORY}
      requests:
        cpu: ${MYSQL_REQUESTS_CPU}
        memory: ${MYSQL_REQUESTS_MEMORY}
  common:
    persistentDisks:
    - ${MYSQL_DSIK_NAME}
    class: ${MYSQL_DSIK_STORAGE_CLASS}
  extraAnnotations:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database
