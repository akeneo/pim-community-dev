{#
    Render attribute row
    Parameters:
        title - attribute title
        value - attribute value
        additionalData - array with additional data
#}
{% macro attibuteRow(title, value, additionalData) %}
        {% macro attribute_data(value, additionalData) %}
            <div class="clearfix-oro">
                {% if value.value is not defined  %}
                    <p class="control-label">{{ value }}</p>
                {% else %}
                    <p class="control-label">{{ value.value }} <strong>{{ value.hint|trans }}</strong></p>
                {% endif %}
            </div>
            {% if additionalData|length %}
                {% for data in additionalData.data %}
                    <div class="clearfix-oro">
                        <p class="control-label">{{ attribute(data, additionalData.field) }}</p>
                    </div>
                {% endfor %}
            {% endif %}
        {% endmacro %}
        {{ _self.renderAttribute(title, _self.attribute_data(value, additionalData)) }}
{% endmacro %}

{#
    Render attribute row with custom data block
    Parameters:
        title - row title
        data - row data
#}
{% macro renderAttribute(title, data) %}
    <div class="control-group">
        <label class="control-label">{{ title|trans }}</label>
        <div class="controls">
            {{ data|raw }}
        </div>
    </div>
{% endmacro %}

{#
    Create the button
    Parameters - array:
        [
            'path' - button url
            'aClass' - additional button class
            'title' - button title
            'iClass' - css class for 'i' tag (icon)
            'label' - button label
        ]
#}
{% macro button(parameters) %}
    <div class="pull-left btn-group icons-holder">
        <a href="#{{ parameters.path }}"
           class="btn back icons-holder-text {{ parameters.aClass is defined? parameters.aClass : '' }}"
           title="{{ parameters.title|trans }}">
            {% if parameters.iClass is defined %}
                <i class="{{ parameters.iClass }} hide-text" >{{ parameters.label|trans }}</i>
            {% endif %}
            {{ parameters.label|trans }}
        </a>
    </div>
{% endmacro %}

{#
    Delete button with javascript handler
    Parameters - array:
        [
            'aCss' - additional css class for 'a' tag
            'dataId' - data-id parameter
            'dataMessage' - message before delete record
            'dataRedirect' - url to redirect after delete
            'dataUrl' - data-url parameter
            'title' - button title
            'label' - button label
        ]
#}
{% macro deleteButton(parameters) %}
    <div class="pull-left btn-group icons-holder">
        <a href="javascript: void(0);" class="btn icons-holder-text {{ parameters.aCss is defined? parameters.aCss : '' }}"
            {% if (parameters.id is defined) %}
                id="{{ parameters.id }}"
            {% endif %}
            {% if (parameters.dataId is defined) %}
                data-id="{{ parameters.dataId }}"
            {% endif %}
            data-message="{{ parameters.dataMessage|trans }}"
            data-success-message="{{ parameters.successMessage|default('Item deleted')|trans }}"
            {% if (parameters.dataUrl is defined) %}
                data-url="{{ parameters.dataUrl }}"
            {% endif %}
            {% if parameters.dataRedirect is defined %}
                data-redirect="{{ parameters.dataRedirect  }}"
            {% endif %}
            {% if parameters.data is defined %}
                {% for dataItemName,dataItemValue in parameters.data %}
                data-{{ dataItemName }}="{{ dataItemValue|raw }}"
                {% endfor %}
            {% endif %}
            {% if (parameters.title is defined) %}
                title="{{ parameters.title|trans }}"
            {% endif %}
           ><i class="icon-trash"></i>{{ parameters.label|trans -}}
        </a>
    </div>
{% endmacro %}

{#
    Button macros with custom button type
    Parameters - array:
        [
            'type' - button type
            'class' - additional button css classes
            'label' - label of button
        ]
#}
{% macro buttonType(parameters) %}
    <div class="btn-group">
        <button type="{{ parameters.type }}" class="btn {% if (parameters.class is defined) %}{{ parameters.class }}{% endif %}{% if (parameters.action is defined) %} action-button{% endif %}"
                {% if (parameters.action is defined) %}data-action="{{ parameters.action }}"{% endif %}>
            {% if (parameters.iClass is defined) %}<i class="{{ parameters.iClass }}"></i>{% endif %}
            {{ parameters.label|trans }}
        </button>
    </div>
{% endmacro %}

{% macro saveAndCloseButton(label = 'Save and Close') %}
    {{ _self.buttonType({'type': 'submit', 'class': 'btn-primary icons-holder-text', 'label': label, 'iClass': 'icon-ok'}) }}
{% endmacro %}

{% macro saveAndStayButton(acl = '', label = 'Save') %}
    {% if acl is empty or resource_granted(acl) %}
    {{ _self.buttonType({'type': 'button', 'class': 'btn-primary btn-submit icons-holder-text', 'label': label, 'action': 'save_and_stay', 'iClass': 'icon-ok'}) }}
    {% endif %}
{% endmacro %}

{#
    Create scroll sub block for scroll block
    Parameters:
        title - title of sub block
        data - array with data fields (i.e. form_row() or attibuteRow() data)
        isForm - flag what scroll block mut contain the form
#}
{% macro scrollSubblock(title, data, isForm) %}
    <div>
    {% if title|length %}<h5 class="user-fiedset"><span>{{ title|trans }}</span></h5>{% endif %}
    {% for dataBlock in data %}
        {{ dataBlock|raw }}
    {% endfor %}
    </div>
    {#% if span %}
        </div>
    {% endif %#}
{% endmacro %}

{#
    Create scroll block for scroll data area
    Parameters:
        blockId - id of block
        title - block title
        'subblocks' - array with scroll sub blocks:
            [
                'title' - title of sub block
                'data' - array with data fields (i.e. form_row() or attibuteRow() data)
            ]
        isForm - flag what scroll block mut contain the form
        contentAttributes - additional attributes for block content
        useSubBlockDivider - indicates if 'row-fluid-divider' css class should be added to a row when there are more than one subblocks
#}
{% macro scrollBlock(blockId, title, subblocks, isForm, contentAttributes, useSubBlockDivider) %}
    {% set cols = subblocks|length %}
    <div class="responsive-section">
        <h4 class="scrollspy-title">{{ title|trans }}</h4>
        <div id="{{ blockId }}" class="scrollspy-nav-target"></div>
        <div class="row-fluid{% if (contentAttributes is defined and contentAttributes.class is defined and contentAttributes.class|length) %} {{ contentAttributes.class }}{% endif %}{% if cols > 1 and (useSubBlockDivider is not defined or useSubBlockDivider == true) %} row-fluid-divider{% endif %}" {{ _self.attributes(contentAttributes, ['class']) }}>
            {% if isForm is defined and isForm == true %}
                <fieldset class="form-horizontal">
            {% else %}
                <div class="form-horizontal">
            {% endif %}
                {% for subblock in subblocks %}
                    {{ _self.scrollSubblock(subblock.title|length ? subblock.title : null, subblock.data, isForm, true) }}
                {% endfor %}
            {% if isForm is defined and isForm == true %}
                </fieldset>
            {% else %}
                </div>
            {% endif %}
        </div>
    </div>
{% endmacro %}

{#
    Create scroll blocks (like in view or update pages)
    Parameters:
        dataTarget - id of scroll block
        data - array with scroll data blocks
        form
    data parameter structure:
        [
            'dataBlocks' - array of blocks. each block consist of:
                [
                    'title' - title of scroll block
                    'class' - additional css class for scroll block menu item
                    'useSubBlockDivider' - [optional] indicates if 'row-fluid-divider' css class should be added to a row when there are more than one subblocks
                    'subblocks' - array with scroll sub blocks:
                        [
                            'title' - title of sub block
                            'data' - array with data fields (i.e. form_row() or attibuteRow() data)
                        ]
                ]
            'formErrors' - errors from the form
            'hiddenData' - additional data (hidden fields from the form)
        ]
#}
{% macro scrollData(dataTarget, data, form = null) %}
    {% if form is defined and form %}
        {% set isForm = true %}
    {% else %}
        {% set isForm = false %}
    {% endif %}

    {% set dataBlocks = data.dataBlocks %}

    <div id="{{ dataTarget }}" class="navbar navbar-static scrollspy-nav">
        <div class="navbar-inner">
            <div class="row-fluid" style="width: auto;">
                <ul class="nav">
                    {% for navElement in dataBlocks %}
                        <li {% if navElement.class is defined %}class="{{ navElement.class }}"{% endif %}><a href="#scroll-{{ loop.index }}">{{ navElement.title|trans }}</a></li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>
    <div class="clearfix">
        {% if data.formErrors is defined and data.formErrors | length%}
            <div class="customer-info-actions container-fluid alert-wrap">
                <div class="alert alert-error">
                    <button class="close" type="button" data-dismiss="alert" data-target=".alert-wrap">Ã—</button>
                    {{ data.formErrors|raw }}
                </div>
            </div>
        {% endif %}
        <div data-spy="scroll" data-target="#{{ dataTarget }}" data-offset="1" class="scrollspy container-fluid scrollable-container{% if isForm %} form-container{% endif %}">
            {% for scrollBlock in dataBlocks %}
                {{ _self.scrollBlock("scroll-" ~ loop.index, scrollBlock.title, scrollBlock.subblocks, isForm, scrollBlock.content_attr is defined ? scrollBlock.content_attr : null, scrollBlock.useSubBlockDivider is defined ? scrollBlock.useSubBlockDivider : true) }}
            {% endfor %}
            {% if data.hiddenData is defined or isForm %}
                <div class="hide">
                    {% if data.hiddenData is defined %}
                        {{ data.hiddenData|raw }}
                    {% endif %}
                    {% if isForm %}
                        {{ form_rest(form) }}
                    {% endif %}
                </div>
            {% endif %}
        </div>
    </div>
{% endmacro %}

{#
    Render attributes of HTML element.
    Parameters:
        attr - attributes
        excludes - names of attributes which should not be rendered even if they exist in attr parameter
#}
{% macro attributes(attr, excludes) %}
    {% spaceless %}
        {% set attr = attr|default({}) %}
        {% for attrname, attrvalue in attr %}{% if not excludes is defined or not excludes[attrname] is defined %}{% if attrname in ['placeholder', 'title'] %}{{ attrname }}="{{ attrvalue|trans({}, translation_domain) }}" {% else %}{{ attrname }}="{{ attrvalue }}" {% endif %}{% endif %}{% endfor %}
    {% endspaceless %}
{% endmacro %}
