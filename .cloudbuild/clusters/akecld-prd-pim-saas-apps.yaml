steps:
  - id: "Stop current build if ongoing build is ongoing"
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - -c
    - |
        # Set project configuration
        gcloud config set project ${PROJECT_ID}
        on_going_build_plan=($(gcloud builds list --ongoing --format='value(id)' --filter="substitutions.TRIGGER_NAME=$TRIGGER_NAME" | xargs))
        for (( i=0; i<${#on_going_build_plan[@]}; i++ )); do
          if [ "$i" -gt "0" ]; then # skip current build
            echo "Cancelling current build, because there is at least another build ongoing (${on_going_build_plan[i]})"
            exit 1
          fi
        done

  - id: configure gcloud
    name: "${_PIM_DEPLOYER_IMAGE}"
    dir: "deployments-ucs"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
        # Set cluster authentication
        gcloud config set auth/impersonate_service_account ${_TARGET_IMPERSONATE}
        gcloud config set project ${_GOOGLE_PROJECT_ID}
        gcloud container clusters get-credentials ${_CLUSTER_NAME} --project=${_GOOGLE_PROJECT_ID} --region=${_REGION}

  - id: configure argocd values
    name: "${_PIM_DEPLOYER_IMAGE}"
    dir: "deployments-ucs"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
        ## Argocd
        yq -i '.configs.credentialTemplates.https-creds.username = "argocd"' argocd/values.yaml
        ARGOCD_GITHUB_TOKEN="$${ARGOCD_GITHUB_TOKEN}" yq -i '.configs.credentialTemplates.https-creds.password = env(ARGOCD_GITHUB_TOKEN)' argocd/values.yaml
        # Set the correct service account for argocd repoServer
        GSA_ARGOCD="argocd@${_GOOGLE_PROJECT_ID}.iam.gserviceaccount.com" yq -i '.repoServer.serviceAccount.annotations."iam.gke.io/gcp-service-account" = env(GSA_ARGOCD)' argocd/values.yaml
    secretEnv: ['ARGOCD_GITHUB_TOKEN']

  - id: configure infra values
    name: "${_PIM_DEPLOYER_IMAGE}"
    dir: "deployments-ucs"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
        #Append the values file to use for the argocd apps
        VALUES_FILES=("values.yaml" "values-${_CLUSTER_ENV}.yaml" "values-${_REGION}.yaml" "values-${_GOOGLE_PROJECT_ID}.yaml" "values-${_CLUSTER_NAME}.yaml")
        yq -i '(.applications.[] | select(.name == "infra-apps").source.helm.valueFiles) = []' argocd-apps/values.yaml
        for VALUES in "$${VALUES_FILES[@]}"
        do
          if [[ -f "infra/k8s/argocd-apps/$${VALUES}" ]]; then
            echo "Adding infra/k8s/argocd-apps/$${VALUES} to values"
            VALUES="$${VALUES}" yq -i '(.applications.[] | select(.name == "infra-apps").source.helm.valueFiles) += env(VALUES)' argocd-apps/values.yaml
          else
            echo "infra/k8s/argocd-apps/$${VALUES} does not exists"
          fi
        done

        # Append the values file to use for the argocd apps (pim-saas-service)
        VALUES="values-${_CLUSTER_NAME}.yaml" yq -i '(.applications.[] | select(.name != "infra-apps").source.helm.valueFiles) += env(VALUES)' argocd-apps/values.yaml

  - id: Update helm
    name: "${_PIM_DEPLOYER_IMAGE}"
    dir: "deployments-ucs"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
        # Use helm repo
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update 2>&1

  - id: Create secrets
    name: "${_PIM_DEPLOYER_IMAGE}"
    dir: "deployments-ucs"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
        if [ "${_APPLY}" == "true" ]; then
          ## Datadog
          kubectl create secret generic datadog-api-secret --from-literal api-key="$${DATADOG_API_KEY}" --dry-run=client -o yaml
        else
          ## Datadog
          kubectl create secret generic datadog-api-secret --from-literal api-key="$${DATADOG_API_KEY}" --dry-run=client -o yaml | kubectl apply -f -
        fi
    secretEnv: ['DATADOG_API_KEY']

  - id: Deploy argocd
    name: "${_PIM_DEPLOYER_IMAGE}"
    dir: "deployments-ucs"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
        if [ "${_APPLY}" != "true" ]; then
          helm upgrade --version ${_ARGOCD_HELM_VERSION} --dry-run --debug -i --create-namespace -n argocd argocd argo/argo-cd -f argocd/values.yaml
        else
          helm upgrade --version ${_ARGOCD_HELM_VERSION} --debug --atomic --cleanup-on-fail --history-max 5 -i --wait --create-namespace -n argocd argocd argo/argo-cd -f argocd/values.yaml
        fi

  - id: Deploy argocd apps
    name: "${_PIM_DEPLOYER_IMAGE}"
    dir: "deployments-ucs"
    entrypoint: 'bash'
    args:
    - '-c'
    - |
        if [ "${_APPLY}" != "true" ]; then
          helm upgrade --version ${_ARGOCD_APP_HELM_VERSION} --dry-run --debug -i --create-namespace -n argocd argocd-apps argo/argocd-apps -f argocd-apps/values.yaml
        else
          helm upgrade --version ${_ARGOCD_APP_HELM_VERSION} --debug --atomic --cleanup-on-fail --history-max 5 -i --wait --create-namespace -n argocd argocd-apps argo/argocd-apps -f argocd-apps/values.yaml
        fi

logsBucket: '${_LOGS_BUCKET}'
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/ARGOCD_GITHUB_TOKEN/versions/latest
    env: 'ARGOCD_GITHUB_TOKEN'
  - versionName: projects/${PROJECT_ID}/secrets/DATADOG_API_KEY/versions/latest
    env: 'DATADOG_API_KEY'
options:
  env:
    - 'CLOUDSDK_CONFIG=/workspace/gcloud/config'
    - 'HELM_CACHE_HOME=/workspace/helm/cache'
    - 'HELM_CONFIG_HOME=/workspace/helm/config'
    - 'HELM_DATA_HOME=/workspace/helm/data'
