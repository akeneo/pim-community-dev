version: 2.1

aliases:
  - &envVarsDeployDev
      ENV_NAME: "dev"
      GOOGLE_PROJECT_ID: "akecld-saas-dev"
      GOOGLE_COMPUTE_ZONE: "europe-west3-a"
      CLUSTER_NAME: "europe-west3-a"

  - &dockerCloudDeployer
      docker:
        - image: eu.gcr.io/akeneo-cloud/cloud-deployer:2.3
          auth:
            username: _json_key  # default username when using a JSON key file to authenticate
            password: $GCLOUD_SERVICE_KEY_DEV  # JSON service account you created, do not encode to base64

jobs:
  checkout_ee:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - add_ssh_keys:
          fingerprints:
              - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
      - run:
          name: Download EE dev with the SSH key that we added above
          command: |
              export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
              git clone git@github.com:akeneo/pim-enterprise-dev.git /home/circleci/project
      - run:
          name: Checkout EE branch if it exists, or master otherwise
          command: |
            cd /home/circleci/project
            git checkout ${CIRCLE_BRANCH} || git checkout master
      - run:
          name: Require proper dev CE branch
          command: |
            sed -i "s|\"akeneo/pim-community-dev\": \"dev-master|\"akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}|" composer.json
      - run:
          name: Persist default IMAGE_TAG to be the repo last commit SHA1
          command: echo export IMAGE_TAG=$CIRCLE_SHA1 >> persisted_env_vars
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  checkout_ce:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/
          paths:
              - project

  build_dev:
    parameters:
        is_ee_built:
            type: boolean
            default: true
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - attach_workspace:
            at: ~/
      - run:
          name: Copy docker-compose.override.yml.dist
          command: cp .circleci/docker-compose.override.yml.dist docker-compose.override.yml
      - when:
            condition: << parameters.is_ee_built >>
            steps:
              - run:
                  name: Build the latest EE Docker images
                  command: |
                      make php-image-dev
                      docker save -o php-pim-image.tar akeneo/pim-dev/php:7.4
      - unless:
            condition: << parameters.is_ee_built >>
            steps:
              - run:
                  name: Save the CE image as a tar
                  command: |
                      docker pull akeneo/pim-php-dev:master
                      docker save -o php-pim-image.tar akeneo/pim-php-dev:master
      - run:
          name: Setup tests results folder and log folder
          command: mkdir -p var/tests/phpspec var/tests/csfixer var/logs var/tests/screenshots ~/.cache/yarn ~/.composer
      - run:
          name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
          command: |
              sudo chown -R 1000:1000 ../project
              sudo chown -R 1000:1000 ~/.composer
              sudo chown -R 1000:1000 ~/.cache/yarn
      - run:
          name: Change owner on project dir after restoring cache
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Install back and front dependencies
          command: make dependencies
          environment:
            YARN_REGISTRY: "http://registry.yarnpkg.com"
      - run:
          name: Check PIM requirements
          command: |
              C='mysql elasticsearch' make up
              docker/wait_docker_up.sh
              make check-requirements
      - run:
          name: Install asset
          command: make assets
      - run:
          name: Build Javascript
          command: |
              make javascript-test
              make javascript-dev
      - run:
            name: Change owner on project dir after installing when there is no cache
            command: sudo chmod -R 777 ../project
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  test_back_static_and_acceptance:
      machine:
          image: ubuntu-1604:201903-01
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Load archived docker image
                command: docker load -i php-pim-image.tar
          - run:
                name: Static tests
                command: make static-back
          - run:
                name: Analyzes source code to flag programming errors, bugs, stylistic errors, and suspicious constructs
                command: make lint-back
          - run:
                name: Code Coupling Detection
                command: make coupling-back
          - run:
                name: Unit tests
                command: make unit-back
          - run:
                name: Acceptance tests
                command: make acceptance-back
          - store_test_results:
                path: var/tests
          - store_artifacts:
                path: var/tests
          - store_artifacts:
                path: var/logs

  test_back_phpunit:
      machine:
          image: ubuntu-1604:201903-01
      parallelism: 10
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PhpUnit Integration
                command: make integration-back
          - run:
                name: PhpUnit End to end
                command: make end-to-end-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

  test_back_behat_legacy:
    machine:
        image: ubuntu-1604:201903-01
    parallelism: 20
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Get Behat Suite name to run
          command: |
            TESTSUITE=$(echo $CIRCLE_BRANCH | sed -e 's/^.*-\([^-]*\)$/\1/g')
            if ! [[ $TESTSUITE =~ ^(weasel|chipmunk|raccoon)$ ]] ; then
              TESTSUITE="all"
            fi
            echo "Behat Suite to run: "$TESTSUITE
            echo "export TESTSUITE=$TESTSUITE" >> $BASH_ENV
      - run:
          name: Change owner on project dir in order to archive the project into the workspace
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            docker load -i php-pim-image.tar
            APP_ENV=behat C='fpm mysql elasticsearch httpd object-storage selenium pubsub-emulator' make up
            docker/wait_docker_up.sh
      - run:
          name: Install database
          command: APP_ENV=behat make database
      - run:
          name: End to end Behat tests
          command: make end-to-end-legacy SUITE=$TESTSUITE
      - run:
          name: Gather Junit test result files in the same directory to improve the render of failing tests
          command: |
              set -e
              cd var/tests/behat
              sudo chmod -R 777 .
              for subdir in */*; do mv "${subdir}" "${subdir/\//_}"; done
          when: always
      - store_test_results:
          path: var/tests/behat
      - store_artifacts:
          path: var/tests/behat
      - store_artifacts:
          path: var/logs
      - store_artifacts:
          path: var/tests/screenshots

  pull_request_success:
      docker:
          - image: alpine/git
      steps:
          - run:
              name: Success
              command: echo "The build has run with success! Let's merge :)"

  test_front_static_acceptance_and_integration:
      machine:
          image: ubuntu-1604:201903-01
      steps:
        - attach_workspace:
            at: ~/
        - run:
              name: Create yarn cache folder
              command: mkdir -p  ~/.cache/yarn
        - run:
              name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
              command: sudo chown -R 1000:1000 ../project ~/.cache/yarn
        - run:
            name: Front type checking
            command: make javascript-dev-strict
        - run:
            name: Front linter
            command: make lint-front
        - run:
            name: Front unit tests
            command: make unit-front
        - run:
            name: Front acceptance tests
            command: make acceptance-front
        - run:
            name: Front integration tests
            command: make integration-front

  test_back_performance:
    machine:
        image: ubuntu-1604:201903-01
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            export ES_JAVA_OPTS='-Xms2g -Xmx2g'
            docker load -i php-pim-image.tar
            APP_ENV=test APP_DEBUG=false C='fpm mysql httpd elasticsearch object-storage blackfire pubsub-emulator' make up
            docker/wait_docker_up.sh
      - run:
          name: Run performance tests
          command: APP_ENV=test .circleci/run_performance_tests.sh
      - store_test_results:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/logs

  build_prod:
      parameters:
          is_ee_built:
              type: boolean
              default: true
      environment:
        <<: *envVarsDeployDev
      machine:
          image: ubuntu-1604:201903-01
      steps:
          - attach_workspace:
                at: ~/
          - set_gcloud_config_dev
          - restore_persisted_env_vars
          - run:
              name: Build PROD PIM docker image
              command: IMAGE_TAG_DATE=$(date +%Y%m%d%H%M%S) make php-image-prod
          - run:
              name: Push PROD PIM image on docker registry
              command: make push-php-image-prod

  test_deploy:
      environment:
        <<: *envVarsDeployDev
      <<: *dockerCloudDeployer
      steps:
          - attach_workspace:
                at: ~/
          - set_gcloud_config_dev
          - restore_persisted_env_vars
          - run:
              name: Deploy PIM on kubernetes
              command: make deploy-serenity
          - run:
              name: Test PIM connexion on kubernetes
              command: make test-prod
          - run:
              name: Prepare infrastructure artifacts
              command: make prepare-infrastructure-artifacts
              when: on_fail
          - store_artifacts:
              path: ~/artifacts/infra
          - run:
              name: Remove env on kubernetes
              command: make delete
              when: always

  test_upgrade_from_last_release:
      environment:
          <<: *envVarsDeployDev
      <<: *dockerCloudDeployer
      steps:
          - attach_workspace:
                at: ~/
          - add_ssh_keys
          - set_gcloud_config_dev
          - restore_persisted_env_vars
          - run:
                name: Latest SaaS prod deployment on kubernetes
                command: |
                    export GIT_SSH_COMMAND='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
                    LATEST_RELEASE=$(git tag --list | grep -E "^v?[0-9]+$" | sort -r | head -n 1)
                    echo $LATEST_RELEASE
                    INSTANCE_NAME=pimup-$IMAGE_TAG IMAGE_TAG=$LATEST_RELEASE make deploy-serenity
          - run:
                name: Upgrade
                command: |
                    INSTANCE_NAME=pimup-$IMAGE_TAG make deploy-serenity
          - run:
                name: Production tests on upgraded env
                command: INSTANCE_NAME=pimup-$IMAGE_TAG make test-prod
          - run:
                name: Prepare infrastructure artifacts
                command: INSTANCE_NAME=pimup-$IMAGE_TAG make prepare-infrastructure-artifacts
                when: on_fail
          - store_artifacts:
                path: ~/artifacts/infra
          - run:
                name: Remove upgraded env
                command: INSTANCE_NAME_PREFIX=pimup make delete
                when: always

  deploy_pr_environment:
      environment:
          <<: *envVarsDeployDev
      <<: *dockerCloudDeployer
      steps:
          - attach_workspace:
                at: ~/
          - set_gcloud_config_dev
          - restore_persisted_env_vars
          - run:
                name: Deploy PR environment
                command: |
                    if [[ ${CIRCLE_PULL_REQUEST##*/} == "" ]]; then echo "ERROR : CIRCLE_PULL_REQUEST is empty."; exit 1;fi
                    echo "This environment will be available at https://pimci-pr-${CIRCLE_PULL_REQUEST##*/}.dev.cloud.akeneo.com once deployed :) "
          - run:
                name: Deploy PR environment
                command: ENV_NAME=dev INSTANCE_NAME_PREFIX=pimci-pr INSTANCE_NAME=pimci-pr-${CIRCLE_PULL_REQUEST##*/} ACTIVATE_MONITORING=false make deploy-serenity
          - run:
              name: Prepare infrastructure artifacts
              command: ENV_NAME=dev INSTANCE_NAME_PREFIX=pimci-pr INSTANCE_NAME=pimci-pr-${CIRCLE_PULL_REQUEST##*/} make prepare-infrastructure-artifacts
              when: on_fail
          - store_artifacts:
              path: ~/artifacts/infra
          - run:
              name: Remove env on kubernetes
              command: ENV_NAME=dev INSTANCE_NAME_PREFIX=pimci-pr INSTANCE_NAME=pimci-pr-${CIRCLE_PULL_REQUEST##*/} make delete
              when: on_fail

  delete_pr_environment:
      environment:
          <<: *envVarsDeployDev
      <<: *dockerCloudDeployer
      steps:
          - attach_workspace:
                at: ~/
          - set_gcloud_config_dev
          - run:
                name: delete environments
                command: |
                    if [[ ${CIRCLE_PULL_REQUEST##*/} == "" ]]; then echo "ERROR : CIRCLE_PULL_REQUEST is empty."; exit 1;fi
                    echo "remove env from 'deploy_pr_environment'"
                    INSTANCE_NAME=pimci-pr-${CIRCLE_PULL_REQUEST##*/} make delete-serenity

  test_back_missing_structure_migrations:
      machine:
        image: ubuntu-1604:201903-01
      steps:
        -   attach_workspace:
                at: ~/
        -   run:
                name: Load php image
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
        -   run:
                name: Restore permissions on files
                command: git checkout -- .
        -   run:
                name: Restore permissions on vendor files
                command: |
                    cd vendor/akeneo/pim-community-dev
                    git checkout -- .
        -   run:
                name: Change owner on project dir after restoring cache
                command: sudo chown -R 1000:1000 ../project
        -   run:
                name: Test missing database and index structure migrations
                command: vendor/akeneo/pim-community-dev/.circleci/detect_structure_changes.sh $CIRCLE_BRANCH

  test_back_data_migrations:
      machine:
          image: ubuntu-1604:201903-01
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PhpUnit Migration
                command: make migration-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

  test_onboarder_bundle:
      machine:
          image: ubuntu-1604:201903-01
      environment:
          FLAG_ONBOARDER_ENABLED: 1
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Create an empty service account
                command: |
                    mkdir secret
                    echo "{}" > secret/serviceAccount.json
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Load make commands
                command: cp vendor/akeneo/pim-onboarder/onboarder.mk make-file/onboarder.mk
          - run:
                name: Add configuration files to run the bundle tests from the PIM
                command: |
                    rm -f docker-compose.override.yml
                    PIM_VERSION=master SETUP_FOR_CI=1 make setup-onboarder-parameters
                    PIM_VERSION=master make setup-onboarder-tests
                    docker-compose run --rm php php /usr/local/bin/composer dumpautoload
          - run:
                name: Change owner of PIM as some files have been created with wrong owner
                command: sudo chown -R 1000:1000 ~/project
          - run:
                name: Execute static analysis
                command: make test-static-analysis
          - run:
                name: PHP coupling detector
                command: make test-coupling-detector
          - run:
                name: Execute specifications
                command: make test-spec
          - run:
                name: Install Akeneo PIM with Onboarder specific configuration (channel, attribute, ...)
                command: ENVIRONMENT=test SETUP_FOR_CI=1 make onboarder-install
          - run:
                name: Execute acceptance tests
                command: make test-acceptance
          - run:
                name: Execute PHPUnit integration tests
                command: make test-integration
          - run:
                name: Start Apache/FPM and Selenium for End to End tests
                command: make up APP_ENV=behat C='fpm httpd selenium'
          - run:
                name: Execute end-to-end tests
                command: make test-end-to-end
          - run:
              name: Restart FPM with Onboarder feature turned off
              command: make up APP_ENV=behat FLAG_ONBOARDER_ENABLED=0 C='fpm'
          - run:
              name: Execute end-to-end "Onboarder feature disabled" tests
              command: make test-end-to-end-onboarder-disabled
          - store_test_results:
                path: ~/project/pim/var/tests
          - store_artifacts:
                path: ~/project/pim/var/tests
          - store_artifacts:
                path: ~/project/pim/var/logs

workflows:
  version: 2
  pull_request:
      jobs:
          - ready_to_build?:
                type: approval
                filters:
                    branches:
                        ignore:
                            - master
          - checkout_ee:
                requires:
                    - ready_to_build?
          - build_dev:
                requires:
                    - checkout_ee
          - build_prod:
                requires:
                    - checkout_ee
          - test_deploy:
                requires:
                    - build_prod
          - test_upgrade_from_last_release:
                requires:
                    - test_deploy
          - deploy_pr_environment?:
                type: approval
                filters:
                    branches:
                        ignore:
                            - master
                requires:
                    - build_prod
          - delete_pr_environment:
                requires:
                    - delete_pr_environment?
          - delete_pr_environment?:
                type: approval
                filters:
                    branches:
                        ignore:
                            - master
                requires:
                    - deploy_pr_environment
          - deploy_pr_environment:
                requires:
                    - deploy_pr_environment?
          - test_back_static_and_acceptance:
                requires:
                    - build_dev
          - test_front_static_acceptance_and_integration:
                requires:
                    - build_dev
          - test_back_missing_structure_migrations:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - test_back_data_migrations:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - test_back_phpunit:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - test_onboarder_bundle:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
          - test_back_behat_legacy:
                requires:
                    - test_back_data_migrations
                    - test_back_missing_structure_migrations
                    - test_back_phpunit
                    - test_onboarder_bundle
          - test_back_performance:
                requires:
                    - test_back_data_migrations
                    - test_back_missing_structure_migrations
                    - test_back_phpunit
                    - test_onboarder_bundle
          - pull_request_success:
                requires:
                    - test_back_behat_legacy
                    - test_back_performance
                    - test_upgrade_from_last_release
          - ready_to_build_only_ce?:
                type: approval
                filters:
                    branches:
                        ignore:
                            - master
          - checkout_ce:
                requires:
                    - ready_to_build_only_ce?
          - build_dev:
                name: build_dev_ce
                is_ee_built: false
                requires:
                    - checkout_ce
          - test_back_static_and_acceptance:
                name: test_back_static_and_acceptance_ce
                requires:
                    - build_dev_ce
          - test_front_static_acceptance_and_integration:
                name: test_front_static_acceptance_and_integration_ce
                requires:
                    - build_dev_ce
          - test_back_phpunit:
                name: test_back_phpunit_ce
                requires:
                    - test_back_static_and_acceptance_ce
                    - test_front_static_acceptance_and_integration_ce
          - test_back_data_migrations:
                name: test_back_data_migrations_ce
                requires:
                    - test_back_static_and_acceptance_ce
                    - test_front_static_acceptance_and_integration_ce
          - test_back_behat_legacy:
                name: test_back_behat_legacy_ce
                requires:
                    - test_back_phpunit_ce
                    - test_back_data_migrations_ce

  nightly:
      triggers:
          - schedule:
                cron: "0 2 * * *"
                filters:
                    branches:
                        only:
                            - master

      jobs:
          - checkout_ce
          - checkout_ee
          - build_dev:
                is_ee_built: false
                requires:
                    - checkout_ce
          - build_prod:
                requires:
                    - checkout_ee
          - test_back_static_and_acceptance:
                requires:
                    - build_dev
          - test_front_static_acceptance_and_integration:
                requires:
                    - build_dev
          - test_back_phpunit:
                requires:
                    - build_dev
          - test_back_behat_legacy:
                requires:
                    - build_dev
          - test_back_data_migrations:
                requires:
                    - build_dev
          - test_upgrade_from_last_release:
                requires:
                    - build_prod

commands:
  set_gcloud_config_dev:
    description: "Authenticate on GCP services and set config and key to be used by other tools that need to authenticate."
    steps:
      - run:
          name: "Set Gcloud Config."
          shell: "/bin/bash -eo pipefail"
          command: |
            echo ${GCLOUD_SERVICE_KEY_DEV} | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud container clusters get-credentials ${GOOGLE_COMPUTE_ZONE} --project=${GOOGLE_PROJECT_ID} --zone=${GOOGLE_COMPUTE_ZONE}
            echo ${GCLOUD_SERVICE_KEY_DEV} > ${HOME}/gcloud-service-key.json
            echo 'export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"' >> $BASH_ENV
            export GOOGLE_APPLICATION_CREDENTIALS="${HOME}/gcloud-service-key.json"
            gcloud auth configure-docker --quiet

  prepare_terraform:
    description: "Prepare terraform configuration."
    steps:
      - run:
          name: "Prepare terraform configuration."
          shell: "/bin/bash -eo pipefail"
          command: |
            IMAGE_TAG=$CIRCLE_SHA1 make create-ci-release-files

  restore_persisted_env_vars:
    description: "Restore env vars that have been persisted by the previous job."
    steps:
      - run:
         name: Restore persisted env vars
         command: |
            echo "Persisted env vars:"
            cat persisted_env_vars
            cat persisted_env_vars >> $BASH_ENV
