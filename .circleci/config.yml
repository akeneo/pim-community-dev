version: 2.1

setup: true

orbs:
    continuation: circleci/continuation@0.2.0
    git-shallow-clone: guitarrapc/git-shallow-clone@2.4.0
    path-filtering: circleci/path-filtering@0.1.3

jobs:
    merge_config:
        executor: continuation/default
        steps:
            - checkout
#            - git-shallow-clone/checkout
            - run:
                name: Install yq (v4)
                command: |
                  wget https://github.com/mikefarah/yq/releases/download/v4.27.3/yq_linux_amd64
                  sudo mv yq_linux_amd64 /usr/local/bin/yq
                  echo "93c1f7fdbc86b3fba453164703e2eb90d3760344  /usr/local/bin/yq" > /tmp/checksum
                  sha1sum -c /tmp/checksum
                  sudo chmod +x /usr/local/bin/yq
            - run:
                  name: Merge all files
                  command: |
                      yq eval-all '. as $item ireduce ({}; . *+ $item )' .circleci/*/*.yml  .circleci/*/*/*.yml > .circleci/merged_config.yml
                      cat .circleci/merged_config.yml
#            - path-filtering/set-parameters:
            - set-parameters:
                  base-revision: master
                  mapping: |
                    upgrades/.* run-database-migration-tests true
                  output-path: /tmp/pipeline-parameters.json
            - run:
                  name: Debug parameters
                  command: cat /tmp/pipeline-parameters.json
            - run:
                  name: Debug git
                  command: |
                    du -sh .git
                    git diff --name-only origin/master..."$CIRCLE_SHA1"
                    git fetch --shallow-exclude="$CIRCLE_SHA1"
                    git gc --prune=all
                    du -sh .git
            - continuation/continue:
                  configuration_path: .circleci/merged_config.yml
#                  parameters: /tmp/pipeline-parameters.json

workflows:
    version: 2

    merge_config_workflow:
        jobs:
            - merge_config

commands:
  set-parameters:
    description: |
      Generates a set of pipeline parameters from `mapping` at `output-path`.
    parameters:
      base-revision:
        default: main
        description: >
          The revision to compare the current one against for the purpose of
          determining changed files.
        type: string
      mapping:
        default: ''
        description: >
          Mapping of path regular expressions to pipeline parameters and values. One
          mapping per line, whitespace-delimited.
        type: string
      output-path:
        default: /tmp/pipeline-parameters.json
        description: |
          Path to save the generated parameters to.
        type: string
    steps:
      - run:
          command: >+
            #!/usr/bin/env python3


            import json

            import os

            import re

            import subprocess


            def checkout(revision):
              """
              Helper function for checking out a branch

              :param revision: The revision to checkout
              :type revision: str
              """
              subprocess.run(
                ['git', 'checkout', revision],
                check=True
              )

            output_path = os.environ.get('OUTPUT_PATH')

            head = os.environ.get('CIRCLE_SHA1')
            
            print('HEAD {}'.format(head))

            base_revision = os.environ.get('BASE_REVISION')
            
            print('BASE REVISION {}'.format(base_revision))

            checkout(base_revision)  # Checkout base revision to make sure it is
            available for comparison

            checkout(head)  # return to head commit

            base = subprocess.run(
              ['git', 'merge-base', base_revision, head],
              check=True,
              capture_output=True
            ).stdout.decode('utf-8').strip()
            
            print('BASE {}'.format(base))

            if head == base:
              try:
                # If building on the same branch as BASE_REVISION, we will get the
                # current commit as merge base. In that case try to go back to the
                # first parent, i.e. the last state of this branch before the
                # merge, and use that as the base.
                base = subprocess.run(
                  ['git', 'rev-parse', 'HEAD~1'], # FIXME this breaks on the first commit, fallback to something
                  check=True,
                  capture_output=True
                ).stdout.decode('utf-8').strip()
                
                print('BASE~1 {}'.format(base))
              except:
                # This can fail if this is the first commit of the repo, so that
                # HEAD~1 actually doesn't resolve. In this case we can compare
                # against this magic SHA below, which is the empty tree. The diff
                # to that is just the first commit as patch.
                base = '4b825dc642cb6eb9a060e54bf8d69288fbee4904'

            print('Comparing {}...{}'.format(base, head))

            changes = subprocess.run(
              ['git', 'diff', '--name-only', base, head],
              check=True,
              capture_output=True
            ).stdout.decode('utf-8').splitlines()


            mappings = [
              m.split() for m in
              os.environ.get('MAPPING').splitlines()
            ]


            def check_mapping(m):
              if 3 != len(m):
                raise Exception("Invalid mapping")
              path, param, value = m
              regex = re.compile(r'^' + path + r'$')
              for change in changes:
                if regex.match(change):
                  return True
              return False

            def convert_mapping(m):
              return [m[1], json.loads(m[2])]

            mappings = filter(check_mapping, mappings)

            mappings = map(convert_mapping, mappings)

            mappings = dict(mappings)


            with open(output_path, 'w') as fp:
              fp.write(json.dumps(mappings))

          environment:
            BASE_REVISION: << parameters.base-revision >>
            MAPPING: << parameters.mapping >>
            OUTPUT_PATH: << parameters.output-path >>
          name: Set parameters
          shell: /usr/bin/env python3
