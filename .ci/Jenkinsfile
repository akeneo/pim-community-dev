#!groovy

String[] editions = ["ce"]
String[] features = ["features"]
String launchUnitTests = "yes"
String launchIntegrationTests = "yes"
String launchEndToEndTests = "yes"
String verboseOutputs = "yes"
String slackChannel = ""
String tag = "eu.gcr.io/akeneo-ci/pim-community-dev:${env.BRANCH_NAME}"

stage("Build") {
    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        timeout(time:5, unit:'DAYS') {
            userInput = input(message: 'Launch tests?', parameters: [
                choice(choices: 'yes\nno', description: 'Run unit tests and code style checks', name: 'launchUnitTests'),
                choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
                choice(choices: 'yes\nno', description: 'Run end to end tests (Behat)', name: 'launchEndToEndTests'),
                string(defaultValue: 'features,vendor/akeneo/pim-community-dev/features', description: 'End to end tests to run', name: 'features'),
                choice(choices: 'no\nyes', description: 'Enable Verbose mode', name: 'verboseOutputs'),
                string(defaultValue: '', description: 'Channel or user to notify (example : "#channel,@user")', name: 'slackChannel'),
                string(defaultValue: 'ee,ce', description: 'PIM edition the behat tests should run on (comma separated values)', name: 'editions'),
            ])

            editions = userInput['editions'].tokenize(',')
            features = userInput['features'].tokenize(',')
            launchUnitTests = userInput['launchUnitTests']
            launchIntegrationTests = userInput['launchIntegrationTests']
            launchEndToEndTests = userInput['launchEndToEndTests']
            verboseOutputs = userInput['verboseOutputs']
            slackChannel = userInput['slackChannel']
        }
    }
    milestone 2

    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        parallel(
            "pim-ce": {
                pod(label: "build", containers: [
                    containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud:latest", ttyEnabled: true, command: 'cat', resourceRequestCpu: '100m', resourceRequestMemory: '200Mi')
                ]) {container('docker') {
                    checkout scm
                    sh "gcloud container builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag} ."
                }}
            },
            "pim-ee": {
                if (editions.contains("ee")) {
                    pod(label: "build", containers: [
                        containerTemplate(name: "docker", image: "paulwoelfel/docker-gcloud:latest", ttyEnabled: true, command: 'cat', resourceRequestCpu: '100m', resourceRequestMemory: '200Mi')
                    ]) {container('docker') {
                        checkout([$class: 'GitSCM',
                            branches: [[name: '2.2']],
                            userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-enterprise-dev.git']]
                        ])

                        dir('packages/pim-community-dev') {
                            checkout scm
                        }

                        sh "gcloud container builds submit --config .ci/builder.yaml --substitutions _IMAGE_TAG=${tag}-ee ."
                    }}
                } else {
                    echo "Skipping Enterprise Edition matrix"
                }
            }
        )
    }
}

stage("Test") {
    try {
        parallel(
            "php-coupling-detector": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/php-coupling-detector detect --config-file=.php_cd.php src"
            )},
            "phpunit": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/phpunit -c app/phpunit.xml.dist --testsuite PIM_Unit_Test --log-junit %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "phpspec": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && su -s /bin/sh www-data -c './vendor/bin/phpspec run --format=junit' > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "php-cs-fixer": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && vendor/bin/php-cs-fixer fix --diff --dry-run --config=.php_cs.php --format=junit > %workspace%/junit_output.xml",
                junit: "junit_output.xml"
            )},
            "grunt": {testif(
                condition: launchUnitTests.equals("yes"),
                container: tag,
                script: "cd /var/www/pim && yarn run lint"
            )},
            "integration-ce": {queue(
                condition: launchIntegrationTests.equals("yes") && editions.contains("ce"),
                verbose: (verboseOutputs == "yes"),
                container: tag,
                fetcher: {return pimIntegrationFetcher(testsuites: ["PIM_Integration_Test"])}
            )},
            "integration-ee": {queue(
                condition: launchIntegrationTests.equals("yes") && editions.contains("ee"),
                verbose: (verboseOutputs == "yes"),
                container: "${tag}-ee",
                fetcher: {return pimIntegrationFetcher(testsuites: ["PIM_Integration_Test"])}
            )},
            "behat-ce": {queue(
                condition: launchEndToEndTests.equals("yes") && editions.contains("ce"),
                verbose: (verboseOutputs == "yes"),
                container: tag,
                fetcher: {return pimBehatFetcher(profiles: ["legacy", "acceptance"], features: features)}
            )},
            "behat-ee": {queue(
                condition: launchEndToEndTests.equals("yes") && editions.contains("ee"),
                verbose: (verboseOutputs == "yes"),
                container: "${tag}-ee",
                fetcher: {return pimBehatFetcher(profiles: ["legacy", "acceptance"], features: features)}
            )}
        )
    } finally {
        notifySlack(slackChannel)
    }
}
