apiVersion: apps/v1
kind: Deployment
metadata:
  name: pim-web
  labels:
    component: "pim-web" # Deprecated. Cf https://www.notion.so/akeneo/Tagging-strategy-782b4ae037c44d4884b02c8c62e81117
    app.kubernetes.io/component: "pim-web"
    role: pim-web # Deprecated. Cf https://www.notion.so/akeneo/Tagging-strategy-782b4ae037c44d4884b02c8c62e81117
    {{- include "pim.standardLabels" . | indent 4 }}
    {{- include "pim.extraLabels" . | indent 4 }}
spec:
  replicas: {{ .Values.pim.web.replicas }}
  minReadySeconds: 30
  selector:
    matchLabels:
      component: "pim-web"
      role: pim-web
  strategy:
    type: {{ .Values.pim.updateStrategy.type }}
  template:
    metadata:
      labels:
        component: "pim-web" # Deprecated. Cf https://www.notion.so/akeneo/Tagging-strategy-782b4ae037c44d4884b02c8c62e81117
        app.kubernetes.io/component: "pim-web"
        role: pim-web # Deprecated. Cf https://www.notion.so/akeneo/Tagging-strategy-782b4ae037c44d4884b02c8c62e81117
        {{- include "pim.standardLabels" . | indent 8 }}
        {{- include "pim.extraLabels" . | indent 8 }}
      annotations:
        ad.datadoghq.com/fpm.check_names: '["php_fpm"]'
        ad.datadoghq.com/fpm.init_configs: '[{}]'
        ad.datadoghq.com/fpm.instances: '[[{"status_url":"http://%%host%%:9000/status", "use_fastcgi": true}]]'
        ad.datadoghq.com/fpm.logs: '[{ "service": "pim-enterprise-dev", "source": "pim-enterprise-dev", "log_processing_rules": [{ "type": "exclude_at_match","name": "exclude_php_status_logs", "pattern" : "uri\":\"/status\""},{ "type":"exclude_at_match", "name": "exclude_php_status_logs", "pattern" : "path_info\":\"[^\"]*(/notification/count_unread|/monitoring/services_status)\""}]}]'
        ad.datadoghq.com/httpd.logs: '[{ "service": "httpd", "source": "httpd", "log_processing_rules": [{ "type": "exclude_at_match", "name": "exclude_php_status_logs", "pattern" : "\"(/status|/notification/count_unread)\""},{ "type": "exclude_at_match", "name": "exclude_valid_monitor_status_logs", "pattern" : "\"(/monitoring/services_status)\".*\"response_code\":\"2..\""}]}]'
        checksum/env-config: {{ include (print $.Template.BasePath "/env-configmap.yaml") . | replace  (printf "%s-%s" .Chart.Name .Chart.Version ) "" | sha256sum }} # force reload of pods upon change of the configmap
        checksum/pim-web-config: {{ include (print $.Template.BasePath "/pim-web-configmap.yaml") . | replace  (printf "%s-%s" .Chart.Name .Chart.Version ) "" | sha256sum }} # force reload of pods upon change of the configmap
        checksum/secrets: {{ include (print $.Template.BasePath "/pim-secrets.yaml") . | replace  (printf "%s-%s" .Chart.Name .Chart.Version ) "" | sha256sum }} # force reload of pods upon change of the configmap
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  release: "{{ .Release.Name }}"
                  component: pim-web
      initContainers:
        - name: init-fpm
          image:  {{ template "pim.imageNameAndTag" . }}
          imagePullPolicy: {{ .Values.image.pim.pullPolicy | quote }}
          command: ["bash", "/scripts-dir/copy-web-entrypoint-files-to-httpd-mouting-point.sh"]
          volumeMounts:
            - name: pim-scripts
              mountPath: /scripts-dir
            - name: web-src
              mountPath: /web-src
            - name: connectors-web-src
              mountPath: /connectors-web-src
            {{- if .Values.onboarder.enabled }}
            # we need the key
            - name: google-cloud-onboarder-key
              mountPath: /var/secrets/google/key.json
              subPath: key.json
              readOnly: true
            {{- end }}
          envFrom: [ configMapRef: { name: {{ template "pim.fullName" . }}-env } ]
          env:
            - { name: MAILER_USER, valueFrom: { secretKeyRef: { name: pim-secrets, key: mailerLogin } } }
            - { name: MAILER_PASSWORD, valueFrom: { secretKeyRef: { name: pim-secrets, key: mailerPassword } } }
            - { name: APP_DATABASE_PASSWORD, valueFrom: { secretKeyRef: { name: pim-secrets, key: mysqlPimUserPassword } } }
            - { name: GOOGLE_NAMESPACE, valueFrom: { fieldRef: { fieldPath: metadata.namespace } } }
            - { name: GOOGLE_POD_NAME, valueFrom: { fieldRef: { fieldPath: metadata.name } } }
            - { name: CONTAINER_NAME, value: init-fpm }
      containers:
        - name: fpm
          image: {{ template "pim.imageNameAndTag" . }}
          imagePullPolicy: {{ .Values.image.pim.pullPolicy | quote }}
          command: ['/usr/local/sbin/php-fpm', '-F']
          resources: {{ toYaml .Values.pim.web.fpm.resources | nindent 12 }}
          ports:
            - name: fpm
              containerPort: 9000
          volumeMounts:
            - mountPath: /etc/php/7.4/fpm/pool.d/zzz-akeneo.conf
              subPath: zzz-akeneo.conf
              name: conf-fpm
              readOnly: true
            - name: web-src
              mountPath: /srv/pim/public
            - name: google-cloud-pim-storage-key
              mountPath: /var/secrets/google/srnt.json
              subPath: srnt.json
              readOnly: true
            {{- if .Values.onboarder.enabled }}
            - name: google-cloud-onboarder-key
              mountPath: /var/secrets/google/key.json
              subPath: key.json
              readOnly: true
            {{- end }}
          envFrom: [ configMapRef: { name: {{ template "pim.fullName" . }}-env } ]
          env:
            - { name: MAILER_USER, valueFrom: { secretKeyRef: { name: pim-secrets, key: mailerLogin } } }
            - { name: MAILER_PASSWORD, valueFrom: { secretKeyRef: { name: pim-secrets, key: mailerPassword } } }
            - { name: MONITORING_AUTHENTICATION_TOKEN, value: {{ .Values.pim.monitoring.authenticationToken | quote }} }
            - { name: APP_DATABASE_PASSWORD, valueFrom: { secretKeyRef: { name: pim-secrets, key: mysqlPimUserPassword } } }
            - { name: GOOGLE_NAMESPACE, valueFrom: { fieldRef: { fieldPath: metadata.namespace } } }
            - { name: GOOGLE_POD_NAME, valueFrom: { fieldRef: { fieldPath: metadata.name } } }
            - { name: CONTAINER_NAME, value: fpm }
{{- if .Values.common.phpConfFPM }}
{{ toYaml .Values.common.phpConfFPM  | indent 12 }}
{{- end }}
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 1
            successThreshold: 3
            tcpSocket:
              port: fpm
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            tcpSocket:
              port: fpm
            timeoutSeconds: 1
        - name: httpd
          image: "{{ .Values.image.httpd.repository }}:{{ .Values.image.httpd.tag }}"
          imagePullPolicy: {{ .Values.image.httpd.pullPolicy | quote }}
          resources: {{ toYaml .Values.pim.web.httpd.resources | nindent 12 }}
          ports:
            - containerPort: 80
              name: httpd
          env:
            - name: FPM_HOST
              value: localhost
            - name: CONTAINER_NAME
              value: httpd
          volumeMounts:
            {{- if .Values.connectors.bigcommerce.enabled }}
            - name: connectors-web-src
              mountPath: /srv/pim/connectors
              readOnly: true
            {{- end }}
            - name: web-src
              mountPath: /srv/pim/public
              readOnly: true
            - mountPath: /usr/local/apache2/conf/
              name: conf-httpd
              readOnly: true
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 2
            periodSeconds: 5
            successThreshold: 3
            tcpSocket:
              port: httpd
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 10
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: httpd
            timeoutSeconds: 5
      volumes:
        - name: pim-scripts
          configMap:
            name:  pim-scripts
        - name: connectors-web-src
          emptyDir: {}
        - name: web-src
          emptyDir: {}
        - name: conf-httpd
          configMap:
            name: pim-web-config
            items:
              - key: httpd.conf
                path: httpd.conf
              - key: mime.types
                path: mime.types
        - name: conf-fpm
          configMap:
            name: pim-web-config
            items:
              - key: fpm.conf
                path: zzz-akeneo.conf
        - name: google-cloud-pim-storage-key
          secret:
            secretName: pim-secrets
            items:
            - key: srntPimStorageKey
              path: srnt.json
        {{- if .Values.onboarder.enabled }}
        - name: google-cloud-onboarder-key
          secret:
            secretName: pim-secrets
            items:
            - key: akobOnboarderKey
              path: key.json
        {{- end }}
