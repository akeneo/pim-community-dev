db = db.getSiblingDB("akeneo_pim");

var familyRequirement = {
   "ecommerce": {
        "id" : 1,
        "locales": [
            {"id": 1, "code": "fr_FR"},
            {"id": 2, "code": "en_US"}
        ],
        "requirements":[
            {"attributeId": 1, "backend": "varchar"},
            {"attributeId": 2, "backend": "varchar"},
            {"attributeId": 3, "backend": "varchar"},
            {"attributeId": 4, "backend": "varchar"},
            {"attributeId": 5, "backend": "varchar"}
        ],
        "currencies": ["USD", "EUR"]
   },
   "mobile" : {
        "id" : 2,
        "locales": [
            {"id": 1, "code": "fr_FR"},
            {"id": 2, "code": "en_US"}
        ],
        "requirements":[
            {"attributeId": 1, "backend": "varchar"},
            {"attributeId": 4, "backend": "varchar"},
            {"attributeId": 5, "backend": "varchar"}
        ],
        "currencies": ["EUR"]
   }
};

var familyId = 1;

db.pim_catalog_product.find({'familyId' : familyId}).limit(100000).forEach(function(product) {
    var stats = [];

    for (channelCode in familyRequirement) {
        channel = familyRequirement[channelCode];

        stats[channelCode] = {};
        for (i = 0; i < channel.locales.length; i++) {
            localeCode = channel.locales[i].code;
            stats[channelCode][localeCode] = {};
            stats[channelCode][localeCode].requiredCount = channel.requirements.length;
            stats[channelCode][localeCode].filledCount = 0;
        }
    }

    product.values.forEach(function(value) {
        for (channelCode in familyRequirement) {
            channel = familyRequirement[channelCode];
            requirements = channel.requirements;

            for (i = 0; i < channel.locales.length; i++) {
                localeCode = channel.locales[i].code;

                for (j = 0; j < requirements.length; j++) {
                    attributeId = requirements[j].attributeId;

                    if ((value.attributeId == attributeId) &&
                        (!("locale" in value) || (value.locale == localeCode)) &&
                        (!("scope" in value) || (value.scope == channelCode))) {

                        backend = requirements[j].backend;

                        if (backend in value) {
                            if (backend == "prices") {
                                priceFilled = true;

                                currencies = channel.currencies;

                                for (c = 0; (c < currencies.length && priceFilled); c++) {
                                    currency = currencies[i];
                                    if (!(currency in value.prices)) {
                                        priceFilled = false;
                                    }
                                }

                                if (priceFilled) {
                                    stats[channelCode][localeCode].filledCount++;
                                }
                            } else {
                                stats[channelCode][localeCode].filledCount++;
                            }
                        }
                    }
                }
            }
        }
    });

    completenesses = [];
    for (channelCode in familyRequirement) {
        channel = familyRequirement[channelCode];

        for (i = 0; i < channel.locales.length; i++) {
            locale = channel.locales[i];
            localeCode = locale.code;

            completeness = {};
            completeness.channel = channel.id;
            completeness.locale = locale.id;

            filledCount = stats[channelCode][localeCode].filledCount;
            requiredCount = stats[channelCode][localeCode].requiredCount;

            completeness.requiredCount = requiredCount;
            completeness.missingCount = requiredCount - filledCount;
            completeness.ratio = (filledCount / requiredCount)*100;

            completenesses.push(completeness);
        }
    }
 
    product.completenesses = completenesses;
    db.pim_catalog_product.save(product);
});
