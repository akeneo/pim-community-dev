esSnapshotCreation:
    params: [input]
    steps:
        - create_build:
            call: googleapis.cloudbuild.v1.projects.builds.create
            args:
                projectId: $${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
                parent: $${"projects/" + sys.get_env("GOOGLE_CLOUD_PROJECT_ID") + "/locations/global"}
                body:
                    serviceAccount: $${sys.get_env("GOOGLE_CLOUD_SERVICE_ACCOUNT_NAME")}
                    options:
                        logging: CLOUD_LOGGING_ONLY
                    substitutions:
                        _PFID: $${map.get(input, "pfid")}
                        _SOURCE_PROJECT: $${map.get(input, "sourceProject")}
                        _SOURCE_CLUSTER_NAME: $${map.get(input, "sourceClusterName")}
                        _SOURCE_GOOGLE_CLUSTER_ZONE: $${map.get(input, "sourceClusterName")}
                    steps:
                        - name: eu.gcr.io/akeneo-cloud/cloud-deployer:7.10
                          entrypoint: /bin/bash
                          args:
                            - -c
                            - |
                                # Set cluster authentication
                                gcloud container clusters get-credentials $${_SOURCE_CLUSTER_NAME} --project=$${_SOURCE_PROJECT} --zone=$${_SOURCE_GOOGLE_CLUSTER_ZONE}

                                CRON_JOB_NAME=elasticsearch-snapshotter
                                JOB_NAME=elasticsearch-snapshotter-migration

                                echo "Delete job if already exist"
                                JOB_EXIST=$(kubectl get job $$${JOB_NAME} --no-headers --namespace=$${_PFID} | awk '{print $$1}') || true
                                if [ -n "$$${JOB_EXIST}" ]; then
                                kubectl delete job $$${JOB_NAME} --namespace=$${_PFID}
                                fi
                                echo "Call the elasticsearch-snapshotter cronjob to do ES snapshot"
                                kubectl create job $$${JOB_NAME} --from=cronjob/$$${CRON_JOB_NAME} --namespace=$${_PFID}
            result: build_result
        - return_build_result:
            return: $${build_result}
