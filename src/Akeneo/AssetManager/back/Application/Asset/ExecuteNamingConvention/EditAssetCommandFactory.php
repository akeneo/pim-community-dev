<?php

declare(strict_types=1);

/*
 * This file is part of the Akeneo PIM Enterprise Edition.
 *
 * (c) 2019 Akeneo SAS (http://www.akeneo.com)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Akeneo\AssetManager\Application\Asset\ExecuteNamingConvention;

use Akeneo\AssetManager\Application\Asset\EditAsset\CommandFactory\AbstractEditValueCommand;
use Akeneo\AssetManager\Application\Asset\EditAsset\CommandFactory\EditAssetCommand;
use Akeneo\AssetManager\Application\Asset\ExecuteNamingConvention\Exception\InvalidNamingConventionSourceAttributeType;
use Akeneo\AssetManager\Application\Asset\ExecuteNamingConvention\Exception\NamingConventionException;
use Akeneo\AssetManager\Application\Asset\ExecuteNamingConvention\Exception\NamingConventionPatternNotMatch;
use Akeneo\AssetManager\Domain\Model\AssetFamily\AssetFamilyIdentifier;
use Akeneo\AssetManager\Domain\Model\AssetFamily\NamingConvention\NamingConvention;
use Akeneo\AssetManager\Domain\Model\AssetFamily\NamingConvention\NamingConventionInterface;
use Akeneo\AssetManager\Domain\Model\Attribute\AttributeCode;
use Akeneo\AssetManager\Domain\Model\Attribute\MediaFileAttribute;
use Akeneo\AssetManager\Domain\Model\Attribute\MediaLinkAttribute;
use Akeneo\AssetManager\Domain\Model\Attribute\TextAttribute;
use Akeneo\AssetManager\Domain\Repository\AssetFamilyNotFoundException;
use Akeneo\AssetManager\Domain\Repository\AssetFamilyRepositoryInterface;
use Akeneo\AssetManager\Domain\Repository\AttributeNotFoundException;
use Akeneo\AssetManager\Domain\Repository\AttributeRepositoryInterface;

/**
 * The goal of this class is to:
 *  - given the naming convention, extract the source value on which the naming convention must be executed
 *  - call the EditAssetValueCommandsFactory in order to create an EditAssetCommand that represents
 *    the new values generated by the naming convention.
 *
 * @author    Nicolas Marniesse <nicolas.marniesse@akeneo.com>
 * @copyright 2019 Akeneo SAS (http://www.akeneo.com)
 */
class EditAssetCommandFactory
{
    private AssetFamilyRepositoryInterface $assetFamilyRepository;

    private AttributeRepositoryInterface $attributeRepository;

    private EditAssetValueCommandsFactory $editAssetValueCommandsFactory;

    public function __construct(
        AssetFamilyRepositoryInterface $assetFamilyRepository,
        AttributeRepositoryInterface $attributeRepository,
        EditAssetValueCommandsFactory $editAssetValueCommandsFactory
    ) {
        $this->assetFamilyRepository = $assetFamilyRepository;
        $this->attributeRepository = $attributeRepository;
        $this->editAssetValueCommandsFactory = $editAssetValueCommandsFactory;
    }

    /**
     * @param array $normalizedCommand
     * @return EditAssetCommand
     * @throws NamingConventionException
     */
    public function create(array $normalizedCommand): EditAssetCommand
    {
        $namingConvention = $this->getNamingConvention(
            AssetFamilyIdentifier::fromString($normalizedCommand['asset_family_identifier'])
        );

        $editAssetValueCommands = [];
        if ($namingConvention instanceof NamingConvention) {
            try {
                $editAssetValueCommands = $this->extractAndBuildEditAssetValueCommands(
                    $namingConvention,
                    $normalizedCommand
                );
            } catch (AttributeNotFoundException | NamingConventionPatternNotMatch | InvalidNamingConventionSourceAttributeType $e) {
                throw new NamingConventionException($e, $namingConvention->abortAssetCreationOnError());
            }
        }

        return new EditAssetCommand(
            $normalizedCommand['asset_family_identifier'],
            $normalizedCommand['code'],
            $editAssetValueCommands
        );
    }

    /**
     * @param NamingConvention $namingConvention
     * @param array            $normalizedCommand
     * @return AbstractEditValueCommand[]
     * @throws NamingConventionPatternNotMatch
     * @throws InvalidNamingConventionSourceAttributeType
     */
    public function extractAndBuildEditAssetValueCommands(NamingConvention $namingConvention, array $normalizedCommand): array
    {
        $assetFamilyIdentifier = AssetFamilyIdentifier::fromString($normalizedCommand['asset_family_identifier']);
        $stringDataValue = $namingConvention->getSource()->isAssetCode()
            ? $normalizedCommand['code']
            : $this->extractStringSource(
                $assetFamilyIdentifier,
                $namingConvention->getSource()->getProperty(),
                $namingConvention->getSource()->getChannelReference()->normalize(),
                $namingConvention->getSource()->getLocaleReference()->normalize(),
                $normalizedCommand['values']
            );
        if (null === $stringDataValue) {
            return [];
        }

        return $this->editAssetValueCommandsFactory->create(
            $assetFamilyIdentifier,
            $namingConvention,
            $stringDataValue
        );
    }

    private function getNamingConvention(AssetFamilyIdentifier $assetFamilyIdentifier): ?NamingConventionInterface
    {
        try {
            $assetFamily = $this->assetFamilyRepository->getByIdentifier($assetFamilyIdentifier);
        } catch (AssetFamilyNotFoundException $e) {
            return null;
        }

        return $assetFamily->getNamingConvention();
    }

    private function extractStringSource(
        AssetFamilyIdentifier $assetFamilyIdentifier,
        string $sourceAttributeCode,
        ?string $channel,
        ?string $locale,
        array $normalizedValues
    ): ?string {
        $sourceAttribute = $this->attributeRepository->getByCodeAndAssetFamilyIdentifier(
            AttributeCode::fromString($sourceAttributeCode),
            $assetFamilyIdentifier
        );

        foreach ($normalizedValues as $normalizedValue) {
            if ($normalizedValue['attribute'] === $sourceAttribute->getIdentifier()->stringValue()
                && $normalizedValue['channel'] === $channel
                && $normalizedValue['locale'] === $locale
            ) {
                if ($sourceAttribute instanceof MediaFileAttribute) {
                    return $normalizedValue['data']['originalFilename'];
                } elseif ($sourceAttribute instanceof MediaLinkAttribute) {
                    return $normalizedValue['data'];
                } elseif ($sourceAttribute instanceof TextAttribute) {
                    return $normalizedValue['data'];
                }

                throw new InvalidNamingConventionSourceAttributeType();
            }
        }

        return null;
    }
}
