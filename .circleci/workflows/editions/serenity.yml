orbs:
    slack: circleci/slack@3.4.2
    cypress: cypress-io/cypress@1

aliases:
    - &client-to-clone-srnt
        ["srnt-madeira", "srnt-pim-pce", "srnt-cto-pim", "srnt-iteshop"]
    - &client-to-clone-grth
        ["grth-sirius-staging"]
    - &slack-fail-post-step-srnt
        post-steps:
            - slack/status:
                  channel: ci
                  webhook: $SLACK_NIGHTLY_STATUS
                  fail_only: true

    - &slack-post-step-srnt
        post-steps:
            - slack/status:
                  channel: ci
                  webhook: $SLACK_NIGHTLY_STATUS
                  fail_only: false
workflows:
    nightly_srnt_release:
        when:
            and:
                - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
                - equal: [ "nightly_srnt_release", << pipeline.schedule.name >> ]
        jobs:
            - checkout
            - build_srnt_prod:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - checkout
            - build_srnt_dev:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - checkout
            - test_cronjobs_existence:
                  <<: *slack-fail-post-step-srnt
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                  requires:
                      - build_srnt_prod
            - test_deploy:
                  <<: *slack-fail-post-step-srnt
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                  requires:
                      - test_cronjobs_existence
            - test_deploy_last_release:
                  <<: *slack-fail-post-step-srnt
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                  requires:
                      - test_cronjobs_existence
            - test_upgrade_from_last_release:
                  <<: *slack-fail-post-step-srnt
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                  requires:
                      - test_deploy_last_release
            - test_front_code_style:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_back_static_and_acceptance:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_front_static_acceptance_and_integration:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_back_phpunit:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_back_integration_bounded_contexts:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_back_integration_reference_entities:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_back_performance:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_onboarder_bundle:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_back_behat_legacy:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_back_data_migrations:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_onboarder_lint_back:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_onboarder_coupling:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_onboarder_unit_back:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_onboarder_unit_front:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_onboarder_acceptance_back:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - test_onboarder_integration_back:
                  <<: *slack-fail-post-step-srnt
                  requires:
                      - build_srnt_dev
            - release:
                  <<: *slack-post-step-srnt
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                  requires:
                      - test_back_static_and_acceptance
                      - test_front_static_acceptance_and_integration
                      - test_back_phpunit
                      - test_back_integration_bounded_contexts
                      - test_back_integration_reference_entities
                      - test_onboarder_bundle
                      - test_back_performance
                      - test_back_behat_legacy
                      - test_back_data_migrations
                      - test_deploy
                      - test_upgrade_from_last_release
                      - test_onboarder_lint_back
                      - test_onboarder_coupling
                      - test_onboarder_unit_back
                      - test_onboarder_unit_front
                      - test_onboarder_acceptance_back
                      - test_onboarder_integration_back


# Resume :
#    on_demand_check_update_against_client workfow clones (on demand) existing clients and updates them with your code/migrations
#    This workflow allows you to check your migrations/jobs timings and have a feedback/monitoring/observability with datadog
#
# Description :
#    Cloned instances are accessibles from web with url : https://<namespace>.dev.cloud.akeneo.com with login "adminakeneo"
#    and password can be found in "Jenkins upgrade" job's log in "[<grth|srnt>] Upgrade <client>" workflow, then it can be found
#    by seeking "adminakeneo" in full logs
#
# Default clients and theirs specifities :
#   - most products :
#     - srnt-madeira
#   - most product values :
#      - srnt-pim-pce
#   - most product models :
#     - srnt-cto-pim
#   - most product variants :
#     - srnt-iteshop (iteshop is 2nd in variants count (cto-pim first) but has been selected to check against more clients)
    on_demand_check_update_against_client:
        when:
            not:
                equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        jobs:
            - check?:
                  type: approval
                  filters:
                      branches:
                          ignore:
                              - "master"
            - checkout:
                  requires:
                      - check?
            - build_srnt_prod:
                  name: "[srnt] Build"
                  requires:
                      - "checkout"
            - build_grth:
                  name: "[grth] Build"
                  requires:
                      - "checkout"
            - clone_and_upgrade?:
                name: "[grth] Clone and upgrade << matrix.CLIENT >> ?"
                type: approval
                matrix:
                    parameters:
                        CLIENT: *client-to-clone-grth
                        PRODUCT_TYPE: ["grth"]
                requires:
                    - "[<< matrix.PRODUCT_TYPE >>] Build"
            - test_clone_from_customer_db:
                  name: "[<< matrix.PRODUCT_TYPE >>] Clone << matrix.SOURCE_PFID >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth"]
                          SOURCE_PFID: *client-to-clone-grth
                          LONG_TTL_INSTANCE: [true]
                  requires:
                      - "[grth] Clone and upgrade << matrix.SOURCE_PFID >> ?"
            - test_upgrade_from_last_release:
                  name: "[<< matrix.PRODUCT_TYPE >>] Upgrade << matrix.INSTANCE_NAME >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth"]
                          INSTANCE_NAME: *client-to-clone-grth
                          REMOVE_ENV: [false]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Clone << matrix.INSTANCE_NAME >>"
            - delete_pr_environment?:
                  name: "[<< matrix.PRODUCT_TYPE >>] Delete environment << matrix.INSTANCE_NAME >> ?"
                  type: approval
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth"]
                          INSTANCE_NAME: *client-to-clone-grth
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Upgrade << matrix.INSTANCE_NAME >>"
            - delete_pr_environment:
                  name: "[<< matrix.PRODUCT_TYPE >>] Delete environment << matrix.INSTANCE_NAME >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth"]
                          INSTANCE_NAME: *client-to-clone-grth
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Delete environment << matrix.INSTANCE_NAME >> ?"
            - clone_and_upgrade?:
                name: "[srnt] Clone and upgrade << matrix.CLIENT >> ?"
                type: approval
                matrix:
                    parameters:
                        CLIENT: *client-to-clone-srnt
                        PRODUCT_TYPE: ["srnt"]
                requires:
                    - "[<< matrix.PRODUCT_TYPE >>] Build"
            - test_clone_from_customer_db:
                  name: "[<< matrix.PRODUCT_TYPE >>] Clone << matrix.SOURCE_PFID >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          SOURCE_PFID: *client-to-clone-srnt
                          LONG_TTL_INSTANCE: [true]
                  requires:
                      - "[srnt] Clone and upgrade << matrix.SOURCE_PFID >> ?"
            - test_upgrade_from_last_release:
                  name: "[<< matrix.PRODUCT_TYPE >>] Upgrade << matrix.INSTANCE_NAME >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          INSTANCE_NAME: *client-to-clone-srnt
                          REMOVE_ENV: [false]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Clone << matrix.INSTANCE_NAME >>"
            - delete_pr_environment?:
                  name: "[<< matrix.PRODUCT_TYPE >>] Delete environment << matrix.INSTANCE_NAME >> ?"
                  type: approval
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          INSTANCE_NAME: *client-to-clone-srnt
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Upgrade << matrix.INSTANCE_NAME >>"
            - delete_pr_environment:
                  name: "[<< matrix.PRODUCT_TYPE >>] Delete environment << matrix.INSTANCE_NAME >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          INSTANCE_NAME: *client-to-clone-srnt
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Delete environment << matrix.INSTANCE_NAME >> ?"

    on_demand_deployment_validation:
        when:
            not:
                equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        jobs:
            - deployment_validation:
                  name: "Start test ?"
                  type: approval
                  filters:
                      branches:
                          only:
                              - master
            - cypress/install:
                  name: "Cypress install"
                  install-command: npm install
                  working_directory: ./deployments/test/e2e/
                  cache-key: 'cache-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}'
                  requires:
                      - "Start test ?"
            - configure_deployment_e2e_validation:
                  name: "[srnt] Configure cypress"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          PFID: ["srnt-c3po"]
                  requires:
                      - "Cypress install"
            - configure_deployment_e2e_validation:
                  name: "[grth] Configure cypress"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth"]
                          PFID: ["grth-r2d2"]
                  requires:
                      - "Cypress install"
            - cypress/run:
                  name: "[srnt] Post deployment e2e validation"
                  executor: cypress-with-chrome
                  browser: chrome
                  store_artifacts: true
                  post-checkout:
                      - run: cp -R ~/deployments ~/project
                  attach-workspace: true
                  config-file: ./config/cypress.srnt.json
                  spec: tests/deployment/*
                  working_directory: deployments/test/e2e
                  cache-key: 'cache-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}'
                  no-workspace: true
                  requires:
                      - "[srnt] Configure cypress"
            - cypress/run:
                  name: "[grth] Post deployment e2e validation"
                  executor: cypress-with-chrome
                  browser: chrome
                  store_artifacts: true
                  post-checkout:
                      - run: cp -R ~/deployments ~/project
                  attach-workspace: true
                  config-file: ./config/cypress.grth.json
                  spec: tests/deployment/*
                  working_directory: deployments/test/e2e
                  cache-key: 'cache-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}'
                  no-workspace: true
                  requires:
                      - "[grth] Configure cypress"

    on_demand_release:
        when:
            not:
                equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        jobs:
            - ready_to_build?:
                  name: "[<< matrix.PRODUCT_TYPE >>] Release ?"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt", "grth", "tria"]
                  type: approval
                  filters:
                      branches:
                          only:
                              - master
            - checkout:
                  name: "[<< matrix.PRODUCT_TYPE >>] Checkout"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt", "grth", "tria"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Release ?"
            - build_srnt_dev:
                  name: "[srnt] Build dev"
                  requires:
                      - "[srnt] Checkout"
            - build_srnt_prod:
                  name: "[srnt] Build prod"
                  requires:
                      - "[srnt] Checkout"
            - build_grth:
                  name: "[grth] Build prod"
                  requires:
                      - "[grth] Checkout"
            - build_tria:
                  name: "[tria] Build prod"
                  requires:
                      - "[tria] Checkout"
            - test_front_code_style:
                  requires:
                      - "[srnt] Build dev"
            - test_back_static_and_acceptance:
                  requires:
                      - "[srnt] Build dev"
            - test_front_static_acceptance_and_integration:
                  requires:
                      - "[srnt] Build dev"
            - test_back_phpunit:
                  requires:
                      - "[srnt] Build dev"
            - test_back_integration_bounded_contexts:
                  requires:
                      - "[srnt] Build dev"
            - test_back_integration_reference_entities:
                  requires:
                      - "[srnt] Build dev"
            - test_back_performance:
                  requires:
                      - "[srnt] Build dev"
            - test_onboarder_bundle:
                  requires:
                      - "[srnt] Build dev"
            - test_back_behat_legacy:
                  requires:
                      - "[srnt] Build dev"
            - test_back_data_migrations:
                  requires:
                      - "[srnt] Build dev"
            - test_onboarder_lint_back:
                  requires:
                      - "[srnt] Build dev"
            - test_onboarder_coupling:
                  requires:
                      - "[srnt] Build dev"
            - test_onboarder_unit_back:
                  requires:
                      - "[srnt] Build dev"
            - test_onboarder_unit_front:
                  requires:
                      - "[srnt] Build dev"
            - test_onboarder_acceptance_back:
                  requires:
                      - "[srnt] Build dev"
            - test_onboarder_integration_back:
                  requires:
                      - "[srnt] Build dev"
            - test_cronjobs_existence:
                  name: "[<< matrix.PRODUCT_TYPE >>] Test cronjobs existence"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt", "grth", "tria"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Build prod"
            - test_deploy:
                  name: "[<< matrix.PRODUCT_TYPE >>] Test deploy"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt", "grth", "tria"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Test cronjobs existence"
            - test_deploy_last_release:
                  name: "[<< matrix.PRODUCT_TYPE >>] Test deploy last release"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt", "grth"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Test cronjobs existence"
            - test_upgrade_from_last_release:
                  name: "[<< matrix.PRODUCT_TYPE >>] Test upgrade from last release"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt", "grth"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Test deploy last release"
            - release:
                  name: "[<< matrix.PRODUCT_TYPE >>] Release"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Test deploy"
                      - "[<< matrix.PRODUCT_TYPE >>] Test upgrade from last release"
                      - test_back_static_and_acceptance
                      - test_front_static_acceptance_and_integration
                      - test_back_phpunit
                      - test_back_integration_bounded_contexts
                      - test_back_integration_reference_entities
                      - test_onboarder_bundle
                      - test_back_performance
                      - test_back_behat_legacy
                      - test_back_data_migrations
                      - test_onboarder_lint_back
                      - test_onboarder_coupling
                      - test_onboarder_unit_back
                      - test_onboarder_unit_front
                      - test_onboarder_acceptance_back
                      - test_onboarder_integration_back
            - release:
                  name: "[<< matrix.PRODUCT_TYPE >>] Release"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Test deploy"
                      - "[<< matrix.PRODUCT_TYPE >>] Test upgrade from last release"
            - release:
                  name: "[<< matrix.PRODUCT_TYPE >>] Release"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["tria"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Test deploy"

    nightly_deployments:
        when:
            and:
                - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
                - equal: [ "nightly_deployments", << pipeline.schedule.name >> ]
        jobs:
            - checkout
            - deploy_srnt_helpdesk_environment:
                  requires:
                      - checkout
            - deploy_grth_helpdesk_environment:
                  requires:
                      - checkout
            - deploy_pm_environment:
                  requires:
                      - checkout
            - deploy_bh_environment:
                  requires:
                      - checkout

    clone_and_upgrade_customers:
        when:
            and:
                - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
                - equal: [ "clone_and_upgrade_customers", << pipeline.schedule.name >> ]
        jobs:
            - checkout
            - build_env_vars:
                  name: "[<< matrix.PRODUCT_TYPE >>] build_env_vars"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                  requires:
                      - checkout
            - test_clone_from_customer_db:
                  name: "[<< matrix.PRODUCT_TYPE >>] test_clone_from-<< matrix.SOURCE_PFID >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth"]
                          SOURCE_PFID: ["grth-sirius-staging"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] build_env_vars"
            - test_upgrade_from_customer_db:
                  name: "[<< matrix.PRODUCT_TYPE >>] test_upgrade_from-<< matrix.SOURCE_PFID >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth"]
                          SOURCE_PFID: ["grth-sirius-staging"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] test_clone_from-<< matrix.SOURCE_PFID >>"
            - test_clone_from_customer_db:
                  name: "[<< matrix.PRODUCT_TYPE >>] test_clone_from-<< matrix.SOURCE_PFID >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          SOURCE_PFID: ["srnt-madeira-production", "srnt-petra", "srnt-rdoequipment-prod", "srnt-electrodepot", "srnt-distributionnow-prod"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] build_env_vars"
            - test_upgrade_from_customer_db:
                  name: "[<< matrix.PRODUCT_TYPE >>] test_upgrade_from-<< matrix.SOURCE_PFID >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          SOURCE_PFID: ["srnt-madeira-production", "srnt-petra", "srnt-rdoequipment-prod", "srnt-electrodepot", "srnt-distributionnow-prod"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] test_clone_from-<< matrix.SOURCE_PFID >>"
            - ui_sanity_checks:
                  name: sanity_checks-<< matrix.SOURCE_PFID >>
                  matrix:
                      parameters:
                          SOURCE_PFID: ["srnt-madeira-production", "srnt-petra", "srnt-rdoequipment-prod", "srnt-electrodepot", "srnt-distributionnow-prod"]
                  requires:
                      - "[srnt] test_upgrade_from-<< matrix.SOURCE_PFID >>"

    clone_and_upgrade_flex_customers:
        when:
            and:
                - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
                - equal: [ "clone_and_upgrade_flex_customers", << pipeline.schedule.name >> ]
        jobs:
            - checkout
            - build_env_vars:
                  name: "[<< matrix.PRODUCT_TYPE >>] build_env_vars"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                  requires:
                      - checkout
            - test_migrate_from_flex_customer_db:
                  name: "[<< matrix.PRODUCT_TYPE >>] test_migrate_from-<< matrix.SOURCE_PFID_SOURCE_PROJECT_ID >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["flex"]
                          SOURCE_PFID_SOURCE_PROJECT_ID: ["assa-abloy-dev##akecld-assa-abloy", "curacao-production##akecld-curacao-pim"]
                  requires:
                      - build_env_vars
            - test_upgrade_from_customer_db:
                  name: "[flex] test_upgrade_from-<< matrix.SOURCE_PFID >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          SOURCE_PFID: ["assa-abloy-dev##akecld-assa-abloy", "curacao-production##akecld-curacao-pim"]
                  requires:
                      - "[flex] test_migrate_from-<< matrix.SOURCE_PFID >>"
            - ui_sanity_checks:
                  name: sanity_checks-<< matrix.SOURCE_PFID >>
                  matrix:
                      parameters:
                          SOURCE_PFID: ["assa-abloy-dev##akecld-assa-abloy", "curacao-production##akecld-curacao-pim"]
                  requires:
                      - "[flex] test_upgrade_from-<< matrix.SOURCE_PFID >>"

    clone_and_test_migrate_flex_customers:
        when:
            and:
                - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
                - equal: [ "clone_and_test_migrate_flex_customers", << pipeline.schedule.name >> ]
        jobs:
            - checkout
            - build_env_vars:
                  name: "[<< matrix.PRODUCT_TYPE >>] build_env_vars"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                  requires:
                      - checkout
            - test_migrate_flex:
                  name: "[<< matrix.PRODUCT_TYPE >>] test_migrate-<< matrix.SOURCE_PFID_SOURCE_PROJECT_ID >>"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["flex"]
                          SOURCE_PFID_SOURCE_PROJECT_ID: ["assa-abloy-dev##akecld-assa-abloy", "curacao-production##akecld-curacao-pim"]
                  requires:
                      - build_env_vars

    nightly_beta:
        when:
            and:
                - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
                - equal: [ "nightly_beta", << pipeline.schedule.name >> ]
        jobs:
            - checkout
            - test_helm_generated_k8s_files:
                  name: "[<< matrix.PRODUCT_TYPE >>][<< matrix.CLUSTER_VERSION >>] Test helm generated k8s files"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          CLUSTER_VERSION: ["1.20.0", "1.21.0", "1.22.0", "1.23.0"]
                  requires:
                      - checkout

    nightly_next_cluster:
        when:
            and:
                - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
                - equal: [ "nightly_next_cluster", << pipeline.schedule.name >> ]
        jobs:
            - checkout
            - test_helm_generated_k8s_files:
                  name: "[<< matrix.PRODUCT_TYPE >>] Test helm generated k8s files"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          CLUSTER_NEXT: [true]
                  requires:
                      - checkout
            - build_srnt_prod:
                  requires:
                      - "[srnt] Test helm generated k8s files"
            - test_cronjobs_existence:
                  name: "[<< matrix.PRODUCT_TYPE >>] Test cronjobs existence"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                  requires:
                      - build_srnt_prod
            - test_deploy:
                  name: "[<< matrix.PRODUCT_TYPE >>] Test deploy"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          CLUSTER_NEXT: [true]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Test cronjobs existence"
            - test_deploy_last_release:
                  name: "[<< matrix.PRODUCT_TYPE >>] Test deploy last release"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          CLUSTER_NEXT: [true]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Test cronjobs existence"
            - test_upgrade_from_last_release:
                  name: "[<< matrix.PRODUCT_TYPE >>] Test upgrade from last release"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt"]
                          CLUSTER_NEXT: [true]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Test deploy last release"

    hourly_cleanup:
        when:
            and:
                - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
                - equal: [ "hourly_cleanup", << pipeline.schedule.name >> ]
        jobs:
            - checkout
            - delete_environments_hourly:
                  name: "[<< matrix.PRODUCT_TYPE >>] Delete environments"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["srnt", "grth", "tria"]
                  requires:
                      - checkout
            - remove_unused_resources:
                  requires:
                      - checkout
            - delete_expired_uptime_check:
                  requires:
                      - checkout

    on_demand_compliancy_checker:
        when:
            not:
                equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        jobs:
            - ready_to_build?:
                  type: approval
                  filters:
                      branches:
                          only:
                              - master
            - zdd_compliancy_diff:
                  name: "[<< matrix.PRODUCT_TYPE >>][top] Get ZDD compliancy files"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                          CHECK_AGAINST: ["top"]
                  requires:
                      - ready_to_build?
            - zdd_compliancy_checker:
                  name: "[<< matrix.PRODUCT_TYPE >>][top][<< matrix.CONTEXT >>] Check ZDD compliancy"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                          CONTEXT: ["infra", "db"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>][top] Get ZDD compliancy files"
            - list_production_version:
                  name: "[<< matrix.PRODUCT_TYPE >>] Versions currently in production"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                  requires:
                      - ready_to_build?
            - execute_compliancy_check:
                  type: approval
                  name: "[<< matrix.PRODUCT_TYPE >>] Execute compliancy check on oldest version"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Versions currently in production"
            - zdd_compliancy_diff:
                  name: "[<< matrix.PRODUCT_TYPE >>][<< matrix.CHECK_AGAINST >>] Get ZDD compliancy files"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                          CHECK_AGAINST: ["oldest"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>] Execute compliancy check on oldest version"
            - zdd_compliancy_checker:
                  name: "[<< matrix.PRODUCT_TYPE >>][oldest][<< matrix.CONTEXT >>] Check ZDD compliancy"
                  matrix:
                      parameters:
                          PRODUCT_TYPE: ["grth", "srnt"]
                          CONTEXT: ["infra", "db"]
                  requires:
                      - "[<< matrix.PRODUCT_TYPE >>][oldest] Get ZDD compliancy files"
