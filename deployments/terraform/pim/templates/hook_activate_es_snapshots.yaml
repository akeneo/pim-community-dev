{{ if not .Values.free_trial.enabled -}}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: elasticsearch-snapshotter
  labels:
    component: "elasticsearch-snapshotter"
    app.kubernetes.io/component: "elasticsearch-snapshotter"
    {{- include "pim.standardLabels" . | indent 4 }}
    {{- include "pim.extraLabels" . | indent 4 }}
spec:
  schedule: "@daily"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            component: elasticsearch-snapshotter
        spec:
          containers:
          - name: snapshotter
            image: eu.gcr.io/akeneo-ci/dev-images/curl-jq:v20211022140934
            env:
              - name: APP_INDEX_HOSTS
                valueFrom:
                  configMapKeyRef:
                    name: {{ template "pim.fullName" . }}-env
                    key: APP_INDEX_HOSTS
              - name: SNAPSHOT_RETENTION
                value: "{{ .Values.elasticsearch.snapshots.retention }}"
              - name: REPOSITORY
                value: {{ .Values.elasticsearch.snapshots.repository }}
            command:
            - bash
            - -c
            - |
              #!/bin/bash
              set -euo pipefail

              echo "Creating snapshot"
              curl -s -i -XPUT "${APP_INDEX_HOSTS}/_snapshot/${REPOSITORY}/%3Csnapshot-%7Bnow%7Byyyy-MM-dd_HH-mm-ss%7CEurope%2FParis%7D%7D%3E" | grep "200 OK"

              # List snapshots to delete
              export ES_SNAPSHOTS=$(curl -s -XGET "${APP_INDEX_HOSTS}/_snapshot/${REPOSITORY}/_all" | jq -r ".snapshots[:-${SNAPSHOT_RETENTION}][].snapshot")

              # Loop over the results and delete each snapshot
              for SNAPSHOT in $ES_SNAPSHOTS
              do
                echo "Deleting snapshot: $SNAPSHOT"
                curl -s -i -XDELETE "${APP_INDEX_HOSTS}/_snapshot/${REPOSITORY}/${SNAPSHOT}" | grep "200 OK"
              done
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: Job
metadata:
  name: activate-es-snapshot-repository
  labels:
    component: "hook-activate-es-snapshot-repository"
    app.kubernetes.io/component: "hook-activate-es-snapshot-repository"
    {{- include "pim.standardLabels" . | indent 4 }}
    {{- include "pim.extraLabels" . | indent 4 }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  template:
    metadata:
      labels:
        component: "hook-activate-es-snapshot-repository"
        app.kubernetes.io/component: "hook-activate-es-snapshot-repository"
        {{- include "pim.standardLabels" . | indent 8 }}
        {{- include "pim.extraLabels" . | indent 8 }}
    spec:
      restartPolicy: Never
      containers:
        - name: activate-es-snapshot-repository
          image: eu.gcr.io/akeneo-ci/dev-images/curl-jq:v20211022140934
          imagePullPolicy: {{ .Values.image.pim.pullPolicy | quote }}
          command: ["bash", "/scripts-dir/hook-activate-es-snapshots.sh"]
          envFrom: [ configMapRef: { name: {{ template "pim.fullName" . }}-env } ]
          env:
            - { name: BUCKET_NAME, value: {{ printf "%s-es" .Values.pim.storage.bucketName | quote }} }
            - { name: REPOSITORY, value: {{ .Values.elasticsearch.snapshots.repository | quote }} }
            - { name: SNAPSHOTS_FOLDER, value: {{ .Values.elasticsearch.snapshots.folder | quote }} }
          volumeMounts:
            - name: pim-scripts
              mountPath: /scripts-dir
      volumes:
        - name: pim-scripts
          configMap:
            name:  pim-scripts
{{- end }}
