envVarsDeployDev: &envVarsDeployDev
dockerCloudDeployerCurrent: &dockerCloudDeployerCurrent
dockerCloudDeployerNext: &dockerCloudDeployerNext
executor-machine: &executor-machine


jobs:

    ge2ee_bulk_deploy_last_release:
        parameters:
            PRODUCT_TYPE:
                type: string
                default: "grth"
            CLUSTER_NEXT:
                type: boolean
                default: false
            GE2EE_ID:
                type: string
                default: "01"
        environment:
            <<: *envVarsDeployDev
        <<: *dockerCloudDeployerCurrent
        resource_class: small
        steps:
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - when:
                  condition:
                      equal: [true, << parameters.CLUSTER_NEXT >> ]
                  steps:
                      - modify_cluster
            - set_gcloud_config_dev
            - restore_persisted_env_vars
            - run:
                  name: Get latest release & export variables
                  command: |
                      TYPE=<<parameters.PRODUCT_TYPE>>
                      echo export TYPE=${TYPE} >> $BASH_ENV

                      LATEST_RELEASE=$(bash ${PWD}/deployments/bin/get_latest_release.sh)
                      if [[ -z "${LATEST_RELEASE}" ]]; then
                          echo "Could not retrieve latest deployed release"
                          exit 1
                      fi
                      # Remove instance name prefix to keep instance from delete cron
                      INSTANCE_NAME_PREFIX=""
                      INSTANCE_NAME=ge2ee-last-$(date "+%y%m%d-%H%M")-<<parameters.GE2EE_ID>>

                      echo export LATEST_RELEASE=${LATEST_RELEASE} >> $BASH_ENV
                      echo export INSTANCE_NAME_PREFIX=${INSTANCE_NAME_PREFIX} >> $BASH_ENV
                      echo export INSTANCE_NAME=${INSTANCE_NAME} >> $BASH_ENV

                      echo "Instance name prefix: ${INSTANCE_NAME_PREFIX}"
                      echo "Instance name: ${INSTANCE_NAME}"
                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Latest image tag: ${LATEST_RELEASE}"
            - show_datadog_logs_links:
                pfid: ${TYPE}-${INSTANCE_NAME}
            - run:
                  name: Pull Terraform modules from last release
                  command: |
                      case ${TYPE} in
                        srnt) BUCKET="serenity-edition-dev" ;;
                        grth) BUCKET="growth-edition-dev" ;;
                        tria) BUCKET="trial-edition-dev"  ;;
                      esac

                      echo "Terraform Bucket Folder: gs://akecld-terraform-modules/${BUCKET}/"

                      rm -r ./deployments
                      BOTO_CONFIG=/dev/null gsutil -m cp -r gs://akecld-terraform-modules/${BUCKET}/${LATEST_RELEASE}/deployments/ .
            - run:
                  name: Deploy instance with latest release
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      IMAGE_TAG=${LATEST_RELEASE} make -C deployments/ deploy-instance
                      IMAGE_TAG=${LATEST_RELEASE} make -C deployments/ commit-instance
            - get_datadog_migration_logs:
                pfid: ${TYPE}-${INSTANCE_NAME}
            - store_artifacts:
                path: /tmp/migration-logs.json
                destination: migration-logs.json
            - run:
                  name: Persist env vars for next jobs
                  command: |
                      echo export TYPE=${TYPE} >> persisted_env_vars
                      echo export INSTANCE_NAME="${INSTANCE_NAME}" >> persisted_env_vars
            - run:
                  name: Remove env on kubernetes
                  command: |
                      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                      export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966 -o UserKnownHostsFile=~/.ssh/known_hosts -o IdentitiesOnly=Yes'
                      UNCOMMIT_INSTANCE_STATUS_CODE=0
                      for i in 1 2 3; do make -C deployments/ uncommit-instance && UNCOMMIT_INSTANCE_STATUS_CODE=0 && break || UNCOMMIT_INSTANCE_STATUS_CODE=1; done
                      exit ${UNCOMMIT_INSTANCE_STATUS_CODE}
                  when: on_fail
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/persisted_env_vars

# Fork of build_srnt_prod that don't persist for next job
# In reality there is no need to persist values as only we only eventually need IMAGE_TAG and RELEASE_NAME for later, and they can be recomputed easily
# cf. error to attach workspace when two files with sames names was already persisted in parralele jobs ...
    ge2ee_mig-build_srnt_prod:
        environment:
            <<: *envVarsDeployDev
        machine:
            image: *executor-machine
        resource_class: medium
        working_directory: ~/project
        steps:
            - skip_job:
                  skip: << pipeline.parameters.skip_build >>
            - attach_workspace:
                  at: ~/
            - add_ssh_keys:
                  fingerprints:
                      - "1f:25:f8:bb:59:52:95:f6:e2:f2:97:2f:30:d4:e9:66"
            - change_pim_onboarder_branch_steps
            - set_gcloud_config_dev
            - run:
                  name: Define value for next steps
                  command: |
                      TYPE="srnt"
                      TYPE_LONG="serenity"
                      IMAGE_TAG=${CIRCLE_SHA1}
                      IMAGE_TAG_SHORTED=$(echo ${IMAGE_TAG} | cut -c -7)
                      IMAGE_TAG_DATE=$(date +%Y%m%d%H%M%S)
                      RELEASE_NAME="v$(date +%Y%m%d%H%M%S)"
                      PRODUCT_REFERENCE_TYPE="serenity_instance"
                      PRODUCT_REFERENCE_CODE="serenity_${ENV_NAME}"

                      echo export TYPE=${TYPE} >> $BASH_ENV
                      echo export TYPE_LONG=${TYPE_LONG} >> $BASH_ENV
                      echo export IMAGE_TAG=${IMAGE_TAG} >> $BASH_ENV
                      echo export IMAGE_TAG_SHORTED=${IMAGE_TAG_SHORTED} >> $BASH_ENV
                      echo export IMAGE_TAG_DATE=${IMAGE_TAG_DATE} >> $BASH_ENV
                      echo export RELEASE_NAME=${RELEASE_NAME} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_TYPE=${PRODUCT_REFERENCE_TYPE} >> $BASH_ENV
                      echo export PRODUCT_REFERENCE_CODE=${PRODUCT_REFERENCE_CODE} >> $BASH_ENV

                      echo "Image tag: ${IMAGE_TAG}"
                      echo "Serenity release name: ${RELEASE_NAME}"
            - run:
                  name: Build the Serenity Edition prod image
                  command: make -C deployments/ php-image-prod
            - run:
                  name: Push the Serenity Edition prod image on docker registry
                  command: make -C deployments/ push-php-image-prod
            - run:
                  name: Push Terraform modules to GCS
                  command: |
                      BOTO_CONFIG=/dev/null gsutil -m cp -r deployments/ gs://akecld-terraform-modules/serenity-edition-dev/${IMAGE_TAG}/


