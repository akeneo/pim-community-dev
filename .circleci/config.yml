version: 2.1

orbs:
  slack: circleci/slack@3.4.2

aliases:
  - &slack-fail-post-step
      post-steps:
        - slack/status:
            channel: ci
            webhook: $SLACK_NIGHTLY_STATUS
            fail_only: true

jobs:
  checkout:
    parameters:
      PRODUCT_TYPE:
        type: string
        default: ""
    docker:
      - image: alpine/git
    resource_class: small
    steps:
      - checkout
      - run:
         name: Install cUrl
         command: apk --no-cache add curl
      - run:
            name: Install yq
            command: |
                wget https://github.com/mikefarah/yq/releases/download/3.3.1/yq_linux_386
                mv yq_linux_386 /usr/local/bin/yq
                echo "e7fa464149a450d068311a244f403757408a745b  /usr/local/bin/yq" > /tmp/checksum
                sha1sum -c /tmp/checksum
                chmod +x /usr/local/bin/yq
      - run:
          name: Remove MySQL port translation for EE (see BH-664)
          command: yq delete --inplace docker-compose.yml services.mysql.ports
      - run:
          name: Remove MySQL port translation for GRTH (see BH-664)
          command: yq delete --inplace grth/docker-compose.yml services.mysql.ports
      - run:
          name: Remove MySQL port translation for TRIA
          command: yq delete --inplace tria/docker-compose.yml services.mysql.ports
      - when:
            condition:
                not:
                    equal: [master, << pipeline.git.branch >>]
            steps:
                - run:
                      name: Update composer.json if same branch exists in CE for EE
                      command: |
                          curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} && \
                              sed -i "s#akeneo/pim-community-dev\": \"6.0.x-dev#akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}#" composer.json || \
                              echo "No CE branch $CIRCLE_BRANCH found. I don't touch the EE dependencies."
                - run:
                      name: Update composer.json if same branch exists in CE for GRTH
                      command: |
                          curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} && \
                              sed -i "s#akeneo/pim-community-dev\": \"6.0.x-dev#akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}#" grth/composer.json || \
                              echo "No CE branch $CIRCLE_BRANCH found. I don't touch the Growth Edition file."
                - run:
                      name: Update composer.json if same branch exists in CE for TRIA
                      command: |
                          curl --output /dev/null --silent --head --fail https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} && \
                              sed -i "s#akeneo/pim-community-dev\": \"6.0.x-dev#akeneo/pim-community-dev\": \"dev-${CIRCLE_BRANCH}#" tria/composer.json || \
                              echo "No CE branch $CIRCLE_BRANCH found. I don't touch the Tria file."
      - persist_to_workspace:
          root: ~/
          paths:
            - project
      - store_artifacts:
          path: composer.json
          destination: ee-composer.json
      - store_artifacts:
          path: grth/composer.json
          destination: grth-composer.json
      - store_artifacts:
          path: tria/composer.json
          destination: tria-composer.json
      - store_artifacts:
          path: docker-compose.yml
          destination: ee-docker-compose.yml
      - store_artifacts:
          path: grth/docker-compose.yml
          destination: grth-docker-compose.yml
      - store_artifacts:
          path: tria/docker-compose.yml
          destination: tria-docker-compose.yml

  ##################
  # Build          #
  ##################
  build_srnt_dev:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium
    steps:
      - attach_workspace:
            at: ~/
      - run:
          name: Copy docker-compose.override.yml.dist
          command: cp .circleci/docker-compose.override.yml.dist docker-compose.override.yml
      - run:
            name: Creating cache key for PHP Docker image
            command: |
                find Dockerfile docker/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/php-docker-image.hash
                date +%F >> ~/php-docker-image.hash
      - restore_cache:
            name: Restore PHP docker image cache
            key: php-docker-image-{{ .Environment.CACHE_VERSION }}-{{ checksum "~/php-docker-image.hash" }}
      - run:
          name: Build the latest Docker images
          command: |
              ls php-pim-image.tar && docker load -i php-pim-image.tar
              ls php-pim-image.tar || make php-image-dev
              ls php-pim-image.tar || docker save -o php-pim-image.tar akeneo/pim-dev/php:8.0
      - save_cache:
            name: Save PHP docker image cache
            key: php-docker-image-{{ .Environment.CACHE_VERSION }}-{{ checksum "~/php-docker-image.hash" }}
            paths:
                - php-pim-image.tar
      - run:
          name: Setup tests results folder and log folder
          command: mkdir -p var/tests/phpspec var/tests/csfixer var/logs var/tests/screenshots ~/.cache/yarn ~/.cache/Cypress ~/.composer
      - run:
            name: Creating cache key for JS and PHP dependencies
            command: |
                cat yarn.lock > ~/front-dependency.hash && date +%F >> ~/front-dependency.hash
                cat composer.json > ~/back-dependency.hash && date +%F >> ~/back-dependency.hash
      - restore_cache:
            name: Restore cache - yarn and Cypress dependency cache
            keys:
                - frontend-dependency-cache-{{ checksum "~/front-dependency.hash" }}
      - restore_cache:
            name: Restore cache - composer dependency cache
            keys:
                - backend-dependency-cache-{{ checksum "~/back-dependency.hash" }}
      - change_pim_onboarder_branch_steps
      - run:
            name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
            command: |
                sudo chown -R 1000:1000 ../project
                sudo chown -R 1000:1000 ~/.composer
                sudo chown -R 1000:1000 ~/.cache/
      - run:
          name: Install back and front dependencies
          command: make dependencies
          environment:
            YARN_REGISTRY: "http://registry.yarnpkg.com"
      - run:
          name: Install assets
          command: make assets
      - run:
          name: Build css
          command: make css
      - run:
          name: Create hash for front packages
          command: |
              find vendor/akeneo/pim-community-dev/front-packages/akeneo-design-system -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/akeneo-design-system.hash
              find vendor/akeneo/pim-community-dev/front-packages/measurement -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/measurement.hash
              find vendor/akeneo/pim-community-dev/front-packages/shared -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/shared.hash
              find components/tailored-export/front/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/tailored-export.hash
              find vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Job/front/process-tracker -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/process-tracker.hash
              find vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/CatalogVolumeMonitoringBundle/front -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum > ~/catalog-volume-monitoring.hash
              date +%F | tee -a ~/akeneo-design-system.hash ~/measurement.hash ~/shared.hash ~/tailored-export.hash ~/catalog-volume-monitoring.hash ~/process-tracker.hash
      - run:
          name: Set front package directories owner to circleci
          command: sudo chown -R 1001:1001 vendor/akeneo/pim-community-dev/ front-packages/
      - restore_cache:
            name: Restore front package DSM cache
            key: front-packages-dsm-{{ checksum "~/akeneo-design-system.hash" }}
      - restore_cache:
            name: Restore front package measurement cache
            key: front-packages-measurement-{{ checksum "~/measurement.hash" }}
      - restore_cache:
            name: Restore front package Shared cache
            key: front-packages-shared-{{ checksum "~/shared.hash" }}
      - restore_cache:
            name: Restore front package Tailored Export cache
            key: front-packages-tailored-export-{{ checksum "~/tailored-export.hash" }}
      - restore_cache:
            name: Restore micro frontend Process Tracker cache
            key: micro-frontend-process-tracker-{{ checksum "~/process-tracker.hash" }}
      - restore_cache:
            name: Restore micro-frontend Catalog Volume Monitoring cache
            key: micro-frontend-catalog-volume-monitoring-{{ checksum "~/catalog-volume-monitoring.hash" }}
      - run:
          name: Set front packages directories owner to docker
          command: sudo chown -R 1000:1000 vendor/akeneo/pim-community-dev/ front-packages/
      - run:
          name: Build front-packages
          command: make front-packages
      - run:
          name: Build Javascript
          command: make javascript-dev
      - run:
            name: Change owner on project dir to have the right to cache the data
            command: sudo chmod -R 777 ../project ~/.cache ~/.composer vendor/akeneo/pim-community-dev/front-packages/ front-packages/
      - save_cache:
            name: Save fontend dependency cache
            paths:
                - ~/.cache
            key: frontend-dependency-cache-{{ checksum "~/front-dependency.hash" }}
      - save_cache:
            name: Save backend dependency cache
            paths:
                - ~/.composer
            key: backend-dependency-cache-{{ checksum "~/back-dependency.hash" }}
      - save_cache:
            name: Save front package DSM cache
            key: front-packages-dsm-{{ checksum "~/akeneo-design-system.hash" }}
            paths:
                - vendor/akeneo/pim-community-dev/front-packages/akeneo-design-system/
      - save_cache:
            name: Save front package measurement cache
            key: front-packages-measurement-{{ checksum "~/measurement.hash" }}
            paths:
                - vendor/akeneo/pim-community-dev/front-packages/measurement/
      - save_cache:
            name: Save front package Shared cache
            key: front-packages-shared-{{ checksum "~/shared.hash" }}
            paths:
                - vendor/akeneo/pim-community-dev/front-packages/shared/
      - save_cache:
            name: Save front package Tailored Export cache
            key: front-packages-tailored-export-{{ checksum "~/tailored-export.hash" }}
            paths:
                - front-packages/tailored-export/
      - save_cache:
            name: Save micro frontend Process Tracker cache
            key: micro-frontend-process-tracker-{{ checksum "~/process-tracker.hash" }}
            paths:
                - vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Job/front/process-tracker/
      - save_cache:
            name: Save micro-frontend Catalog Volume Monitoring cache
            key: micro-frontend-catalog-volume-monitoring-{{ checksum "~/catalog-volume-monitoring.hash" }}
            paths:
                - vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/CatalogVolumeMonitoringBundle/front/
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  ##################
  # Tests          #
  ##################
  test_back_static_and_acceptance:
      machine:
          image: ubuntu-2004:202010-01
      resource_class: medium
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: No legacy translation format
                command: PIM_CONTEXT=test make find-legacy-translations
          - run:
                name: Load archived docker image
                command: docker load -i php-pim-image.tar
          - run:
                name: Static tests
                command: PIM_CONTEXT=test make static-back
          - run:
                name: Analyzes source code to flag programming errors, bugs, stylistic errors, and suspicious constructs
                command: PIM_CONTEXT=test make lint-back
          - run:
                name: Code Coupling Detection
                command: PIM_CONTEXT=test make coupling-back
          - run:
                name: Unit tests
                command: PIM_CONTEXT=test make unit-back
          - run:
                name: Acceptance tests
                command: PIM_CONTEXT=test make acceptance-back
          - store_test_results:
                path: var/tests
          - store_artifacts:
                path: var/tests
          - store_artifacts:
                path: var/logs

  test_back_integration_bounded_contexts:
      machine:
          image: ubuntu-2004:202010-01
      resource_class: medium
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: Data Quality
                command: PIM_CONTEXT=data-quality-insights make data-quality-insights-integration-back
          - run:
                name: Asset Manager
                command: PIM_CONTEXT=asset-manager make asset-manager-integration-back
          - run:
                name: Rules Engine
                command: PIM_CONTEXT=rule-engine make rule-engine-integration-back
          - run:
                name: Tailored Export
                command: PIM_CONTEXT=tailored-export make integration-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

  test_back_integration_reference_entities:
      machine:
          image: ubuntu-2004:202010-01
      resource_class: medium
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: Reference Entities
                command: PIM_CONTEXT=reference-entity make reference-entity-integration-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

  test_database:
      machine:
          image: ubuntu-2004:202010-01
      resource_class: medium
      parallelism: 1
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=dev make database
          - run:
              name: Database test
              command: APP_ENV=dev PIM_CONTEXT=test make test-database-structure

  test_back_phpunit:
      machine:
          image: ubuntu-2004:202010-01
      resource_class: medium
      parallelism: 20
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PhpUnit Integration
                command: PIM_CONTEXT=test make pim-integration-back
          - run:
                name: PhpUnit End to end
                command: PIM_CONTEXT=test make end-to-end-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

  test_back_behat_legacy:
    machine:
        image: ubuntu-2004:202010-01
    resource_class: medium
    parallelism: 40
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Get Behat Suite name to run
          command: |
            TESTSUITE=$(echo $CIRCLE_BRANCH | sed -e 's/^.*-\([^-]*\)$/\1/g')
            if ! [[ $TESTSUITE =~ ^(weasel|chipmunk|raccoon)$ ]] ; then
              TESTSUITE="all"
            fi
            echo "Behat Suite to run: "$TESTSUITE
            echo "export TESTSUITE=$TESTSUITE" >> $BASH_ENV
      - run:
          name: Change owner on project dir in order to archive the project into the workspace
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            docker load -i php-pim-image.tar
            APP_ENV=behat C='fpm mysql elasticsearch httpd object-storage selenium pubsub-emulator' make up
            docker/wait_docker_up.sh
      - run:
          name: Install database
          command: APP_ENV=behat make database
      - run:
          name: End to end Behat tests
          command: PIM_CONTEXT=test SUITE=$TESTSUITE make end-to-end-legacy
      - run:
          name: Gather Junit test result files in the same directory to improve the render of failing tests
          command: |
              set -e
              cd var/tests/behat
              sudo chmod -R 777 .
              for subdir in */*; do mv "${subdir}" "${subdir/\//_}"; done
          when: always
      - store_test_results:
          path: var/tests/behat
      - store_artifacts:
          path: var/tests/behat
      - store_artifacts:
          path: var/logs
      - store_artifacts:
          path: var/tests/screenshots

  test_front_code_style:
      machine:
          image: ubuntu-2004:202010-01
      resource_class: medium
      steps:
        - attach_workspace:
            at: ~/
        - run:
              name: Create yarn cache folder
              command: mkdir -p  ~/.cache/yarn
        - run:
              name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
              command: sudo chown -R 1000:1000 ../project ~/.cache/yarn
        - run:
            name: Front type checking
            command: make javascript-dev-strict
        - run:
            name: Front linter
            command: PIM_CONTEXT=test make lint-front

  test_front_static_acceptance_and_integration:
      machine:
          image: ubuntu-2004:202010-01
      resource_class: medium
      steps:
        - attach_workspace:
            at: ~/
        - run:
              name: Create yarn cache folder
              command: mkdir -p  ~/.cache/yarn
        - run:
              name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
              command: sudo chown -R 1000:1000 ../project ~/.cache/yarn
        - run:
            name: Front unit tests
            command: PIM_CONTEXT=test make unit-front

  test_front_end_to_end:
      machine:
          image: ubuntu-1604:201903-01
      resource_class: large
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Create yarn cache folder
                command: mkdir -p  ~/.cache/yarn
          - run:
                name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
                command: sudo chown -R 1000:1000 ../project ~/.cache/yarn
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=behat C='fpm mysql elasticsearch httpd object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=behat O="--catalog src/Akeneo/Platform/Bundle/InstallerBundle/Resources/fixtures/icecat_demo_dev" make database
          - run:
                name: Create adminakeneo user
                command: |
                    APP_ENV=behat docker-compose run --rm -u www-data:www-data php bin/console pim:user:create adminakeneo Q7sKB5xP2ttc5KnqFPOF1BrOkTRSulmEj528BpJzbDcLbYSHU1 product-team@akeneo.com admin1 admin2 en_US --admin -n
          - run:
                name: Launch Cypress
                command: PIM_CONTEXT=test CYPRESS_defaultCommandTimeout=8000 CYPRESS_requestTimeout=10000 make end-to-end-front
          - store_artifacts:
                path: cypress/screenshots
          - store_artifacts:
                path: cypress/videos
          - store_artifacts:
                path: var/logs

  test_back_performance:
    machine:
        image: ubuntu-2004:202010-01
    resource_class: medium
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
          command: sudo chown -R 1000:1000 ../project
      - run:
          name: Start containers
          command: |
            export ES_JAVA_OPTS='-Xms2g -Xmx2g'
            docker load -i php-pim-image.tar
            APP_ENV=test APP_DEBUG=false C='fpm mysql httpd elasticsearch object-storage blackfire pubsub-emulator' make up
            docker/wait_docker_up.sh
      - run:
          name: Run performance tests
          command: APP_ENV=test .circleci/run_performance_tests.sh
      - store_test_results:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/tests/phpunit
      - store_artifacts:
          path: var/logs

  test_back_missing_structure_migrations:
      machine:
        image: ubuntu-2004:202010-01
      resource_class: medium
      steps:
        -   attach_workspace:
                at: ~/
        -   run:
                name: Load php image
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
        -   run:
                name: Reset git changes
                command: git checkout -- .
        -   run:
                name: Change owner on project dir after restoring cache
                command: sudo chown -R 1000:1000 ../project
        - run:
                name: Check PIM requirements
                command: |
                    C='mysql elasticsearch' make up
                    docker/wait_docker_up.sh
                    make check-requirements
        -   run:
                name: Test missing database and index structure migrations
                command: vendor/akeneo/pim-community-dev/.circleci/detect_structure_changes.sh $CIRCLE_BRANCH

  test_back_data_migrations:
      machine:
          image: ubuntu-2004:202010-01
      resource_class: medium
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: sudo chown -R 1000:1000 ../project
          - run:
                name: Start containers
                command: |
                    docker load -i php-pim-image.tar
                    APP_ENV=test C='fpm mysql elasticsearch object-storage pubsub-emulator' make up
                    docker/wait_docker_up.sh
          - run:
                name: Install database
                command: APP_ENV=test make database
          - run:
                name: PhpUnit Migration
                command: PIM_CONTEXT=test make migration-back
          - store_test_results:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/tests/phpunit
          - store_artifacts:
                path: var/logs

  test_onboarder_bundle:
      machine:
          image: ubuntu-2004:202010-01
      resource_class: medium
      environment:
          FLAG_ONBOARDER_ENABLED: 1
      steps:
          - attach_workspace:
                at: ~/
          - run:
                name: Change owner on project dir in order to archive the project into the workspace
                command: |
                  mkdir -p ~/.cache/yarn ~/.composer
                  sudo chown -R 1000:1000 ../project
                  sudo chown -R 1000:1000 ~/.composer
                  sudo chown -R 1000:1000 ~/.cache/yarn
          - run:
                name: Create an empty service account
                command: |
                    mkdir secret
                    echo "{}" > secret/serviceAccount.json
          - run:
                name: Load php pim image
                command: |
                    docker load -i php-pim-image.tar
          - run:
                name: Load make commands
                command: |
                    cp vendor/akeneo/pim-onboarder/onboarder.mk make-file/onboarder.mk
          - run:
                name: Require onboarder tests dependencies
                command: PIM_CONTEXT=onboarder make add-bundle-specific-dev-dependencies
          - run:
                name: Composer update for tests dependencies
                command: docker-compose run -u www-data --rm php php -d memory_limit=4G /usr/local/bin/composer update --no-interaction
          - run:
                name: Add configuration files to run the bundle tests from the PIM
                command: |
                    rm -f docker-compose.override.yml
                    PIM_VERSION=master SETUP_FOR_CI=1 PIM_CONTEXT=onboarder make setup-onboarder-parameters
                    PIM_VERSION=master PIM_CONTEXT=onboarder make setup-onboarder-tests
          - run:
                name: Change owner of PIM as some files have been created with wrong owner
                command: sudo chown -R 1000:1000 ~/project
          - run:
                name: Execute specifications
                command: PIM_CONTEXT=onboarder make test-spec
          - run:
                name: Start containers
                command: |
                  APP_ENV=test C='mysql elasticsearch object-storage pubsub-emulator' make up
                  docker/wait_docker_up.sh
          - run:
                name: Install Akeneo PIM with Onboarder specific configuration (channel, attribute, ...)
                command: PIM_CONTEXT=onboarder ENVIRONMENT=test SETUP_FOR_CI=1 make onboarder-install
          - run:
                name: Execute acceptance tests
                command: PIM_CONTEXT=onboarder make test-acceptance
          - run:
                name: "[workaround to revert] Use phpunit executable instead of composer proxy"
                command: cd vendor/bin && rm -f ./phpunit && ln -s ../phpunit/phpunit/phpunit ./phpunit
          - run:
                name: Execute PHPUnit integration tests
                command: PIM_CONTEXT=onboarder make test-integration
          - run:
                name: Start Apache/FPM and Selenium for End to End tests
                command: make up APP_ENV=behat C='fpm httpd selenium'
          - run:
                name: Execute end-to-end tests
                command: PIM_CONTEXT=onboarder make test-end-to-end
          - run:
                name: Execute synchronization end-to-end tests
                command: PIM_CONTEXT=onboarder GITHUB_TOKEN=${GITHUB_TOKEN} make test-synchronization-end-to-end
          - run:
              name: Restart FPM with Onboarder feature turned off
              command: make up APP_ENV=behat FLAG_ONBOARDER_ENABLED=0 C='fpm'
          - run:
              name: Execute end-to-end "Onboarder feature disabled" tests
              command: PIM_CONTEXT=onboarder make test-end-to-end-onboarder-disabled
          - store_test_results:
                path: ~/project/pim/var/tests
          - store_artifacts:
                path: ~/project/pim/var/tests
          - store_artifacts:
                path: ~/project/pim/var/logs

  pull_request_success:
      docker:
          - image: alpine/git
      resource_class: small
      steps:
          - run:
              name: Success
              command: echo "The build has run with success! Let's merge :)"

  ##################
  # Sanity checks  #
  ##################
  ui_sanity_checks:
      parameters:
        SOURCE_PFID:
          type: string
          default: ""
      machine:
          image: ubuntu-2004:202010-01
      resource_class: large
      steps:
          - attach_workspace:
                at: ~/
          - restore_persisted_env_vars
          - run:
                name: Copy docker-compose.override.yml.dist
                command: cp .circleci/docker-compose.override.yml.dist docker-compose.override.yml
          - run:
                name: Setup tests results folder and log folder
                command: mkdir -p var/tests/phpspec var/tests/csfixer var/logs var/tests/screenshots ~/.cache/yarn ~/.composer ~/.cache/Cypress
          - run:
                name: Change owner on project dir (default user = circleci (1001) and docker needs uid 1000)
                command: |
                    sudo chown -R 1000:1000 ../project
                    sudo chown -R 1000:1000 ~/.composer
                    sudo chown -R 1000:1000 ~/.cache/yarn
                    sudo chown -R 1000:1000 ~/.cache/Cypress
          - run:
                name: Build the latest Docker images
                command: |
                    make php-image-dev
          - when:
                condition:
                    not:
                        equal: [master, << pipeline.git.branch >>]
                steps:
                    - run:
                          name: Update composer.json if same branch exists in CE
                          command: >
                              curl --output /dev/null --silent --head --fail
                              https://github.com/akeneo/pim-community-dev/tree/${CIRCLE_BRANCH} &&
                              docker-compose run --rm -u www-data:www-data php php
                              /usr/local/bin/composer require "akeneo/pim-community-dev:dev-${CIRCLE_BRANCH}" --no-update ||
                              echo "No CE branch $CIRCLE_BRANCH found. I don't touch the composer.json file."
          - run:
                name: Install back dependencies
                command: make dependencies
          - run:
                name: Launch Cypress
                command: |
                    PIM_CONTEXT=test CYPRESS_defaultCommandTimeout=10000 CYPRESS_requestTimeout=10000 CYPRESS_responseTimeout=50000 CYPRESS_baseUrl=https://${INSTANCE_NAME}.dev.cloud.akeneo.com make end-to-end-front
          - store_artifacts:
                path: cypress/screenshots
          - store_artifacts:
                path: cypress/videos
          - store_artifacts:
                path: var/logs

workflows:
  pull_request:
      when:
          not:
              equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
      jobs:
          - ready_to_build?:
                type: approval
                filters:
                    branches:
                        ignore:
                            - "master"
          - checkout:
                requires:
                    - ready_to_build?
          - build_srnt_dev:
                requires:
                    - checkout
          - test_back_integration_bounded_contexts:
                requires:
                    - build_srnt_dev
          - test_back_integration_reference_entities:
                requires:
                    - build_srnt_dev
          - test_back_static_and_acceptance:
                requires:
                    - build_srnt_dev
          - test_back_phpunit:
                requires:
                    - build_srnt_dev
          - test_back_performance:
                requires:
                    - build_srnt_dev
          - test_back_data_migrations:
                requires:
                    - build_srnt_dev
          - test_front_static_acceptance_and_integration:
                requires:
                    - build_srnt_dev
          - test_front_end_to_end:
                requires:
                    - build_srnt_dev
          - test_front_code_style:
                requires:
                    - build_srnt_dev
          - test_back_behat_legacy:
                requires:
                    - test_back_static_and_acceptance
                    - test_front_static_acceptance_and_integration
                    - test_front_code_style
                    - test_back_phpunit
                    - test_back_integration_bounded_contexts
                    - test_back_integration_reference_entities
          - test_database:
                requires:
                    - build_srnt_dev
          - test_onboarder_bundle:
                requires:
                    - build_srnt_dev
          - pull_request_success:
                requires:
                    - test_back_performance
                    - test_back_behat_legacy
                    - test_onboarder_bundle
                    - test_database
                    - test_back_data_migrations

  nightly:
      when:
          and:
              - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
              - equal: [ "nightly_v6", << pipeline.schedule.name >> ]
      jobs:
          - checkout
          - test_front_code_style:
                <<: *slack-fail-post-step
                requires:
                    - build_srnt_dev
          - test_back_static_and_acceptance:
                <<: *slack-fail-post-step
                requires:
                    - build_srnt_dev
          - test_front_static_acceptance_and_integration:
                <<: *slack-fail-post-step
                requires:
                    - build_srnt_dev
          - test_back_phpunit:
                <<: *slack-fail-post-step
                requires:
                    - build_srnt_dev
          - test_back_integration_bounded_contexts:
                <<: *slack-fail-post-step
                requires:
                    - build_srnt_dev
          - test_back_integration_reference_entities:
                <<: *slack-fail-post-step
                requires:
                    - build_srnt_dev
          - test_back_performance:
                <<: *slack-fail-post-step
                requires:
                    - build_srnt_dev
          - test_onboarder_bundle:
                <<: *slack-fail-post-step
                requires:
                    - build_srnt_dev
          - test_back_behat_legacy:
                <<: *slack-fail-post-step
                requires:
                    - build_srnt_dev
          - test_back_data_migrations:
                <<: *slack-fail-post-step
                requires:
                    - build_srnt_dev

commands:
  install_yq:
    description: "Install yq"
    steps:
      - run:
          name: Install yq
          command: |
            wget https://github.com/mikefarah/yq/releases/download/3.3.1/yq_linux_386
            sudo mv yq_linux_386 /usr/local/bin/yq
            echo "e7fa464149a450d068311a244f403757408a745b  /usr/local/bin/yq" > /tmp/checksum
            sha1sum -c /tmp/checksum
            sudo chmod +x /usr/local/bin/yq

  connector_bigcommerce_checkout_steps:
      description: "Checkout big commerce connector repository"
      steps:
          - run:
                name: BIG COMMERCE CONNECTOR - Ensure to use the ssh key of akeneo-circle-ci account
                command: |
                    ssh-add -D
                    ssh-add ~/.ssh/id_rsa_1f25f8bb595295f6e2f2972f30d4e966
          - when:
              condition:
                  not:
                      equal: [master, << pipeline.git.branch >>]
              steps:
                  - run:
                      name: BIG COMMERCE CONNECTOR - Get connector branch if the same branch exists than the PIM one
                      command: |
                          if git ls-remote --exit-code --heads git@github.com:akeneo/bigcommerce-connector.git ${CIRCLE_BRANCH}; then
                            CONNECTOR_BC_BRANCH=${CIRCLE_BRANCH}
                          else
                            CONNECTOR_BC_BRANCH=master
                          fi
                          echo ${CONNECTOR_BC_BRANCH}
                          echo export CONNECTOR_BC_BRANCH=${CONNECTOR_BC_BRANCH} >> $BASH_ENV
          - when:
              condition:
                  equal: [master, << pipeline.git.branch >>]
              steps:
                  - run:
                      name: BIG COMMERCE CONNECTOR - Get last tagged connector version ready for production
                      command: |
                          CONNECTOR_BC_BRANCH=$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags git@github.com:akeneo/bigcommerce-connector.git 'v*' | tail -n1 | cut -d'/' -f3)

                          echo export CONNECTOR_BC_BRANCH=${CONNECTOR_BC_BRANCH} >> $BASH_ENV
          - run:
              name: BIG COMMERCE CONNECTOR - Checkout BigCommerce Connector
              command: |
                  mkdir -p tmp
                  echo ${CONNECTOR_BC_BRANCH}
                  git clone --branch $CONNECTOR_BC_BRANCH git@github.com:akeneo/bigcommerce-connector.git tmp/build-connector
                  cd tmp/build-connector
                  echo ${CONNECTOR_BC_BRANCH} > back/VERSION
                  pwd
                  echo `git rev-parse --short HEAD`

  change_pim_onboarder_branch_steps:
      description: "Change Onboarder dependency if same branch exists"
      steps:
          - when:
                condition:
                    not:
                        equal: [master, << pipeline.git.branch >>]
                steps:
                    - run:
                          name: Update composer.json if same branch exists in PIM Onboarder for EE
                          command: |
                              curl -H "Authorization: token ${GITHUB_TOKEN}" \
                                  -H 'Accept: application/vnd.github.v3.raw' \
                                  --output /dev/null --silent --head --fail \
                                  -L https://api.github.com/repos/akeneo/pim-onboarder/contents/README.md?ref=${CIRCLE_BRANCH} && \
                                  ONBOARDER_BRANCH="dev-${CIRCLE_BRANCH}" || ONBOARDER_BRANCH="dev-master"
                                  echo "Update Onboarder dependencie to branch ${ONBOARDER_BRANCH}"
                                  sed -i "s#akeneo/pim-onboarder\": \"^5.0.0#akeneo/pim-onboarder\": \"${ONBOARDER_BRANCH}#" composer.json
